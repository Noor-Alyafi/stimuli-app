{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nStimuli is a modern web application designed for neurodivergent minds to train their senses and cognitive abilities through gamified brain training exercises. The app features a full-stack architecture with React frontend, Express backend, PostgreSQL database, and implements comprehensive user authentication, progress tracking, and achievement systems.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture (Static Deployment)\n- **Framework**: React 18 with TypeScript (static build)\n- **UI Library**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with custom design tokens\n- **State Management**: Custom static data hooks with localStorage persistence\n- **Navigation**: Custom tab-based navigation system\n- **Animations**: Framer Motion for smooth transitions and interactions\n- **Data Storage**: Browser localStorage for all user data and game progress\n- **Authentication**: Client-side authentication with password hashing and session management\n\n### Data Persistence Architecture\n- **Storage**: Browser localStorage for all application data\n- **Data Structure**: Structured JSON objects for users, game progress, achievements, and transactions\n- **Authentication**: Static authentication service with password hashing\n- **Session Management**: localStorage-based user sessions\n- **Data Validation**: TypeScript interfaces for type safety\n\n## Key Components\n\n### Authentication System (Static)\n- **Provider**: Custom static authentication service\n- **Session Storage**: localStorage-based sessions\n- **User Management**: Client-side user registration and login\n- **Security**: Password hashing and localStorage-based session management\n- **Registration**: Email and username validation with duplicate prevention\n\n### Game Progress Tracking\n- **Progress Logging**: Individual game session tracking with scores and timing\n- **XP System**: Experience points awarded for game completion\n- **Streak Tracking**: Daily engagement streak calculation\n- **Skill Development**: Multiple skill categories with individual progress\n\n### Achievement System\n- **Badge System**: Unlockable achievements with different categories\n- **Progress Rewards**: XP rewards for milestone achievements\n- **Visual Feedback**: Custom icons and animations for achievements\n\n### User Interface\n- **Design System**: Custom Tailwind configuration with neurodivergent-friendly colors\n- **Component Library**: Comprehensive UI components based on Radix UI\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Interactive Elements**: Growth tree visualization, progress charts, and animated feedback\n\n## Data Flow (Static)\n\n1. **User Authentication**: Users register/login via client-side authentication stored in localStorage\n2. **Game Sessions**: Users play games, with progress automatically tracked and stored in localStorage\n3. **Progress Calculation**: XP, levels, and streaks are calculated and updated in real-time using static data hooks\n4. **Achievement Checking**: New achievements are evaluated and unlocked after each session with coin rewards\n5. **Data Visualization**: Progress data is transformed from localStorage and displayed in charts and visual components\n6. **Data Persistence**: All user data persists in browser localStorage across sessions\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React Query, React Hook Form\n- **UI Components**: Radix UI suite for accessible components\n- **Styling**: Tailwind CSS, Framer Motion for animations\n- **Database**: Neon PostgreSQL, Drizzle ORM\n- **Authentication**: Replit Auth, Passport.js\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized builds\n- **TypeScript**: Full type safety across frontend and backend\n- **Code Quality**: ESLint, Prettier (implied by project structure)\n\n## Deployment Strategy\n\n### Build Process\n- **Frontend**: Vite builds optimized static assets\n- **Backend**: esbuild bundles Node.js server code\n- **Database**: Drizzle migrations handle schema updates\n\n### Environment Configuration\n- **Development**: Hot reloading with Vite dev server\n- **Production**: Compiled assets served by Express with static file serving\n- **Database**: Environment-based connection strings for different deployment stages\n\n### Hosting Requirements\n- **Runtime**: Node.js environment with ES module support\n- **Database**: PostgreSQL-compatible database (Neon serverless)\n- **Storage**: Session storage in PostgreSQL\n- **Environment Variables**: Database URL, session secrets, OAuth configuration\n\nThe application is designed to be a comprehensive brain training platform with professional-grade user experience, robust data tracking, and engaging gamification elements specifically tailored for neurodivergent users.\n\n## Recent Changes (August 30, 2025)\n\n### Growth Tree Level System Restructure\n- **Level Progression**: Levels 1-9 progress every 200 XP, level 10 reached at exactly 2000 XP\n- **Level Reset System**: After reaching level 10 (2000 XP), users continue to level 11+ with 300 XP per level\n- **Tree Master Achievement**: Added special achievement for reaching level 10 with automatic progression\n- **Enhanced XP Notifications**: Advanced UI showing specific earned XP amounts with improved styling\n- **Level 8 Visual Fix**: Level 8 trees now appear like level 7 trees but continue growth progression\n\n### Decoration System Enhancement\n- **Fairy Lights**: Large colorful teardrop-shaped bulbs on horizontal black wire strings across trees\n- **Garden Gnomes**: Cute whimsical gnomes with colorful oversized hats and beards placed at tree base\n- **Multi-Stage Support**: Decorations now available on growth stages 3, 4, and 5 with appropriate sizing\n- **Visual Consistency**: Gnome hat colors vary by tree stage (green, blue, pink) for visual variety\n- **Proper Positioning**: Gnomes positioned on ground near tree base, lights strung horizontally across branches\n- **Equal Distance Positioning**: Fixed gnome placement to use equal distance around tree center for uniform spacing\n\n### Game System Improvements\n- **Enhanced XP Rewards**: Base 15 XP + bonus XP based on performance scores\n- **Synesthetic Recall Fix**: Color consistency now uses exact colors from display phase\n- **Store Cleanup**: Removed duplicate \"Willow Tree Seed\" items, kept unified \"Willow Seed\"\n- **Notification Polish**: Removed duplicate XP notifications, streamlined reward display system\n\n### Critical Bug Fixes (Latest Update - August 30, 2025)\n- **Money Reset Bug**: Fixed purchase system where user coins reset to zero after buying items by removing double coin deduction\n- **Color Echo Game Logic**: Completely rebuilt sequence matching to properly compare colors and frequencies, fixed visual highlighting during sequence display\n- **Shape Sequence Game Logic**: Fixed multiple sequence generation conflicts, rebuilt timing system with sequential display to prevent overlapping sequences\n- **Game Timing**: Improved sequence display timing in both games (1500ms intervals) with proper sequential logic\n- **Sequence Length**: Reduced maximum sequence length for better accessibility (ColorEcho: 6, ShapeSequence: 5)\n- **Achievement Rewards**: Added 20-coin rewards for each achievement unlock with proper notifications and sound effects\n- **Store Card Consistency**: Standardized all store item cards with uniform heights and aligned content layout using flexbox\n- **Sound Feedback**: Added proper audio feedback for correct/incorrect answers in all games with visual notifications\n- **Gnome Positioning**: Enhanced decoration system with mathematical semicircle positioning for perfect centering around trees with increased spacing (100% radius)\n- **Navigation Branding**: Added custom SVG brain logo to navigation header next to \"Stimuli\" title with gradient background\n\n### Static Deployment Conversion (August 30, 2025)\n- **Architecture Change**: Converted entire application from full-stack to static frontend-only for GitHub Pages deployment\n- **Data Management**: Replaced PostgreSQL database with localStorage-based persistence\n- **Authentication System**: Implemented client-side authentication using localStorage with password hashing\n- **React Query Replacement**: Removed all @tanstack/react-query dependencies and replaced with custom static data hooks\n- **API Layer Removal**: Eliminated all server API routes and database connections\n- **Build Configuration**: Created static-specific Vite configuration optimized for GitHub Pages\n- **Data Persistence**: All user progress, achievements, game sessions, and purchases now stored in browser localStorage\n- **Deployment Ready**: Application now fully compatible with GitHub Pages hosting without backend requirements","size_bytes":8839},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  base: '/stimuli/', // Change this to match your GitHub repository name\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./client/src\"),\n      \"@shared\": path.resolve(__dirname, \"./shared\"),\n      \"@assets\": path.resolve(__dirname, \"./attached_assets\")\n    },\n  },\n  build: {\n    outDir: 'dist',\n    sourcemap: false,\n    minify: 'esbuild',\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          ui: ['framer-motion', 'lucide-react']\n        }\n      }\n    }\n  },\n  optimizeDeps: {\n    include: ['react', 'react-dom', 'framer-motion']\n  },\n  server: {\n    port: 3000,\n    host: true\n  }\n})","size_bytes":844},"server/db.ts":{"content":"import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Use HTTP driver for better compatibility in serverless environments\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });","size_bytes":432},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { AuthService } from \"./auth\";\nimport { sessionMiddleware } from \"./session\";\nimport { \n  insertGameProgressSchema, \n  insertJournalEntrySchema,\n  insertUserTreeSchema,\n  insertCoinTransactionSchema,\n  insertStoreItemSchema,\n  registerUserSchema,\n  loginUserSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Add session middleware\n  app.use(sessionMiddleware);\n\n  // Create a demo user for testing\n  const demoUserId = \"demo-user\";\n  \n  // Initialize database connection with retry logic\n  const initializeDatabase = async (retries = 3) => {\n    for (let i = 0; i < retries; i++) {\n      try {\n        console.log(`Attempting to connect to database (attempt ${i + 1}/${retries})...`);\n        \n        await storage.upsertUser({\n          id: demoUserId,\n          email: \"demo@stimuli.com\",\n          username: \"demo\",\n          password: \"$2a$10$dummy.hash\", // Dummy hash for demo user\n          firstName: \"Demo\",\n          lastName: \"User\",\n          profileImageUrl: null,\n          coins: 50, // Start with 50 coins\n        });\n\n        // Seed initial achievements\n        const existingAchievements = await storage.getAchievements();\n        if (existingAchievements.length === 0) {\n          // XP Milestone Badges\n          await storage.createAchievement({\n            key: \"neural-spark\",\n            name: \"Neural Spark\",\n            description: \"Your brain's warming up!\",\n            xpReward: 0,\n            iconType: \"⚡\",\n            requirement: { type: \"xp\", value: 50 },\n          });\n          await storage.createAchievement({\n            key: \"cortex-climber\",\n            name: \"Cortex Climber\",\n            description: \"Scaling the mental mountain!\",\n            xpReward: 0,\n            iconType: \"🧗‍♀️\",\n            requirement: { type: \"xp\", value: 100 },\n          });\n          await storage.createAchievement({\n            key: \"memory-mage\",\n            name: \"Memory Mage\",\n            description: \"You've got memory magic!\",\n            xpReward: 0,\n            iconType: \"🪄\",\n            requirement: { type: \"xp\", value: 250 },\n          });\n          await storage.createAchievement({\n            key: \"synesthesia-savant\",\n            name: \"Synesthesia Savant\",\n            description: \"You see sounds. You feel colors. You slay.\",\n            xpReward: 0,\n            iconType: \"🌈\",\n            requirement: { type: \"xp\", value: 500 },\n          });\n          await storage.createAchievement({\n            key: \"neuro-legend\",\n            name: \"NeuroLegend\",\n            description: \"Cognitive Queen/King 👑 unlocked.\",\n            xpReward: 0,\n            iconType: \"👑\",\n            requirement: { type: \"xp\", value: 1000 },\n          });\n\n          // Streak Rewards\n          await storage.createAchievement({\n            key: \"baby-brainiac\",\n            name: \"Baby Brainiac\",\n            description: \"3 days of brain training!\",\n            xpReward: 20,\n            iconType: \"🍼\",\n            requirement: { type: \"streak\", value: 3 },\n          });\n          await storage.createAchievement({\n            key: \"neural-discipline\",\n            name: \"Neural Discipline\",\n            description: \"14+ days of cognitive commitment!\",\n            xpReward: 100,\n            iconType: \"🏅\",\n            requirement: { type: \"streak\", value: 14 },\n          });\n\n          // Behavioral Achievements\n          await storage.createAchievement({\n            key: \"mindful-moment\",\n            name: \"Mindful Moment\",\n            description: \"For tracking emotions consistently\",\n            xpReward: 30,\n            iconType: \"🧘\",\n            requirement: { type: \"journal_count\", value: 3 },\n          });\n          await storage.createAchievement({\n            key: \"sensory-explorer\",\n            name: \"Sensory Explorer\",\n            description: \"For being curious AF\",\n            xpReward: 50,\n            iconType: \"🔍\",\n            requirement: { type: \"games_played\", value: 6 },\n          });\n          await storage.createAchievement({\n            key: \"synesthetic-pro\",\n            name: \"Synesthetic Pro\",\n            description: \"Complete 5 color-echo games\",\n            xpReward: 75,\n            iconType: \"🎨\",\n            requirement: { type: \"game_count\", game: \"color-echo\", value: 5 },\n          });\n          await storage.createAchievement({\n            key: \"tree-master\",\n            name: \"Tree Master\",\n            description: \"Congratulations! You grew your first tree to full maturity!\",\n            xpReward: 200,\n            iconType: \"🌳\",\n            requirement: { type: \"xp\", value: 2000 },\n          });\n        }\n\n        // Seed store items if empty\n        const existingStoreItems = await storage.getStoreItems();\n        if (existingStoreItems.length === 0) {\n          // Tree seeds\n          await storage.createStoreItem({\n            itemType: 'tree_seed',\n            name: 'Cherry Blossom Seed',\n            description: 'Plant a beautiful cherry blossom tree that grows pink petals',\n            price: 25,\n            category: 'seeds',\n            isAvailable: true,\n          });\n          await storage.createStoreItem({\n            itemType: 'tree_seed',\n            name: 'Rainbow Eucalyptus Seed',\n            description: 'A magical tree with multicolored bark - rare and special!',\n            price: 50,\n            category: 'seeds',\n            isAvailable: true,\n          });\n          // Willow seed removed - duplicate with seed.ts\n          \n          // Tree fertilizers/boosters\n          await storage.createStoreItem({\n            itemType: 'tree_fertilizer',\n            name: 'Growth Booster',\n            description: 'Instantly advance your tree to the next growth stage',\n            price: 30,\n            category: 'boosters',\n            isAvailable: true,\n          });\n          await storage.createStoreItem({\n            itemType: 'tree_fertilizer',\n            name: 'Miracle Grow',\n            description: 'Doubles XP contribution for tree growth',\n            price: 20,\n            category: 'boosters',\n            isAvailable: true,\n          });\n          \n          // Decorative items\n          await storage.createStoreItem({\n            itemType: 'decoration',\n            name: 'Fairy Lights',\n            description: 'Add magical twinkling lights to your trees',\n            price: 35,\n            category: 'decorations',\n            isAvailable: true,\n          });\n          await storage.createStoreItem({\n            itemType: 'decoration',\n            name: 'Garden Gnome',\n            description: 'A friendly gnome to watch over your garden',\n            price: 40,\n            category: 'decorations',\n            isAvailable: true,\n          });\n        }\n        \n        console.log(\"Database initialized successfully\");\n        return;\n      } catch (error) {\n        console.error(`Database initialization error (attempt ${i + 1}):`, error);\n        if (i === retries - 1) {\n          console.error(\"Failed to initialize database after all retries\");\n          // Don't throw error, let the app continue without database initialization\n        } else {\n          // Wait before retry\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      }\n    }\n  };\n\n  // Initialize database asynchronously\n  initializeDatabase().catch(console.error);\n\n  // Auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      // For demo purposes, use demo user\n      req.session.userId = demoUserId;\n    }\n    next();\n  };\n\n  // Auth routes\n  app.post('/api/auth/register', async (req: any, res) => {\n    try {\n      const userData = registerUserSchema.parse(req.body);\n      const user = await AuthService.registerUser(userData);\n      req.session.userId = user.id;\n      res.status(201).json(user);\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/auth/login', async (req: any, res) => {\n    try {\n      const credentials = loginUserSchema.parse(req.body);\n      const user = await AuthService.loginUser(credentials);\n      req.session.userId = user.id;\n      res.json(user);\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      res.status(401).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/auth/logout', (req: any, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get('/api/auth/user', requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Game progress routes\n  app.post('/api/game-progress', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const progressData = insertGameProgressSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const progress = await storage.addGameProgress(progressData);\n      \n      // Update user XP with variable amount based on score\n      const baseXP = 15;\n      const bonusXP = Math.floor(progressData.score / 50);\n      const totalXP = baseXP + bonusXP;\n      \n      const user = await storage.updateUserXP(userId, totalXP);\n      \n      // Update streak\n      await storage.updateUserStreak(userId);\n      \n      // Award coins based on performance\n      let coinsEarned = 2; // Base coins per game\n      if (progressData.score >= 80) coinsEarned = 5; // Bonus for good performance\n      if (progressData.score >= 95) coinsEarned = 8; // Bonus for excellent performance\n      \n      await storage.addCoinTransaction({\n        userId,\n        amount: coinsEarned,\n        transactionType: 'game_reward',\n        description: `Completed ${progressData.gameType} (Score: ${progressData.score})`,\n        gameType: progressData.gameType,\n      });\n      \n      // Check for new achievements\n      const newAchievements = await storage.checkAndUnlockAchievements(userId);\n      \n      res.json({ \n        progress, \n        newAchievements,\n        coinsEarned,\n        message: newAchievements.length > 0 ? \"Achievement unlocked!\" : `Progress saved! +${coinsEarned} coins`\n      });\n    } catch (error) {\n      console.error(\"Error saving game progress:\", error);\n      res.status(500).json({ message: \"Failed to save progress\" });\n    }\n  });\n\n  app.get('/api/game-progress', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const { gameType } = req.query;\n      \n      const progress = await storage.getUserGameProgress(userId, gameType as string);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching game progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch progress\" });\n    }\n  });\n\n  app.get('/api/best-scores', requireAuth, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const bestScores = await storage.getUserBestScores(userId);\n      res.json(bestScores);\n    } catch (error) {\n      console.error(\"Error fetching best scores:\", error);\n      res.status(500).json({ message: \"Failed to fetch best scores\" });\n    }\n  });\n\n  // Achievement routes\n  app.get('/api/achievements', async (req: any, res) => {\n    try {\n      const achievements = await storage.getAchievements();\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.get('/api/user-achievements', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const userAchievements = await storage.getUserAchievements(userId);\n      res.json(userAchievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  // Journal routes\n  app.post('/api/journal', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const entryData = insertJournalEntrySchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const entry = await storage.addJournalEntry(entryData);\n      \n      // Award XP for journal entry\n      await storage.updateUserXP(userId, 5);\n      \n      res.json({ entry, message: \"Journal entry saved! +5 XP\" });\n    } catch (error) {\n      console.error(\"Error saving journal entry:\", error);\n      res.status(500).json({ message: \"Failed to save journal entry\" });\n    }\n  });\n\n  app.get('/api/journal', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const { limit } = req.query;\n      \n      const entries = await storage.getUserJournalEntries(userId, limit ? parseInt(limit as string) : undefined);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching journal entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch journal entries\" });\n    }\n  });\n\n  // Skill progress routes\n  app.get('/api/skill-progress', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const skillProgress = await storage.getUserSkillProgress(userId);\n      res.json(skillProgress);\n    } catch (error) {\n      console.error(\"Error fetching skill progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch skill progress\" });\n    }\n  });\n\n  app.put('/api/skill-progress', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const { skillType, level } = req.body;\n      \n      await storage.updateSkillProgress(userId, skillType, level);\n      res.json({ message: \"Skill progress updated\" });\n    } catch (error) {\n      console.error(\"Error updating skill progress:\", error);\n      res.status(500).json({ message: \"Failed to update skill progress\" });\n    }\n  });\n\n  // Tree management routes\n  app.get('/api/trees', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const trees = await storage.getUserTrees(userId);\n      res.json(trees);\n    } catch (error) {\n      console.error(\"Error fetching trees:\", error);\n      res.status(500).json({ message: \"Failed to fetch trees\" });\n    }\n  });\n\n  app.post('/api/trees/plant', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const { treeType, seedItemId } = req.body;\n      \n      // Check if user has the required seed in inventory - ONLY if seedItemId is provided\n      if (seedItemId) {\n        const inventory = await storage.getUserInventory(userId);\n        const seedItem = inventory.find(item => item.storeItemId === seedItemId && (item.quantity || 0) > 0);\n        \n        if (!seedItem || (seedItem.quantity || 0) < 1) {\n          return res.status(400).json({ message: \"You need to purchase a seed first!\" });\n        }\n        \n        // Remove one seed from inventory\n        await storage.useInventoryItem(userId, seedItemId, 1);\n      }\n      // If no seedItemId provided, allow free planting (for demo purposes)\n      \n      const tree = await storage.plantTree({\n        userId,\n        treeType: treeType || 'oak',\n        growthStage: 1,\n        xpContributed: 0,\n      });\n\n      // Track tree planting for achievements\n      await storage.addCoinTransaction({\n        userId,\n        amount: 0, // No coin cost/reward for planting\n        transactionType: 'tree_planted',\n        description: 'Planted tree'\n      });\n      \n      // Check for new achievements\n      await storage.checkAndUnlockAchievements(userId);\n      \n      res.json({ tree, message: \"Tree planted successfully!\" });\n    } catch (error) {\n      console.error(\"Error planting tree:\", error);\n      res.status(500).json({ message: \"Failed to plant tree\" });\n    }\n  });\n\n  app.post('/api/trees/:treeId/water', async (req: any, res) => {\n    try {\n      const { treeId } = req.params;\n      const userId = demoUserId;\n      \n      await storage.waterTree(parseInt(treeId));\n      \n      // Track watering for achievements\n      await storage.addCoinTransaction({\n        userId,\n        amount: 0, // No coin reward for watering\n        transactionType: 'tree_watered',\n        description: 'Watered tree'\n      });\n      \n      // Check for new achievements\n      await storage.checkAndUnlockAchievements(userId);\n      \n      res.json({ message: \"Tree watered!\" });\n    } catch (error) {\n      console.error(\"Error watering tree:\", error);\n      res.status(500).json({ message: \"Failed to water tree\" });\n    }\n  });\n\n  app.post('/api/trees/:treeId/decorate', async (req: any, res) => {\n    try {\n      const { treeId } = req.params;\n      const { decorationType, storeItemId } = req.body;\n      const userId = demoUserId;\n      \n      // Use inventory item\n      await storage.useInventoryItem(userId, storeItemId, 1);\n      \n      // Update tree with decoration\n      await storage.decorateTree(parseInt(treeId), decorationType);\n      \n      // Return decoration type in response so frontend knows what was added\n      res.json({ \n        message: \"Tree decorated successfully!\", \n        decorationType: decorationType \n      });\n    } catch (error) {\n      console.error(\"Error decorating tree:\", error);\n      res.status(500).json({ message: \"Failed to decorate tree\" });\n    }\n  });\n\n  app.post('/api/trees/:treeId/grow', async (req: any, res) => {\n    try {\n      const { treeId } = req.params;\n      const { xpToContribute = 10 } = req.body;\n      const userId = demoUserId;\n      \n      const parsedTreeId = parseInt(treeId);\n      if (isNaN(parsedTreeId)) {\n        return res.status(400).json({ message: \"Invalid tree ID\" });\n      }\n      \n      // Check if user has enough coins (2 coins to grow)\n      const user = await storage.getUser(userId);\n      if (!user || (user.coins || 0) < 2) {\n        return res.status(400).json({ message: \"You need at least 2 coins to grow a tree!\" });\n      }\n      \n      // Deduct 2 coins for growing\n      await storage.addCoinTransaction({\n        userId,\n        amount: -2,\n        transactionType: 'tree_growth',\n        description: 'Grew tree'\n      });\n      \n      // Add 10 XP for growing\n      await storage.updateUserXP(userId, 10);\n      \n      const result = await storage.growTree(parsedTreeId, xpToContribute);\n      \n      // Check for new achievements after tree actions\n      await storage.checkAndUnlockAchievements(userId);\n      \n      res.json({ \n        tree: result.tree, \n        previousStage: result.previousStage,\n        message: \"Tree grew! -2 coins, +10 XP\" \n      });\n    } catch (error) {\n      console.error(\"Error growing tree:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to grow tree\" });\n      }\n    }\n  });\n\n  // Coin system routes\n  app.get('/api/coins/transactions', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const transactions = await storage.getUserCoinTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching coin transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Store routes\n  app.get('/api/store', async (req: any, res) => {\n    try {\n      const { category } = req.query;\n      const items = await storage.getStoreItems(category as string);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching store items:\", error);\n      res.status(500).json({ message: \"Failed to fetch store items\" });\n    }\n  });\n\n  app.post('/api/store/purchase', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const { itemId, quantity = 1 } = req.body;\n      \n      await storage.purchaseItem(userId, itemId, quantity);\n      res.json({ message: \"Purchase successful!\" });\n    } catch (error) {\n      console.error(\"Error purchasing item:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to purchase item\" });\n      }\n    }\n  });\n\n  app.get('/api/inventory', async (req: any, res) => {\n    try {\n      const userId = demoUserId;\n      const inventory = await storage.getUserInventory(userId);\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Error fetching inventory:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  // Note: decoration route moved above - removed duplicate\n\n  // Initialize store items route (dev only)\n  app.post('/api/admin/seed-store', async (req, res) => {\n    try {\n      const { seedStore } = await import('./seed');\n      await seedStore();\n      res.json({ message: 'Store seeded successfully' });\n    } catch (error) {\n      console.error('Error seeding store:', error);\n      res.status(500).json({ message: 'Failed to seed store' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":21741},"server/seed.ts":{"content":"// Database seeding script to initialize store items\nimport { db } from './db';\nimport { storeItems } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst seedStoreItems = [\n  {\n    name: \"Oak Tree Seed\",\n    description: \"A classic oak tree seed for strong, steady growth.\",\n    price: 50,\n    category: \"seeds\",\n    itemType: \"tree_seed\",\n    isAvailable: true\n  },\n  {\n    name: \"Cherry Blossom Seed\",\n    description: \"Beautiful pink cherry blossom tree seed.\",\n    price: 75,\n    category: \"seeds\", \n    itemType: \"tree_seed\",\n    isAvailable: true\n  },\n  {\n    name: \"Willow Seed\",\n    description: \"Graceful willow tree seed for calm gardens.\",\n    price: 25,\n    category: \"seeds\",\n    itemType: \"tree_seed\", \n    isAvailable: true\n  },\n  {\n    name: \"Rainbow Tree Seed\",\n    description: \"Rare magical rainbow tree seed - very special!\",\n    price: 200,\n    category: \"seeds\",\n    itemType: \"tree_seed\",\n    isAvailable: true\n  },\n  {\n    name: \"Pine Tree Seed\",\n    description: \"Evergreen pine tree that stays green all year.\",\n    price: 30,\n    category: \"seeds\",\n    itemType: \"tree_seed\",\n    isAvailable: true\n  },\n  {\n    name: \"Maple Tree Seed\",\n    description: \"Beautiful maple tree with stunning autumn colors.\",\n    price: 35,\n    category: \"seeds\",\n    itemType: \"tree_seed\",\n    isAvailable: true\n  },\n  {\n    name: \"Birch Tree Seed\",\n    description: \"Elegant white birch tree with distinctive bark.\",\n    price: 28,\n    category: \"seeds\",\n    itemType: \"tree_seed\",\n    isAvailable: true\n  },\n  {\n    name: \"Sakura Tree Seed\",\n    description: \"Traditional Japanese cherry blossom tree.\",\n    price: 45,\n    category: \"seeds\",\n    itemType: \"tree_seed\",\n    isAvailable: true\n  },\n  {\n    name: \"Growth Fertilizer\",\n    description: \"Boosts tree growth speed by 25%.\",\n    price: 25,\n    category: \"boosters\",\n    itemType: \"tree_fertilizer\",\n    isAvailable: true\n  },\n  {\n    name: \"Golden Watering Can\",\n    description: \"Increases tree XP gains by 15%.\",\n    price: 100,\n    category: \"boosters\", \n    itemType: \"tree_fertilizer\",\n    isAvailable: true\n  }\n];\n\nexport async function seedStore() {\n  console.log('Seeding store items...');\n  \n  for (const item of seedStoreItems) {\n    // Check if item already exists\n    const existing = await db\n      .select()\n      .from(storeItems)\n      .where(eq(storeItems.name, item.name));\n      \n    if (existing.length === 0) {\n      await db.insert(storeItems).values(item);\n      console.log(`Added store item: ${item.name}`);\n    } else {\n      console.log(`Store item already exists: ${item.name}`);\n    }\n  }\n  \n  console.log('Store seeding completed!');\n}","size_bytes":2646},"server/storage.ts":{"content":"import {\n  users,\n  gameProgress,\n  achievements,\n  userAchievements,\n  journalEntries,\n  skillProgress,\n  userTrees,\n  coinTransactions,\n  storeItems,\n  userInventory,\n  type User,\n  type UpsertUser,\n  type GameProgress,\n  type InsertGameProgress,\n  type Achievement,\n  type InsertAchievement,\n  type UserAchievement,\n  type InsertUserAchievement,\n  type JournalEntry,\n  type InsertJournalEntry,\n  type SkillProgress,\n  type InsertSkillProgress,\n  type UserTree,\n  type InsertUserTree,\n  type CoinTransaction,\n  type InsertCoinTransaction,\n  type StoreItem,\n  type InsertStoreItem,\n  type UserInventory,\n  type InsertUserInventory,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: UpsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserXP(userId: string, xpGain: number): Promise<User>;\n  updateUserStreak(userId: string): Promise<void>;\n  updateUserCoins(userId: string, coinChange: number): Promise<void>;\n  \n  // Game progress operations\n  addGameProgress(progress: InsertGameProgress): Promise<GameProgress>;\n  getUserGameProgress(userId: string, gameType?: string): Promise<GameProgress[]>;\n  getUserBestScores(userId: string): Promise<{ gameType: string; bestScore: number }[]>;\n  \n  // Achievement operations\n  getAchievements(): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n  getUserAchievements(userId: string): Promise<UserAchievement[]>;\n  unlockAchievement(userId: string, achievementId: number): Promise<void>;\n  checkAndUnlockAchievements(userId: string): Promise<UserAchievement[]>;\n  \n  // Journal operations\n  addJournalEntry(entry: InsertJournalEntry): Promise<JournalEntry>;\n  getUserJournalEntries(userId: string, limit?: number): Promise<JournalEntry[]>;\n  \n  // Skill progress operations\n  updateSkillProgress(userId: string, skillType: string, level: number): Promise<void>;\n  getUserSkillProgress(userId: string): Promise<SkillProgress[]>;\n\n  // Tree operations\n  plantTree(tree: InsertUserTree): Promise<UserTree>;\n  getUserTrees(userId: string): Promise<UserTree[]>;\n  waterTree(treeId: number): Promise<void>;\n  growTree(treeId: number, xpToContribute: number): Promise<{ tree: UserTree, previousStage: number }>;\n  \n  // Coin transaction operations\n  addCoinTransaction(transaction: InsertCoinTransaction): Promise<CoinTransaction>;\n  getUserCoinTransactions(userId: string, limit?: number): Promise<CoinTransaction[]>;\n  \n  // Store operations\n  getStoreItems(category?: string): Promise<StoreItem[]>;\n  createStoreItem(item: InsertStoreItem): Promise<StoreItem>;\n  purchaseItem(userId: string, itemId: number, quantity?: number): Promise<void>;\n  getUserInventory(userId: string): Promise<UserInventory[]>;\n  useInventoryItem(userId: string, storeItemId: number, quantity: number): Promise<void>;\n  \n  // Decoration operations  \n  addDecorationToTree(treeId: number, decorationType: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserXP(userId: string, xpGain: number): Promise<User> {\n    const user = await this.getUser(userId);\n    if (!user) throw new Error('User not found');\n\n    let newXP = (user.xp || 0) + xpGain;\n    let newLevel: number;\n    \n    if (newXP < 2000) {\n      // Levels 1-9: Every 200 XP\n      newLevel = Math.floor(newXP / 200) + 1;\n      newLevel = Math.min(newLevel, 10); // Cap at level 10 until 2000 XP\n    } else if (newXP >= 2000 && (user.level || 1) < 10) {\n      // Player reaches level 10 for the first time at exactly 2000 XP\n      newLevel = 10;\n    } else if (newXP >= 2000) {\n      // After level 10, continue leveling with 300 XP per level\n      const excessXP = newXP - 2000;\n      newLevel = 11 + Math.floor(excessXP / 300);\n    } else {\n      newLevel = user.level || 1;\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        xp: newXP,\n        level: newLevel,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n      \n    return updatedUser;\n  }\n\n  async updateUserStreak(userId: string): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) return;\n\n    const today = new Date();\n    const lastLogin = user.lastLoginDate;\n    let newStreak = 1;\n\n    if (lastLogin) {\n      const daysDiff = Math.floor((today.getTime() - lastLogin.getTime()) / (1000 * 60 * 60 * 24));\n      if (daysDiff === 1) {\n        newStreak = (user.streak || 0) + 1;\n      } else if (daysDiff === 0) {\n        newStreak = user.streak || 0; // Same day, no change\n      }\n    }\n\n    await db\n      .update(users)\n      .set({\n        streak: newStreak,\n        lastLoginDate: today,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Game progress operations\n  async addGameProgress(progress: InsertGameProgress): Promise<GameProgress> {\n    const [newProgress] = await db\n      .insert(gameProgress)\n      .values(progress)\n      .returning();\n    return newProgress;\n  }\n\n  async getUserGameProgress(userId: string, gameType?: string): Promise<GameProgress[]> {\n    let query = db\n      .select()\n      .from(gameProgress)\n      .where(eq(gameProgress.userId, userId))\n      .orderBy(desc(gameProgress.completedAt));\n\n    if (gameType) {\n      query = db\n        .select()\n        .from(gameProgress)\n        .where(and(eq(gameProgress.userId, userId), eq(gameProgress.gameType, gameType)))\n        .orderBy(desc(gameProgress.completedAt));\n    }\n\n    return query;\n  }\n\n  async getUserBestScores(userId: string): Promise<{ gameType: string; bestScore: number }[]> {\n    const results = await db\n      .select({\n        gameType: gameProgress.gameType,\n        bestScore: sql<number>`max(${gameProgress.score})`,\n      })\n      .from(gameProgress)\n      .where(eq(gameProgress.userId, userId))\n      .groupBy(gameProgress.gameType);\n\n    return results;\n  }\n\n  // Achievement operations\n  async getAchievements(): Promise<Achievement[]> {\n    return db.select().from(achievements);\n  }\n\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    const [newAchievement] = await db\n      .insert(achievements)\n      .values(achievement)\n      .returning();\n    return newAchievement;\n  }\n\n  async getUserAchievements(userId: string): Promise<UserAchievement[]> {\n    return db\n      .select()\n      .from(userAchievements)\n      .where(eq(userAchievements.userId, userId))\n      .orderBy(desc(userAchievements.unlockedAt));\n  }\n\n  async unlockAchievement(userId: string, achievementId: number): Promise<void> {\n    await db\n      .insert(userAchievements)\n      .values({\n        userId,\n        achievementId,\n      })\n      .onConflictDoNothing();\n  }\n\n  async checkAndUnlockAchievements(userId: string): Promise<UserAchievement[]> {\n    const user = await this.getUser(userId);\n    if (!user) return [];\n\n    const allAchievements = await this.getAchievements();\n    const userAchievementsData = await this.getUserAchievements(userId);\n    const unlockedIds = userAchievementsData.map(ua => ua.achievementId);\n\n    const newlyUnlocked: UserAchievement[] = [];\n\n    for (const achievement of allAchievements) {\n      if (unlockedIds.includes(achievement.id)) continue;\n\n      const requirement = achievement.requirement as any;\n      let shouldUnlock = false;\n\n      switch (requirement.type) {\n        case 'xp':\n          shouldUnlock = (user.xp || 0) >= requirement.value;\n          break;\n        case 'streak':\n          shouldUnlock = (user.streak || 0) >= requirement.value;\n          break;\n        case 'game_count':\n          if (requirement.game) {\n            const games = await this.getUserGameProgress(userId, requirement.game);\n            shouldUnlock = games.length >= requirement.value;\n          }\n          break;\n        case 'journal_count':\n          const journalEntries = await this.getUserJournalEntries(userId, 100);\n          shouldUnlock = journalEntries.length >= requirement.value;\n          break;\n        case 'games_played':\n          const allGames = await this.getUserGameProgress(userId);\n          const uniqueGames = new Set(allGames.map(g => g.gameType));\n          shouldUnlock = uniqueGames.size >= requirement.value;\n          break;\n        case 'trees_planted':\n          const userTrees = await this.getUserTrees(userId);\n          shouldUnlock = userTrees.length >= requirement.count;\n          break;\n        case 'trees_watered':\n          // Count watering events from coin transactions\n          const waterTransactions = await db\n            .select()\n            .from(coinTransactions)\n            .where(and(\n              eq(coinTransactions.userId, userId),\n              eq(coinTransactions.transactionType, 'tree_watered')\n            ));\n          shouldUnlock = waterTransactions.length >= requirement.count;\n          break;\n        case 'trees_grown':\n          // Count growth events from coin transactions\n          const growthTransactions = await db\n            .select()\n            .from(coinTransactions)\n            .where(and(\n              eq(coinTransactions.userId, userId),\n              eq(coinTransactions.transactionType, 'tree_growth')\n            ));\n          shouldUnlock = growthTransactions.length >= requirement.count;\n          break;\n        case 'coins_earned':\n          const earnedTransactions = await db\n            .select()\n            .from(coinTransactions)\n            .where(and(\n              eq(coinTransactions.userId, userId),\n              sql`amount > 0`\n            ));\n          const totalEarned = earnedTransactions.reduce((sum, t) => sum + t.amount, 0);\n          shouldUnlock = totalEarned >= requirement.count;\n          break;\n        case 'coins_spent':\n          const spentTransactions = await db\n            .select()\n            .from(coinTransactions)\n            .where(and(\n              eq(coinTransactions.userId, userId),\n              sql`amount < 0`\n            ));\n          const totalSpent = Math.abs(spentTransactions.reduce((sum, t) => sum + t.amount, 0));\n          shouldUnlock = totalSpent >= requirement.count;\n          break;\n      }\n\n      if (shouldUnlock) {\n        await this.unlockAchievement(userId, achievement.id);\n        if (achievement.xpReward > 0) {\n          await this.updateUserXP(userId, achievement.xpReward);\n        }\n        // Award 20 coins for each achievement\n        await this.updateUserCoins(userId, 20);\n        await this.addCoinTransaction({\n          userId,\n          amount: 20,\n          transactionType: 'achievement_reward',\n          description: `Achievement unlocked: ${achievement.name}`\n        });\n        \n        const [newAchievement] = await db\n          .select()\n          .from(userAchievements)\n          .where(and(\n            eq(userAchievements.userId, userId),\n            eq(userAchievements.achievementId, achievement.id)\n          ));\n        if (newAchievement) {\n          newlyUnlocked.push(newAchievement);\n        }\n      }\n    }\n\n    return newlyUnlocked;\n  }\n\n  // Journal operations\n  async addJournalEntry(entry: InsertJournalEntry): Promise<JournalEntry> {\n    const [newEntry] = await db\n      .insert(journalEntries)\n      .values(entry)\n      .returning();\n    return newEntry;\n  }\n\n  async getUserJournalEntries(userId: string, limit = 10): Promise<JournalEntry[]> {\n    return db\n      .select()\n      .from(journalEntries)\n      .where(eq(journalEntries.userId, userId))\n      .orderBy(desc(journalEntries.createdAt))\n      .limit(limit);\n  }\n\n  // Skill progress operations\n  async updateSkillProgress(userId: string, skillType: string, level: number): Promise<void> {\n    await db\n      .insert(skillProgress)\n      .values({\n        userId,\n        skillType,\n        level,\n      })\n      .onConflictDoUpdate({\n        target: [skillProgress.userId, skillProgress.skillType],\n        set: {\n          level,\n          updatedAt: new Date(),\n        },\n      });\n  }\n\n  async getUserSkillProgress(userId: string): Promise<SkillProgress[]> {\n    return db\n      .select()\n      .from(skillProgress)\n      .where(eq(skillProgress.userId, userId));\n  }\n\n  // Coin operations\n  async updateUserCoins(userId: string, coinChange: number): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) return;\n\n    const newCoins = Math.max(0, (user.coins || 0) + coinChange);\n    \n    await db\n      .update(users)\n      .set({\n        coins: newCoins,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async addCoinTransaction(transaction: InsertCoinTransaction): Promise<CoinTransaction> {\n    // Add transaction record\n    const [newTransaction] = await db\n      .insert(coinTransactions)\n      .values(transaction)\n      .returning();\n\n    // Update user's coin balance\n    await this.updateUserCoins(transaction.userId, transaction.amount);\n\n    return newTransaction;\n  }\n\n  async getUserCoinTransactions(userId: string, limit = 20): Promise<CoinTransaction[]> {\n    return db\n      .select()\n      .from(coinTransactions)\n      .where(eq(coinTransactions.userId, userId))\n      .orderBy(desc(coinTransactions.createdAt))\n      .limit(limit);\n  }\n\n  // Tree operations\n  async plantTree(tree: InsertUserTree): Promise<UserTree> {\n    const [newTree] = await db\n      .insert(userTrees)\n      .values(tree)\n      .returning();\n\n    // Update user's total trees planted\n    const user = await this.getUser(tree.userId);\n    if (user) {\n      await db\n        .update(users)\n        .set({\n          totalTreesPlanted: (user.totalTreesPlanted || 0) + 1,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, tree.userId));\n    }\n\n    return newTree;\n  }\n\n  async getUserTrees(userId: string): Promise<UserTree[]> {\n    return db\n      .select()\n      .from(userTrees)\n      .where(eq(userTrees.userId, userId))\n      .orderBy(desc(userTrees.plantedAt));\n  }\n\n  async waterTree(treeId: number): Promise<void> {\n    await db\n      .update(userTrees)\n      .set({\n        lastWatered: new Date(),\n      })\n      .where(eq(userTrees.id, treeId));\n  }\n\n  async growTree(treeId: number, xpToContribute: number): Promise<{ tree: UserTree, previousStage: number }> {\n    const [tree] = await db\n      .select()\n      .from(userTrees)\n      .where(eq(userTrees.id, treeId));\n\n    if (!tree) {\n      throw new Error('Tree not found');\n    }\n\n    const currentXpContributed = tree.xpContributed ?? 0;\n    const currentGrowthStage = tree.growthStage ?? 1;\n    const newXpContributed = currentXpContributed + xpToContribute;\n    let newGrowthStage = currentGrowthStage;\n\n    // Growth stages based on XP contributed\n    if (newXpContributed >= 500 && newGrowthStage < 5) {\n      newGrowthStage = 5; // Mature tree\n    } else if (newXpContributed >= 300 && newGrowthStage < 4) {\n      newGrowthStage = 4; // Full tree\n    } else if (newXpContributed >= 150 && newGrowthStage < 3) {\n      newGrowthStage = 3; // Sapling\n    } else if (newXpContributed >= 50 && newGrowthStage < 2) {\n      newGrowthStage = 2; // Sprout\n    }\n\n    const [updatedTree] = await db\n      .update(userTrees)\n      .set({\n        xpContributed: newXpContributed,\n        growthStage: newGrowthStage,\n      })\n      .where(eq(userTrees.id, treeId))\n      .returning();\n\n    if (!updatedTree) {\n      throw new Error('Failed to update tree');\n    }\n\n    return { \n      tree: updatedTree, \n      previousStage: currentGrowthStage \n    };\n  }\n\n  async decorateTree(treeId: number, decorationType: string): Promise<void> {\n    const currentDecorations = await db\n      .select()\n      .from(userTrees)\n      .where(eq(userTrees.id, treeId));\n\n    if (currentDecorations.length > 0) {\n      const tree = currentDecorations[0];\n      const existingDecorations = Array.isArray(tree.decorations) ? tree.decorations : [];\n      \n      // Handle special gnome decorations with multiple colors\n      if (decorationType === 'gnome') {\n        // Get current gnome count\n        const currentGnomes = existingDecorations.filter(d => \n          typeof d === 'string' && (d === 'gnome' || d.startsWith('gnome_'))\n        );\n        \n        // Limit to 4 gnomes maximum\n        if (currentGnomes.length >= 4) {\n          return; // Maximum gnomes reached\n        }\n        \n        // Add new gnome with random color and alternating position\n        const colors = ['green', 'blue', 'pink', 'red', 'purple', 'orange'];\n        const positions = ['left', 'right'];\n        const gnomeId = currentGnomes.length + 1;\n        const color = colors[Math.floor(Math.random() * colors.length)];\n        const position = positions[gnomeId % 2]; // Alternate left/right\n        \n        const newGnome = `gnome_${gnomeId}_${color}_${position}`;\n        \n        await db\n          .update(userTrees)\n          .set({\n            decorations: [...existingDecorations, newGnome],\n          })\n          .where(eq(userTrees.id, treeId));\n      } else {\n        // Regular decoration handling\n        if (!existingDecorations.includes(decorationType)) {\n          await db\n            .update(userTrees)\n            .set({\n              decorations: [...existingDecorations, decorationType],\n            })\n            .where(eq(userTrees.id, treeId));\n        }\n      }\n    }\n  }\n\n  // Store operations\n  async getStoreItems(category?: string): Promise<StoreItem[]> {\n    let query = db.select().from(storeItems).where(eq(storeItems.isAvailable, true));\n    \n    if (category) {\n      query = db\n        .select()\n        .from(storeItems)\n        .where(and(eq(storeItems.isAvailable, true), eq(storeItems.category, category)));\n    }\n\n    return query;\n  }\n\n  async createStoreItem(item: InsertStoreItem): Promise<StoreItem> {\n    const [newItem] = await db\n      .insert(storeItems)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n  async purchaseItem(userId: string, itemId: number, quantity = 1): Promise<void> {\n    const [storeItem] = await db\n      .select()\n      .from(storeItems)\n      .where(eq(storeItems.id, itemId));\n\n    if (!storeItem || !storeItem.isAvailable) {\n      throw new Error('Item not available');\n    }\n\n    const totalCost = storeItem.price * quantity;\n    const user = await this.getUser(userId);\n    \n    if (!user || (user.coins || 0) < totalCost) {\n      throw new Error('Insufficient coins');\n    }\n\n    // Deduct coins first\n    await db\n      .update(users)\n      .set({\n        coins: (user.coins || 0) - totalCost,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n\n    // Check if user already has this item in inventory\n    const [existingItem] = await db\n      .select()\n      .from(userInventory)\n      .where(and(eq(userInventory.userId, userId), eq(userInventory.storeItemId, itemId)));\n\n    if (existingItem) {\n      // Update existing quantity\n      await db\n        .update(userInventory)\n        .set({\n          quantity: (existingItem.quantity || 0) + quantity,\n        })\n        .where(and(eq(userInventory.userId, userId), eq(userInventory.storeItemId, itemId)));\n    } else {\n      // Add new inventory item\n      await db\n        .insert(userInventory)\n        .values({\n          userId,\n          storeItemId: itemId,\n          quantity,\n        });\n    }\n\n    // Create coin transaction record only (don't double-deduct coins)\n    await db\n      .insert(coinTransactions)\n      .values({\n        userId,\n        amount: -totalCost,\n        transactionType: 'purchase',\n        description: `Purchased ${quantity}x ${storeItem.name}`,\n      });\n  }\n\n  async getUserInventory(userId: string): Promise<UserInventory[]> {\n    return db\n      .select()\n      .from(userInventory)\n      .where(eq(userInventory.userId, userId))\n      .orderBy(desc(userInventory.purchasedAt));\n  }\n\n  async useInventoryItem(userId: string, itemId: number, quantity: number): Promise<void> {\n    const [inventoryItem] = await db\n      .select()\n      .from(userInventory)\n      .where(and(eq(userInventory.userId, userId), eq(userInventory.storeItemId, itemId)));\n\n    if (!inventoryItem || (inventoryItem.quantity || 0) < quantity) {\n      throw new Error('Insufficient items in inventory');\n    }\n\n    if ((inventoryItem.quantity || 0) === quantity) {\n      // Remove the entire entry if using all items\n      await db\n        .delete(userInventory)\n        .where(and(eq(userInventory.userId, userId), eq(userInventory.storeItemId, itemId)));\n    } else {\n      // Decrease quantity\n      await db\n        .update(userInventory)\n        .set({\n          quantity: (inventoryItem.quantity || 0) - quantity,\n        })\n        .where(and(eq(userInventory.userId, userId), eq(userInventory.storeItemId, itemId)));\n    }\n  }\n\n  async addDecorationToTree(treeId: number, decorationType: string): Promise<void> {\n    const [tree] = await db\n      .select()\n      .from(userTrees)\n      .where(eq(userTrees.id, treeId));\n\n    if (!tree) {\n      throw new Error('Tree not found');\n    }\n\n    const currentDecorations = (tree.decorations as any[]) || [];\n    const updatedDecorations = [...currentDecorations, { \n      type: decorationType, \n      addedAt: new Date().toISOString() \n    }];\n\n    await db\n      .update(userTrees)\n      .set({ decorations: updatedDecorations })\n      .where(eq(userTrees.id, treeId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":22585},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  integer,\n  boolean,\n  real,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  username: varchar(\"username\").unique().notNull(),\n  password: text(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  xp: integer(\"xp\").default(0),\n  level: integer(\"level\").default(1),\n  streak: integer(\"streak\").default(0),\n  coins: integer(\"coins\").default(0),\n  totalTreesPlanted: integer(\"total_trees_planted\").default(0),\n  lastLoginDate: timestamp(\"last_login_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Game progress tracking\nexport const gameProgress = pgTable(\"game_progress\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  gameType: varchar(\"game_type\").notNull(), // 'color-echo', 'shape-sequence', etc.\n  score: real(\"score\").notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n  difficulty: varchar(\"difficulty\").default(\"normal\"),\n  timeTaken: real(\"time_taken\").notNull(), // in seconds\n});\n\n// Achievements\nexport const achievements = pgTable(\"achievements\", {\n  id: serial(\"id\").primaryKey(),\n  key: varchar(\"key\").notNull().unique(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  xpReward: integer(\"xp_reward\").notNull(),\n  iconType: varchar(\"icon_type\").notNull(),\n  requirement: jsonb(\"requirement\").notNull(), // criteria for unlocking\n});\n\n// User achievements (junction table)\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  achievementId: integer(\"achievement_id\").references(() => achievements.id).notNull(),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\n// Journal entries\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  focusLevel: integer(\"focus_level\").notNull(), // 1-10\n  energyLevel: varchar(\"energy_level\").notNull(), // 'low', 'medium', 'high'\n  reflection: text(\"reflection\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Skill progress tracking\nexport const skillProgress = pgTable(\"skill_progress\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  skillType: varchar(\"skill_type\").notNull(), // 'memory', 'attention', 'speed', 'pattern'\n  level: real(\"level\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User's planted trees for growth mechanics\nexport const userTrees = pgTable(\"user_trees\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  treeType: varchar(\"tree_type\").notNull(), // 'oak', 'cherry', 'willow', 'rainbow'\n  growthStage: integer(\"growth_stage\").default(1), // 1=seed, 2=sprout, 3=sapling, 4=tree, 5=mature\n  xpContributed: integer(\"xp_contributed\").default(0), // XP invested in this tree\n  plantedAt: timestamp(\"planted_at\").defaultNow(),\n  lastWatered: timestamp(\"last_watered\"),\n  isSpecial: boolean(\"is_special\").default(false),\n  decorations: jsonb(\"decorations\").default([]), // Array of applied decorations\n});\n\n// Coin transaction history\nexport const coinTransactions = pgTable(\"coin_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  amount: integer(\"amount\").notNull(), // positive for earned, negative for spent\n  transactionType: varchar(\"transaction_type\").notNull(), // 'game_reward', 'achievement', 'purchase'\n  description: varchar(\"description\").notNull(),\n  gameType: varchar(\"game_type\"), // null for non-game transactions\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Store items that can be purchased with coins\nexport const storeItems = pgTable(\"store_items\", {\n  id: serial(\"id\").primaryKey(),\n  itemType: varchar(\"item_type\").notNull(), // 'tree_seed', 'tree_fertilizer', 'decorations'\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: integer(\"price\").notNull(),\n  category: varchar(\"category\").notNull(),\n  isAvailable: boolean(\"is_available\").default(true),\n});\n\n// User's purchased items\nexport const userInventory = pgTable(\"user_inventory\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  storeItemId: integer(\"store_item_id\").references(() => storeItems.id).notNull(),\n  quantity: integer(\"quantity\").default(1),\n  purchasedAt: timestamp(\"purchased_at\").defaultNow(),\n});\n\n// Type exports\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type GameProgress = typeof gameProgress.$inferSelect;\nexport type InsertGameProgress = typeof gameProgress.$inferInsert;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertAchievement = typeof achievements.$inferInsert;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type InsertUserAchievement = typeof userAchievements.$inferInsert;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertJournalEntry = typeof journalEntries.$inferInsert;\nexport type SkillProgress = typeof skillProgress.$inferSelect;\nexport type InsertSkillProgress = typeof skillProgress.$inferInsert;\nexport type UserTree = typeof userTrees.$inferSelect;\nexport type InsertUserTree = typeof userTrees.$inferInsert;\nexport type CoinTransaction = typeof coinTransactions.$inferSelect;\nexport type InsertCoinTransaction = typeof coinTransactions.$inferInsert;\nexport type StoreItem = typeof storeItems.$inferSelect;\nexport type InsertStoreItem = typeof storeItems.$inferInsert;\nexport type UserInventory = typeof userInventory.$inferSelect;\nexport type InsertUserInventory = typeof userInventory.$inferInsert;\n\n// Zod schemas\nexport const insertGameProgressSchema = createInsertSchema(gameProgress);\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries);\nexport const insertSkillProgressSchema = createInsertSchema(skillProgress);\nexport const insertAchievementSchema = createInsertSchema(achievements);\nexport const insertUserTreeSchema = createInsertSchema(userTrees);\nexport const insertCoinTransactionSchema = createInsertSchema(coinTransactions);\nexport const insertStoreItemSchema = createInsertSchema(storeItems);\nexport const insertUserInventorySchema = createInsertSchema(userInventory);\n\n// Auth schemas\nexport const registerUserSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\").max(20, \"Username must be less than 20 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\nexport const loginUserSchema = z.object({\n  username: z.string(),\n  password: z.string(),\n});\n\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\n","size_bytes":7769},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Navigation } from \"@/components/Navigation\";\nimport Home from \"@/pages/Home\";\nimport Training from \"@/pages/Training\";\nimport ProgressPage from \"@/pages/Progress\";\nimport Achievements from \"@/pages/Achievements\";\nimport Journal from \"@/pages/Journal\";\nimport Store from \"@/pages/Store\";\nimport Garden from \"@/pages/Garden\";\nimport { SaveProgressModal } from \"@/components/SaveProgressModal\";\nimport { AuthProvider } from \"@/hooks/useStaticAuth\";\nimport { LocalStorageManager } from \"@/lib/localStorage\";\n\nfunction AppContent() {\n  const [activeTab, setActiveTab] = useState(\"home\");\n  const [showSaveModal, setShowSaveModal] = useState(false);\n\n  // Initialize local storage data\n  useEffect(() => {\n    LocalStorageManager.initializeData();\n  }, []);\n\n  // Listen for navigation events\n  useEffect(() => {\n    const handleNavigate = (event: any) => {\n      setActiveTab(event.detail);\n    };\n\n    window.addEventListener('navigate', handleNavigate);\n    return () => window.removeEventListener('navigate', handleNavigate);\n  }, []);\n\n  // Show save modal when user leaves the page or clicks save button\n  useEffect(() => {\n    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n      setShowSaveModal(true);\n      event.preventDefault();\n      event.returnValue = 'You have unsaved progress. Would you like to save your progress before leaving?';\n    };\n\n    const handleShowSaveModal = () => {\n      setShowSaveModal(true);\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    window.addEventListener('showSaveModal', handleShowSaveModal);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      window.removeEventListener('showSaveModal', handleShowSaveModal);\n    };\n  }, []);\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"home\":\n        return <Home />;\n      case \"training\":\n        return <Training />;\n      case \"progress\":\n        return <ProgressPage />;\n      case \"achievements\":\n        return <Achievements />;\n      case \"journal\":\n        return <Journal />;\n      case \"store\":\n        return <Store />;\n      case \"garden\":\n        return <Garden />;\n      default:\n        return <Home />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-light-gray to-white\">\n      <Navigation activeTab={activeTab} onTabChange={setActiveTab} />\n      <main>\n        {renderContent()}\n      </main>\n      <SaveProgressModal \n        isOpen={showSaveModal} \n        onClose={() => setShowSaveModal(false)} \n      />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <TooltipProvider>\n        <Toaster />\n        <AppContent />\n      </TooltipProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2916},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Open+Sans:wght@300;400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(218, 23%, 97%);\n  --foreground: hsl(207, 13%, 12%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(207, 6%, 44%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(207, 13%, 12%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(207, 13%, 12%);\n  --border: hsl(207, 13%, 89%);\n  --input: hsl(207, 13%, 89%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(207, 13%, 12%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(207, 13%, 12%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --ring: hsl(207, 13%, 12%);\n  --radius: 0.5rem;\n  \n  /* Custom Stimuli colors */\n  --navy: hsl(207, 100%, 18%);\n  --cyan: hsl(182, 100%, 38%);\n  --light-gray: hsl(210, 20%, 98%);\n}\n\n.dark {\n  --background: hsl(210, 11%, 7%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(210, 11%, 15%);\n  --muted-foreground: hsl(210, 5%, 65%);\n  --popover: hsl(210, 11%, 7%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(210, 11%, 7%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(210, 11%, 15%);\n  --input: hsl(210, 11%, 15%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(210, 11%, 15%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(210, 11%, 15%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(210, 5%, 84%);\n  \n  /* Custom Stimuli colors for dark mode */\n  --navy: hsl(207, 90%, 54%);\n  --cyan: hsl(182, 100%, 38%);\n  --light-gray: hsl(210, 11%, 7%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Open Sans', sans-serif;\n  }\n\n  .font-inter {\n    font-family: 'Inter', sans-serif;\n  }\n\n  .text-navy {\n    color: hsl(207, 100%, 18%);\n  }\n\n  .bg-navy {\n    background-color: hsl(207, 100%, 18%);\n  }\n\n  .text-cyan {\n    color: hsl(182, 100%, 38%);\n  }\n\n  .bg-cyan {\n    background-color: hsl(182, 100%, 38%);\n  }\n\n  .bg-light-gray {\n    background-color: hsl(210, 20%, 98%);\n  }\n\n  .border-navy {\n    border-color: hsl(207, 100%, 18%);\n  }\n\n  .border-cyan {\n    border-color: hsl(182, 100%, 38%);\n  }\n\n  .from-navy {\n    --tw-gradient-from: hsl(207, 100%, 18%);\n  }\n\n  .to-cyan {\n    --tw-gradient-to: hsl(182, 100%, 38%);\n  }\n\n  .dark .text-navy {\n    color: hsl(207, 90%, 54%);\n  }\n\n  .dark .bg-navy {\n    background-color: hsl(207, 90%, 54%);\n  }\n\n  .dark .bg-light-gray {\n    background-color: hsl(210, 11%, 7%);\n  }\n\n  .dark .border-navy {\n    border-color: hsl(207, 90%, 54%);\n  }\n\n  .dark .from-navy {\n    --tw-gradient-from: hsl(207, 90%, 54%);\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n\n  .animate-pulse-gentle {\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes slideUp {\n    0% {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n}\n","size_bytes":3564},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AchievementBadge.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Brain, Flame, Palette, Trophy, Lock, Rocket, TreePine } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface AchievementBadgeProps {\n  achievement: {\n    key: string;\n    name: string;\n    description: string;\n    xpReward: number;\n    iconType: string;\n  };\n  isUnlocked: boolean;\n  unlockedAt?: string;\n  progress?: string;\n}\n\nconst achievementIcons = {\n  brain: Brain,\n  flame: Flame,\n  palette: Palette,\n  trophy: Trophy,\n  rocket: Rocket,\n  tree: TreePine,\n};\n\nconst achievementColors = {\n  brain: \"from-cyan to-blue-500\",\n  flame: \"from-orange-500 to-red-500\", \n  palette: \"from-purple-500 to-pink-500\",\n  trophy: \"from-yellow-500 to-orange-500\",\n  rocket: \"from-green-500 to-teal-500\",\n  tree: \"from-emerald-500 to-green-600\",\n};\n\nexport function AchievementBadge({ \n  achievement, \n  isUnlocked, \n  unlockedAt, \n  progress \n}: AchievementBadgeProps) {\n  const IconComponent = achievementIcons[achievement.iconType as keyof typeof achievementIcons] || Trophy;\n  const colorClass = isUnlocked \n    ? achievementColors[achievement.iconType as keyof typeof achievementColors] || \"from-gray-500 to-gray-600\"\n    : \"from-gray-300 to-gray-400\";\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n      whileHover={{ scale: isUnlocked ? 1.02 : 1 }}\n    >\n      <Card className={`${isUnlocked ? 'border-2 border-cyan/20' : 'border-2 border-gray-200 opacity-75'}`}>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className={`w-12 h-12 bg-gradient-to-r ${colorClass} rounded-full flex items-center justify-center`}>\n              {isUnlocked ? (\n                <IconComponent className=\"text-white\" size={24} />\n              ) : (\n                <Lock className=\"text-white\" size={24} />\n              )}\n            </div>\n            <div>\n              <h3 className={`font-inter font-semibold ${isUnlocked ? 'text-navy' : 'text-gray-700'}`}>\n                {achievement.name}\n              </h3>\n              <p className={`text-sm ${isUnlocked ? 'text-cyan' : 'text-gray-500'}`}>\n                {isUnlocked ? 'Unlocked!' : 'Locked'}\n              </p>\n            </div>\n          </div>\n          \n          <p className={`mb-4 ${isUnlocked ? 'text-gray-600' : 'text-gray-500'}`}>\n            {achievement.description}\n          </p>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className={`text-sm ${isUnlocked ? 'text-gray-500' : 'text-gray-400'}`}>\n              {isUnlocked && unlockedAt ? (\n                `Earned: ${new Date(unlockedAt).toLocaleDateString()}`\n              ) : (\n                progress || \"Not started\"\n              )}\n            </span>\n            <span className={`text-sm font-medium ${isUnlocked ? 'text-cyan' : 'text-gray-400'}`}>\n              +{achievement.xpReward} XP\n            </span>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":3113},"client/src/components/CoinStore.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { useStaticStore, useStaticCoinTransactions } from '@/hooks/useStaticData';\nimport { useStaticAuth } from '@/hooks/useStaticAuth';\nimport { Coins, ShoppingCart, Package, TrendingUp, Sparkles } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { NotificationSystem, useNotifications } from '@/components/NotificationSystem';\n\nexport default function CoinStoreMain() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const { toast } = useToast();\n  const { user, refreshUser } = useStaticAuth();\n  const { storeItems, inventory, purchaseItem } = useStaticStore();\n  const { transactions } = useStaticCoinTransactions();\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const {\n    notifications,\n    removeNotification,\n    showCoinsSpent,\n    showGeneral,\n  } = useNotifications();\n\n  const categories = [\n    { id: 'all', name: 'All Items', icon: ShoppingCart },\n    { id: 'seeds', name: 'Tree Seeds', icon: Sparkles },\n    { id: 'boosters', name: 'Boosters', icon: TrendingUp },\n    { id: 'decorations', name: 'Decorations', icon: Package },\n  ];\n\n  const filteredItems = selectedCategory === 'all' \n    ? storeItems \n    : storeItems.filter(item => item.category === selectedCategory);\n\n  const getItemIcon = (itemType: string) => {\n    switch (itemType) {\n      case 'tree_seed': return '🌱';\n      case 'tree_fertilizer': return '💧';\n      case 'decoration': return '✨';\n      default: return '📦';\n    }\n  };\n\n  const getUserItemQuantity = (itemId: string) => {\n    const inventoryItem = inventory.find(inv => inv.storeItemId === itemId);\n    return inventoryItem?.quantity || 0;\n  };\n\n  const handlePurchase = async (itemId: string, quantity: number = 1) => {\n    if (!user) return;\n    \n    setIsLoading(true);\n    try {\n      purchaseItem(itemId, quantity);\n      \n      // Show animated coin spending notification\n      const item = storeItems.find(item => item.id === itemId);\n      if (item) {\n        showCoinsSpent(item.price, `${item.name} Purchased!`);\n      }\n      \n      showGeneral('🎉 Purchase successful! Item added to your inventory.', 'success');\n      refreshUser(); // Refresh user data to show updated coins\n    } catch (error: any) {\n      toast({ \n        title: 'Purchase failed', \n        description: error.message,\n        variant: 'destructive' \n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center py-8\">\n          <p className=\"text-gray-600\">Please log in to access the store.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <NotificationSystem\n        notifications={notifications}\n        onRemove={removeNotification}\n      />\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Coin Store</h1>\n          <p className=\"text-muted-foreground\">Spend your earned coins on seeds, boosters, and decorations</p>\n        </div>\n        <div className=\"flex items-center space-x-2 bg-gradient-to-r from-yellow-100 to-orange-100 dark:from-yellow-900/30 dark:to-orange-900/30 px-4 py-2 rounded-full\">\n          <Coins className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400\" />\n          <span className=\"font-semibold text-yellow-700 dark:text-yellow-300\">\n            {user.coins || 0} coins\n          </span>\n        </div>\n      </div>\n\n      <Tabs value={selectedCategory} onValueChange={setSelectedCategory}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          {categories.map((category) => {\n            const Icon = category.icon;\n            return (\n              <TabsTrigger key={category.id} value={category.id} className=\"flex items-center space-x-2\">\n                <Icon className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">{category.name}</span>\n              </TabsTrigger>\n            );\n          })}\n        </TabsList>\n\n        <TabsContent value={selectedCategory} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredItems.map((item) => {\n              const userQuantity = getUserItemQuantity(item.id);\n              const canAfford = (user.coins || 0) >= item.price;\n              \n              return (\n                <motion.div\n                  key={item.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <Card className=\"h-full flex flex-col\">\n                    <CardHeader className=\"flex-shrink-0\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-2xl\">{getItemIcon(item.itemType)}</div>\n                        <Badge variant={canAfford ? \"default\" : \"secondary\"}>\n                          <Coins className=\"h-3 w-3 mr-1\" />\n                          {item.price}\n                        </Badge>\n                      </div>\n                      <CardTitle className=\"text-lg\">{item.name}</CardTitle>\n                      <CardDescription className=\"text-sm flex-grow\">\n                        {item.description}\n                      </CardDescription>\n                    </CardHeader>\n                    \n                    <CardContent className=\"flex-grow flex flex-col justify-end pt-0\">\n                      <div className=\"space-y-3\">\n                        {userQuantity > 0 && (\n                          <div className=\"flex items-center justify-center\">\n                            <Badge variant=\"outline\" className=\"bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800\">\n                              <Package className=\"h-3 w-3 mr-1\" />\n                              Owned: {userQuantity}\n                            </Badge>\n                          </div>\n                        )}\n                        \n                        <Button\n                          onClick={() => handlePurchase(item.id)}\n                          disabled={!canAfford || isLoading}\n                          className=\"w-full\"\n                          variant={canAfford ? \"default\" : \"secondary\"}\n                        >\n                          {!canAfford ? \"Insufficient Coins\" : isLoading ? \"Purchasing...\" : \"Purchase\"}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Recent Transactions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            <span>Recent Transactions</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {transactions.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-4\">No transactions yet</p>\n          ) : (\n            <div className=\"space-y-2\">\n              {transactions.slice(0, 5).map((transaction) => (\n                <div key={transaction.id} className=\"flex items-center justify-between py-2 border-b last:border-b-0\">\n                  <div>\n                    <p className=\"text-sm font-medium\">{transaction.description}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(transaction.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className={`flex items-center space-x-1 ${\n                    transaction.amount > 0 ? 'text-green-600' : 'text-red-600'\n                  }`}>\n                    <Coins className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">\n                      {transaction.amount > 0 ? '+' : ''}{transaction.amount}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Export CoinStore function for backward compatibility  \nexport function CoinStore() {\n  return <CoinStoreMain />;\n}","size_bytes":8744},"client/src/components/EnhancedGrowthTree.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { useStaticAuth } from '@/hooks/useStaticAuth';\nimport { useStaticTrees, useStaticStore } from '@/hooks/useStaticData';\nimport { useToast } from '@/hooks/use-toast';\nimport { NotificationSystem, useNotifications } from '@/components/NotificationSystem';\nimport { UserTree, User, UserInventory, StoreItem } from '@shared/schema';\nimport { Coins, Sparkles, Droplet, TreePine, Plus, Package } from 'lucide-react';\nimport { TreeVisual3D } from './TreeVisual3D';\nimport { useLocation } from 'wouter';\nimport { PerfectCartoonTree } from './PerfectCartoonTree';\nimport { motion } from 'framer-motion';\n\ninterface TreeVisualProps {\n  tree: UserTree;\n  onWater: (treeId: number) => void;\n  onGrow: (treeId: number) => void;\n  onDecorate?: (treeId: number, decorationType: string) => void;\n}\n\nconst TreeVisual: React.FC<TreeVisualProps> = ({ tree, onWater, onGrow, onDecorate }) => {\n  const getGrowthLabel = (stage: number) => {\n    const labels = ['Seed', 'Sprout', 'Sapling', 'Tree', 'Mature'];\n    return labels[stage - 1] || 'Seed';\n  };\n\n  const getNextStageRequirement = (currentStage: number) => {\n    const requirements = [0, 50, 150, 300, 500];\n    return requirements[currentStage] || 500;\n  };\n\n  const nextReq = getNextStageRequirement(tree.growthStage || 1);\n  const currentXP = tree.xpContributed || 0;\n  const progressPercent = (tree.growthStage || 1) >= 5 ? 100 : (currentXP / nextReq) * 100;\n\n  return (\n    <Card className=\"h-full hover:shadow-xl transition-shadow duration-300\">\n      <CardHeader className=\"text-center pb-2\">\n        <CardTitle className=\"text-lg capitalize\">{tree.treeType} Tree</CardTitle>\n        <CardDescription>{getGrowthLabel(tree.growthStage || 1)}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex justify-center\">\n          <PerfectCartoonTree \n            type={tree.treeType} \n            stage={tree.growthStage || 1}\n            xpContributed={tree.xpContributed || 0}\n            decorations={Array.isArray(tree.decorations) ? tree.decorations.map((d: any) => typeof d === 'string' ? d : d?.type || d) : []}\n            className=\"hover:scale-105 transition-transform duration-300\"\n          />\n        </div>\n\n        <Badge variant={(tree.growthStage || 1) >= 5 ? \"default\" : \"secondary\"} className=\"w-full justify-center\">\n          Stage {tree.growthStage || 1}/5\n        </Badge>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>XP: {currentXP}</span>\n            <span>Next: {nextReq}</span>\n          </div>\n          <Progress value={progressPercent} className=\"h-3\" />\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={() => onWater(tree.id)}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1\"\n            data-testid={`button-water-${tree.id}`}\n          >\n            <Droplet className=\"h-4 w-4 mr-1\" />\n            Water\n          </Button>\n          <Button\n            onClick={() => onGrow(tree.id)}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1\"\n            data-testid={`button-grow-${tree.id}`}\n          >\n            <Sparkles className=\"h-4 w-4 mr-1\" />\n            Grow (10 XP)\n          </Button>\n        </div>\n        \n        {/* Decoration Buttons */}\n        <div>\n          {onDecorate && (\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => onDecorate(tree.id, 'fairy_lights')}\n                variant=\"secondary\"\n                size=\"sm\"\n                className=\"flex-1\"\n                data-testid={`button-lights-${tree.id}`}\n              >\n                ✨ Lights\n              </Button>\n              <Button\n                onClick={() => onDecorate(tree.id, 'gnome')}\n                variant=\"secondary\"\n                size=\"sm\"\n                className=\"flex-1\"\n                data-testid={`button-gnome-${tree.id}`}\n              >\n                🧙‍♂️ Add Gnome\n              </Button>\n            </div>\n          )}\n        </div>\n        \n        {/* Gnome Status Display */}\n        {tree.decorations && Array.isArray(tree.decorations) && tree.decorations.filter((d: any) => typeof d === 'string' && (d === 'gnome' || d.startsWith('gnome_'))).length > 0 && (\n          <div className=\"text-xs text-blue-600 bg-blue-50 rounded p-2\">\n            🧙‍♂️ {tree.decorations.filter((d: any) => typeof d === 'string' && (d === 'gnome' || d.startsWith('gnome_'))).length}/4 gnomes placed\n          </div>\n        )}\n\n        <div className=\"text-xs text-gray-500 space-y-1\">\n          <p>Planted: {tree.plantedAt ? new Date(tree.plantedAt).toLocaleDateString() : 'Unknown'}</p>\n          {tree.lastWatered && (\n            <p>Watered: {new Date(tree.lastWatered).toLocaleDateString()}</p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function EnhancedGrowthTree() {\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const {\n    notifications,\n    removeNotification,\n    showCoinsSpent,\n    showXPGain,\n  } = useNotifications();\n\n  // Use static data hooks\n  const { user, refreshUser } = useStaticAuth();\n  const { trees, plantTree, growTree } = useStaticTrees();\n  const { storeItems, inventory } = useStaticStore();\n  \n  const [isLoading, setIsLoading] = useState(false);\n\n  const seedItems = storeItems.filter(item => item.itemType === 'tree_seed');\n  const userSeeds = inventory.filter(item => \n    seedItems.some(seed => seed.id === item.storeItemId) && (item.quantity || 0) > 0\n  );\n\n  // Local action functions\n  const handlePlantTree = async ({ treeType, seedItemId }: { treeType: string; seedItemId?: number }) => {\n    try {\n      plantTree({ treeType });\n      toast({ title: 'Tree planted successfully!', description: 'Your tree is now growing in the garden!' });\n      refreshUser();\n    } catch (error: any) {\n      toast({ \n        title: 'Failed to plant tree', \n        description: error.message || 'Unknown error',\n        variant: 'destructive' \n      });\n    }\n  };\n\n  const handleWaterTree = async (treeId: string) => {\n    try {\n      // Watering functionality would need to be implemented in useStaticTrees\n      toast({ title: 'Tree watered!', description: 'Your tree feels refreshed.' });\n    } catch (error) {\n      console.error('Error watering tree:', error);\n    }\n  };\n\n  const handleGrowTree = async (treeId: string) => {\n    try {\n      const result = growTree(treeId, 10);\n      if (result) {\n        // Show animated notifications\n        showCoinsSpent(2, \"Tree Growth\");\n        setTimeout(() => showXPGain(10, \"Tree Contribution\"), 500);\n        \n        if (result.tree.growthStage > (result.previousStage || 1)) {\n          toast({ \n            title: '🎉 Tree advanced to next stage!', \n            description: `Your tree is now a ${result.tree.growthStage === 5 ? 'mature tree' : 'bigger tree'}!`\n          });\n        }\n        refreshUser();\n      }\n    } catch (error) {\n      console.error('Error growing tree:', error);\n    }\n  };\n\n  const handleDecorateTree = async ({ treeId, decorationType, storeItemId }: { treeId: string; decorationType: string; storeItemId: number }) => {\n    try {\n      // Decoration functionality would need to be implemented in useStaticTrees\n      const decorationName = decorationType === 'fairy_lights' ? 'Fairy Lights' : \n                             decorationType === 'gnome' ? 'Garden Gnome' : 'Decoration';\n      toast({ \n        title: `✨ ${decorationName} Added!`, \n        description: 'Your tree looks even more magical!' \n      });\n    } catch (error) {\n      console.error('Error decorating tree:', error);\n    }\n  };\n\n  const treeTypes = [\n    { type: 'oak', name: 'Oak', description: 'Strong and steady growth', emoji: '🌳' },\n    { type: 'cherry', name: 'Cherry Blossom', description: 'Beautiful pink blooms', emoji: '🌸' },\n    { type: 'willow', name: 'Willow', description: 'Graceful and calming', emoji: '🌾' },\n    { type: 'rainbow', name: 'Rainbow Tree', description: 'Magical and rare!', emoji: '🌈' },\n    { type: 'pine', name: 'Pine', description: 'Evergreen and resilient', emoji: '🌲' },\n    { type: 'maple', name: 'Maple', description: 'Autumn colors', emoji: '🍁' },\n    { type: 'birch', name: 'Birch', description: 'Elegant white bark', emoji: '🌳' },\n    { type: 'sakura', name: 'Sakura', description: 'Traditional cherry blossom', emoji: '🌸' },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-800 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-64 bg-gray-200 dark:bg-gray-800 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with coin balance */}\n      <div className=\"flex items-center justify-between bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-xl p-6 border border-green-200 dark:border-green-800\">\n        <div>\n          <h2 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">Growth Garden</h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">Nurture your trees with XP and watch them grow!</p>\n        </div>\n        <div className=\"flex items-center gap-2 text-lg font-semibold bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-900/30 dark:to-amber-900/30 px-4 py-2 rounded-lg border border-yellow-200 dark:border-yellow-700\">\n          <Coins className=\"h-5 w-5 text-yellow-500\" />\n          <span data-testid=\"text-coin-balance\" className=\"text-yellow-600 dark:text-yellow-400\">{user?.coins || 0}</span>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"garden\" className=\"space-y-4\">\n        <TabsList className=\"grid grid-cols-2 bg-gradient-to-r from-green-100 to-blue-100 dark:from-green-900/40 dark:to-blue-900/40 p-1 rounded-xl\">\n          <TabsTrigger \n            value=\"garden\" \n            data-testid=\"tab-garden\"\n            className=\"rounded-lg data-[state=active]:bg-white dark:data-[state=active]:bg-gray-800 data-[state=active]:shadow-md transition-all duration-200\"\n          >\n            🌳 My Garden\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"plant\" \n            data-testid=\"tab-plant\"\n            className=\"rounded-lg data-[state=active]:bg-white dark:data-[state=active]:bg-gray-800 data-[state=active]:shadow-md transition-all duration-200\"\n          >\n            🌱 Plant New Tree\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"garden\" className=\"space-y-4\">\n          {trees.length === 0 ? (\n            <Card className=\"text-center py-12 bg-gradient-to-br from-green-50 via-blue-50 to-purple-50 dark:from-green-900/20 dark:via-blue-900/20 dark:to-purple-900/20 border-2 border-dashed border-green-300 dark:border-green-700\">\n              <CardContent>\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ duration: 0.5, type: \"spring\" }}\n                >\n                  <TreePine className=\"h-16 w-16 mx-auto text-green-400 mb-4\" />\n                </motion.div>\n                <motion.h3 \n                  className=\"text-xl font-semibold mb-2 bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.2 }}\n                >\n                  No Trees Yet\n                </motion.h3>\n                <motion.p \n                  className=\"text-gray-600 dark:text-gray-400 mb-4\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.4 }}\n                >\n                  Plant your first tree to start your growth journey!\n                </motion.p>\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.6 }}\n                >\n                  <Button \n                    onClick={() => window.location.hash = '#plant'}\n                    className=\"bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white font-semibold px-6 py-3 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200\"\n                  >\n                    🌱 Plant Your First Tree\n                  </Button>\n                </motion.div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {trees.map((tree) => (\n                <TreeVisual\n                  key={tree.id}\n                  tree={tree}\n                  onWater={(treeId) => handleWaterTree(treeId.toString())}\n                  onGrow={(treeId) => handleGrowTree(treeId.toString())}\n                  onDecorate={(treeId, decorationType) => {\n                    // Find the decoration item in inventory\n                    const decorationName = decorationType === 'fairy_lights' ? 'Fairy Lights' : 'Garden Gnome';\n                    const decorationItem = inventory.find(item => {\n                      const storeItem = storeItems.find(si => si.id === item.storeItemId);\n                      return storeItem?.name === decorationName;\n                    });\n                    \n                    if (decorationItem) {\n                      handleDecorateTree({\n                        treeId: treeId.toString(),\n                        decorationType,\n                        storeItemId: decorationItem.storeItemId\n                      });\n                    } else {\n                      toast({ \n                        title: `No ${decorationName.toLowerCase()}`, \n                        description: `Buy ${decorationName.toLowerCase()} from the store first!`,\n                        variant: 'destructive'\n                      });\n                    }\n                  }}\n                />\n              ))}\n            </div>\n          )}\n\n          {trees.length > 0 && (\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold mb-4\">Garden Stats</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 p-4 rounded-lg border border-green-200 dark:border-green-800\">\n                  <div className=\"text-2xl font-bold text-green-600\">{trees.length}</div>\n                  <div className=\"text-sm text-green-600\">Trees Planted</div>\n                </div>\n                <div className=\"bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {trees.filter(t => (t.growthStage || 1) >= 5).length}\n                  </div>\n                  <div className=\"text-sm text-blue-600\">Mature Trees</div>\n                </div>\n                <div className=\"bg-gradient-to-br from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20 p-4 rounded-lg border border-purple-200 dark:border-purple-800\">\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {trees.reduce((sum, tree) => sum + (tree.xpContributed || 0), 0)}\n                  </div>\n                  <div className=\"text-sm text-purple-600\">Total XP</div>\n                </div>\n                <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {trees.filter(t => t.isSpecial).length}\n                  </div>\n                  <div className=\"text-sm text-yellow-600\">Special Trees</div>\n                </div>\n              </div>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"plant\" className=\"space-y-4\">\n          {userSeeds.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <Package className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No Seeds Available</h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  You need to buy seeds from the Store before you can plant trees!\n                </p>\n                <Button \n                  onClick={() => {\n                    console.log('Navigating to store...');\n                    navigate('/store');\n                  }}\n                  data-testid=\"button-goto-store\"\n                >\n                  Visit Store\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                <h3 className=\"font-semibold mb-2 flex items-center gap-2\">\n                  <Package className=\"h-4 w-4\" />\n                  Your Seeds\n                </h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-sm\">\n                  {userSeeds.map((seedInventory) => {\n                    const seedItem = seedItems.find(item => item.id === seedInventory.storeItemId);\n                    if (!seedItem) return null;\n                    \n                    return (\n                      <div key={seedInventory.id} className=\"bg-white dark:bg-gray-800 p-2 rounded text-center\">\n                        <div>{seedItem.name}</div>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {seedInventory.quantity} available\n                        </Badge>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {treeTypes.map((treeType) => {\n                  const seedItem = seedItems.find(item => \n                    item.name.toLowerCase().includes(treeType.type) ||\n                    item.description.toLowerCase().includes(treeType.type)\n                  );\n                  const userSeed = userSeeds.find(seed => seed.storeItemId === seedItem?.id);\n                  const canPlant = userSeed && (userSeed.quantity || 0) > 0;\n                  \n                  return (\n                    <Card \n                      key={treeType.type} \n                      className={`hover:shadow-lg transition-shadow ${canPlant ? 'border-green-200 dark:border-green-800' : 'opacity-60'}`}\n                    >\n                      <CardHeader className=\"text-center\">\n                        <PerfectCartoonTree type={treeType.type} stage={1} size=\"small\" className=\"mx-auto mb-2\" />\n                        <CardTitle>{treeType.name}</CardTitle>\n                        <CardDescription>{treeType.description}</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"text-center space-y-3\">\n                        {canPlant ? (\n                          <>\n                            <Badge variant=\"default\" className=\"mb-2\">\n                              {userSeed?.quantity} seeds available\n                            </Badge>\n                            <Button\n                              onClick={() => handlePlantTree({ \n                                treeType: treeType.type,\n                                seedItemId: seedItem?.id\n                              })}\n                              disabled={isLoading}\n                              className=\"w-full\"\n                              data-testid={`button-plant-${treeType.type}`}\n                            >\n                              <Plus className=\"h-4 w-4 mr-1\" />\n                              {isLoading ? 'Planting...' : 'Plant Tree'}\n                            </Button>\n                          </>\n                        ) : (\n                          <>\n                            <Badge variant=\"outline\" className=\"mb-2\">\n                              No seeds\n                            </Badge>\n                            <Button\n                              onClick={() => navigate('/store')}\n                              variant=\"outline\"\n                              className=\"w-full\"\n                              data-testid={`button-buy-seed-${treeType.type}`}\n                            >\n                              Buy {treeType.name} Seed\n                            </Button>\n                          </>\n                        )}\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n      \n      {/* Notification System */}\n      <NotificationSystem \n        notifications={notifications}\n        onRemove={removeNotification}\n      />\n    </div>\n  );\n}","size_bytes":22010},"client/src/components/GameCard.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Brain, Palette, Shapes, Eye, Type, Zap } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface GameCardProps {\n  gameType: string;\n  name: string;\n  description: string;\n  skillType: string;\n  bestScore?: number;\n  onPlay: () => void;\n}\n\nconst gameIcons = {\n  \"color-echo\": Palette,\n  \"shape-sequence\": Shapes,\n  \"spotlight\": Eye,\n  \"synesthetic-recall\": Type,\n  \"memory-matrix\": Brain,\n  \"quick-response\": Zap,\n};\n\nconst skillColors = {\n  \"Synesthetic Memory\": \"from-purple-500 to-pink-500\",\n  \"Pattern Recognition\": \"from-blue-500 to-cyan-500\",\n  \"Attention Training\": \"from-green-500 to-teal-500\",\n  \"Word-Color Memory\": \"from-orange-500 to-red-500\",\n  \"Working Memory\": \"from-indigo-500 to-purple-500\",\n  \"Processing Speed\": \"from-yellow-500 to-orange-500\",\n};\n\nexport function GameCard({ \n  gameType, \n  name, \n  description, \n  skillType, \n  bestScore, \n  onPlay \n}: GameCardProps) {\n  const IconComponent = gameIcons[gameType as keyof typeof gameIcons] || Brain;\n  const colorClass = skillColors[skillType as keyof typeof skillColors] || \"from-gray-500 to-gray-600\";\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      whileHover={{ scale: 1.02 }}\n      className=\"h-full\"\n    >\n      <Card className=\"h-full hover:shadow-md transition-shadow duration-300\">\n        <CardContent className=\"p-6 h-full flex flex-col\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className={`w-12 h-12 bg-gradient-to-r ${colorClass} rounded-xl flex items-center justify-center`}>\n              <IconComponent className=\"text-white\" size={24} />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-navy font-inter\">{name}</h3>\n              <p className=\"text-sm text-gray-500\">{skillType}</p>\n            </div>\n          </div>\n          \n          <p className=\"text-gray-600 mb-4 flex-grow\">{description}</p>\n          \n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-sm text-gray-500\">\n              {bestScore !== undefined ? (\n                <>Best Score: <span className=\"font-medium text-navy\">{bestScore}%</span></>\n              ) : (\n                \"Not played yet\"\n              )}\n            </span>\n            <span className=\"text-sm text-gray-500\">+10 XP</span>\n          </div>\n          \n          <Button \n            onClick={onPlay}\n            className=\"w-full bg-navy hover:bg-navy/90 text-white font-medium\"\n          >\n            Start Training\n          </Button>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":2794},"client/src/components/GrowthTree.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { PerfectCartoonTree } from \"./PerfectCartoonTree\";\n\ninterface GrowthTreeProps {\n  xp: number;\n  level: number;\n  achievements?: number;\n  className?: string;\n}\n\nexport const GrowthTree = ({ xp, level, achievements = 0, className = \"\" }: GrowthTreeProps) => {\n  \n  // Determine tree type based on level progression\n  const getTreeType = () => {\n    if (level >= 10) return 'rainbow';\n    if (level >= 7) return 'cherry';  \n    if (level >= 4) return 'willow';\n    return 'oak';\n  };\n\n  // Calculate growth stage based on level with special rules for levels 7+ \n  const getGrowthStage = () => {\n    if (level <= 2) return 1; // Seed stage\n    if (level <= 4) return 2; // Sprout stage\n    if (level <= 6) return 3; // Sapling stage\n    if (level <= 7) return 4; // Tree stage\n    if (level <= 9) return 4; // Level 8-9 looks like level 7 (Tree stage)\n    if (level >= 10) return 5; // Level 10+ is Mature stage\n    return Math.min(Math.max(Math.floor(level / 2) + 1, 1), 5);\n  };\n\n  const treeType = getTreeType();\n  const growthStage = getGrowthStage();\n\n  return (\n    <div className={`flex flex-col items-center ${className}`}>\n      {/* Large Growth Tree using the cute cartoon style */}\n      <div className=\"flex justify-center mb-4\">\n        <PerfectCartoonTree\n          type={treeType}\n          stage={growthStage}\n          xpContributed={xp}\n          size=\"large\"\n          className=\"hover:scale-105 transition-transform duration-300\"\n        />\n      </div>\n\n      {/* Level indicator */}\n      <motion.div\n        className=\"mb-4\"\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 1.5 }}\n      >\n        <div className=\"bg-white dark:bg-gray-800 rounded-full px-4 py-2 shadow-md border\">\n          <span className=\"text-lg font-semibold text-navy dark:text-cyan\">\n            Level {level}\n          </span>\n        </div>\n      </motion.div>\n\n      {/* Progress info */}\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex justify-between items-center gap-8 text-sm text-gray-600 dark:text-gray-400\">\n          <div className=\"text-center\">\n            <div className=\"font-semibold text-green-600\">{xp}</div>\n            <div>Total XP</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"font-semibold text-blue-600\">{growthStage}</div>\n            <div>Growth Stage</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"font-semibold text-purple-600\">{achievements}</div>\n            <div>Achievements</div>\n          </div>\n        </div>\n        \n        <div className=\"text-xs text-gray-500 mt-2\">\n          {growthStage === 1 && \"🌱 Your journey begins!\"}\n          {growthStage === 2 && \"🌿 Growing strong!\"}\n          {growthStage === 3 && \"🌳 Your mind is blooming!\"}\n          {growthStage === 4 && \"🏆 Impressive growth!\"}\n          {growthStage === 5 && \"👑 Neural mastery achieved!\"}\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":3073},"client/src/components/IsometricGrowthTree.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface IsometricGrowthTreeProps {\n  stage: number;\n  type?: string;\n  xpContributed: number;\n  className?: string;\n}\n\nexport const IsometricGrowthTree = ({ \n  stage, \n  type = 'oak', \n  xpContributed,\n  className = \"\" \n}: IsometricGrowthTreeProps) => {\n  \n  // Calculate tree size based on stage and XP contribution\n  const getTreeScale = () => {\n    const baseScale = 0.8 + (stage * 0.15);\n    const xpBonus = Math.min(xpContributed / 100, 0.3); // Max 30% bonus from XP\n    return baseScale + xpBonus;\n  };\n\n  const treeScale = getTreeScale();\n\n  return (\n    <div className={`relative flex items-end justify-center h-40 w-40 ${className}`}>\n      <motion.div\n        className=\"relative\"\n        initial={{ scale: 0.5, opacity: 0 }}\n        animate={{ scale: treeScale, opacity: 1 }}\n        transition={{ duration: 1, ease: \"backOut\" }}\n      >\n        {/* Ground Shadow */}\n        <div \n          className=\"absolute -bottom-2 left-1/2 transform -translate-x-1/2 bg-black opacity-15 rounded-full\"\n          style={{ \n            width: `${60 + (stage * 12)}px`, \n            height: `${20 + (stage * 3)}px`,\n            transform: `translateX(-50%) perspective(100px) rotateX(60deg)`\n          }}\n        />\n        \n        {/* Tree Trunk - 3D isometric like your reference */}\n        <motion.div\n          className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 z-10\"\n          style={{\n            width: `${16 + (stage * 3)}px`,\n            height: `${30 + (stage * 8)}px`,\n            background: `\n              linear-gradient(135deg, \n                #8B4513 0%, \n                #A0522D 25%, \n                #CD853F 50%, \n                #8B4513 75%, \n                #654321 100%\n              )\n            `,\n            clipPath: 'polygon(30% 0%, 70% 0%, 80% 100%, 20% 100%)',\n            filter: 'drop-shadow(3px 3px 8px rgba(0,0,0,0.4))',\n            borderRadius: '2px 2px 0 0'\n          }}\n          animate={{\n            scaleY: [1, 1.02, 1]\n          }}\n          transition={{ duration: 4, repeat: Infinity }}\n        />\n        \n        {/* Tree Crown - Chunky layered foliage exactly like reference image */}\n        \n        {/* Bottom layer - large bumpy foliage base */}\n        <motion.div\n          className=\"absolute left-1/2 transform -translate-x-1/2 z-20\"\n          style={{\n            bottom: `${12 + (stage * 3)}px`,\n            width: `${80 + (stage * 8)}px`,\n            height: `${50 + (stage * 6)}px`,\n            background: type === 'oak' \n              ? `linear-gradient(135deg, #4a7c4a 0%, #5d9c5d 40%, #6bb16b 100%)`\n              : type === 'cherry'\n              ? `linear-gradient(135deg, #8B4A6B 0%, #B56B8B 40%, #D48BAB 100%)`\n              : `linear-gradient(135deg, #4a7c4a 0%, #5d9c5d 40%, #6bb16b 100%)`,\n            clipPath: `polygon(\n              15% 100%, 25% 85%, 35% 90%, 45% 80%, 55% 85%, 65% 75%, \n              75% 80%, 85% 100%, 50% 0%\n            )`,\n            filter: 'drop-shadow(3px 3px 6px rgba(0,0,0,0.3))',\n          }}\n          animate={{\n            scale: [1, 1.01, 1]\n          }}\n          transition={{ duration: 5, repeat: Infinity }}\n        />\n        \n        {/* Middle layer - medium bumpy sections */}\n        <motion.div\n          className=\"absolute left-1/2 transform -translate-x-1/2 z-30\"\n          style={{\n            bottom: `${20 + (stage * 4)}px`,\n            width: `${65 + (stage * 7)}px`,\n            height: `${42 + (stage * 5)}px`,\n            background: type === 'oak'\n              ? `linear-gradient(135deg, #5d9c5d 0%, #7db87d 40%, #9dd19d 100%)`\n              : type === 'cherry'\n              ? `linear-gradient(135deg, #B56B8B 0%, #D48BAB 40%, #F3ABCB 100%)`\n              : `linear-gradient(135deg, #5d9c5d 0%, #7db87d 40%, #9dd19d 100%)`,\n            clipPath: `polygon(\n              20% 100%, 30% 80%, 40% 85%, 50% 75%, 60% 80%, 70% 70%, \n              80% 100%, 50% 0%\n            )`,\n            filter: 'drop-shadow(2px 2px 4px rgba(0,0,0,0.25))',\n          }}\n          animate={{\n            scale: [1, 1.008, 1]\n          }}\n          transition={{ duration: 4, repeat: Infinity }}\n        />\n        \n        {/* Top layer - small bright crown */}\n        <motion.div\n          className=\"absolute left-1/2 transform -translate-x-1/2 z-40\"\n          style={{\n            bottom: `${28 + (stage * 5)}px`,\n            width: `${50 + (stage * 6)}px`,\n            height: `${35 + (stage * 4)}px`,\n            background: type === 'oak'\n              ? `linear-gradient(135deg, #7db87d 0%, #9dd19d 40%, #bde8bd 100%)`\n              : type === 'cherry'\n              ? `linear-gradient(135deg, #D48BAB 0%, #F3ABCB 40%, #FFCBEB 100%)`\n              : `linear-gradient(135deg, #7db87d 0%, #9dd19d 40%, #bde8bd 100%)`,\n            clipPath: `polygon(\n              25% 100%, 35% 85%, 45% 90%, 55% 80%, 65% 85%, 75% 100%, \n              50% 0%\n            )`,\n            filter: 'drop-shadow(1px 1px 2px rgba(0,0,0,0.15))',\n          }}\n          animate={{\n            scale: [1, 1.005, 1]\n          }}\n          transition={{ duration: 3, repeat: Infinity }}\n        />\n        \n        {/* XP Growth Sparkles */}\n        {xpContributed > 0 && (\n          <motion.div\n            className=\"absolute top-2 right-2 text-yellow-400 text-xl z-50\"\n            animate={{ \n              rotate: [0, 15, -15, 0],\n              scale: [1, 1.3, 1],\n              opacity: [0.7, 1, 0.7]\n            }}\n            transition={{ duration: 2.5, repeat: Infinity }}\n          >\n            ✨\n          </motion.div>\n        )}\n        \n        {/* Maturity Crown */}\n        {stage >= 5 && (\n          <motion.div\n            className=\"absolute top-0 left-1/2 transform -translate-x-1/2 text-amber-300 text-2xl z-50\"\n            animate={{ \n              scale: [1, 1.4, 1],\n              opacity: [0.8, 1, 0.8],\n              rotate: [0, 360]\n            }}\n            transition={{ duration: 3, repeat: Infinity }}\n          >\n            🌟\n          </motion.div>\n        )}\n        \n        {/* High XP Glow Effect */}\n        {xpContributed > 50 && (\n          <motion.div\n            className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-5\"\n            style={{\n              width: `${80 + (stage * 15)}px`,\n              height: `${80 + (stage * 15)}px`,\n              background: `radial-gradient(circle, rgba(255,215,0,0.2) 0%, transparent 70%)`,\n              borderRadius: '50%'\n            }}\n            animate={{\n              scale: [1, 1.2, 1],\n              opacity: [0.3, 0.6, 0.3]\n            }}\n            transition={{ duration: 3, repeat: Infinity }}\n          />\n        )}\n      </motion.div>\n    </div>\n  );\n};","size_bytes":6739},"client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Home, Gamepad2, TrendingUp, Trophy, BookOpen, User as UserIcon, LogOut, Save, ShoppingCart, TreePine, Coins } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useStaticAuth } from \"@/hooks/useStaticAuth\";\n\ninterface NavigationProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nconst tabs = [\n  { id: \"home\", label: \"Home\", icon: Home },\n  { id: \"training\", label: \"Training\", icon: Gamepad2 },\n  { id: \"progress\", label: \"Progress\", icon: TrendingUp },\n  { id: \"achievements\", label: \"Achievements\", icon: Trophy },\n  { id: \"journal\", label: \"Journal\", icon: BookOpen },\n  { id: \"store\", label: \"Store\", icon: ShoppingCart },\n  { id: \"garden\", label: \"Garden\", icon: TreePine },\n];\n\nexport function Navigation({ activeTab, onTabChange }: NavigationProps) {\n  const { user } = useStaticAuth();\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-navy to-cyan rounded-xl flex items-center justify-center\">\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 100 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  {/* Head outline */}\n                  <path d=\"M20 30 Q20 20 30 20 L70 20 Q80 20 80 30 L80 70 Q80 80 70 80 L30 80 Q20 80 20 70 Z\" fill=\"white\" stroke=\"white\" strokeWidth=\"2\"/>\n                  {/* Brain sections */}\n                  <path d=\"M25 25 Q50 20 75 25 Q75 40 50 35 Q25 40 25 25\" fill=\"white\"/>\n                  <path d=\"M25 45 Q50 40 75 45 Q75 60 50 55 Q25 60 25 45\" fill=\"white\"/>\n                  <path d=\"M25 65 Q50 60 75 65 Q75 75 50 75 Q25 75 25 65\" fill=\"white\"/>\n                  {/* Brain detail lines */}\n                  <path d=\"M30 30 Q45 25 60 30\" stroke=\"rgba(255,255,255,0.7)\" strokeWidth=\"1\" fill=\"none\"/>\n                  <path d=\"M30 50 Q45 45 60 50\" stroke=\"rgba(255,255,255,0.7)\" strokeWidth=\"1\" fill=\"none\"/>\n                  <path d=\"M30 70 Q45 65 60 70\" stroke=\"rgba(255,255,255,0.7)\" strokeWidth=\"1\" fill=\"none\"/>\n                </svg>\n              </div>\n              <h1 className=\"text-2xl font-inter font-bold text-navy\">Stimuli</h1>\n            </div>\n            \n            {/* User Profile */}\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"hidden md:flex items-center space-x-2 bg-yellow-50 border border-yellow-200 px-3 py-2 rounded-full\">\n                <Coins className=\"h-4 w-4 text-yellow-600\" />\n                <span className=\"text-sm font-medium text-yellow-800\">\n                  {user?.coins || 0}\n                </span>\n              </div>\n              <div className=\"hidden sm:flex items-center space-x-2 bg-gray-100 px-4 py-2 rounded-full\">\n                <i className=\"fas fa-fire text-orange-500\"></i>\n                <span className=\"text-sm font-medium text-gray-700\">\n                  {user?.streak || 0} Day Streak\n                </span>\n              </div>\n              <div className=\"w-10 h-10 bg-gradient-to-r from-cyan to-blue-500 rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-medium text-sm\">\n                  {user?.level || 1}\n                </span>\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => {\n                  const event = new CustomEvent('showSaveModal');\n                  window.dispatchEvent(event);\n                }}\n                className=\"text-gray-500 hover:text-gray-700 flex items-center space-x-1\"\n                title=\"Save your progress\"\n              >\n                <Save size={16} />\n                <span className=\"hidden sm:inline\">Save</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Navigation Tabs */}\n      <nav className=\"bg-white border-b border-gray-200 sticky top-16 z-30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex space-x-8 overflow-x-auto\">\n            {tabs.map((tab) => {\n              const IconComponent = tab.icon;\n              const isActive = activeTab === tab.id;\n              \n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => onTabChange(tab.id)}\n                  className={`py-4 px-2 border-b-2 font-medium text-sm whitespace-nowrap flex items-center space-x-2 transition-colors ${\n                    isActive\n                      ? \"border-navy text-navy\"\n                      : \"border-transparent text-gray-500 hover:text-gray-700\"\n                  }`}\n                >\n                  <IconComponent size={16} />\n                  <span>{tab.label}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n}\n","size_bytes":5233},"client/src/components/PerfectCartoonTree.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface PerfectCartoonTreeProps {\n  type?: string;\n  stage?: number;\n  xpContributed?: number;\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n  decorations?: string[];\n}\n\nexport const PerfectCartoonTree: React.FC<PerfectCartoonTreeProps> = ({\n  type = 'oak',\n  stage = 1,\n  xpContributed = 0,\n  size = 'medium',\n  className = '',\n  decorations = []\n}) => {\n  // Parse gnome decorations to support multiple gnomes\n  const parseDecorations = () => {\n    const gnomes: Array<{ id: number, color: string, position: 'left' | 'right' }> = [];\n    const otherDecorations = [];\n    \n    for (const decoration of decorations) {\n      if (typeof decoration === 'string') {\n        if (decoration === 'gnome') {\n          // Legacy single gnome support\n          gnomes.push({ id: 1, color: 'green', position: 'right' });\n        } else if (decoration.startsWith('gnome_')) {\n          // New multiple gnome support: gnome_1_green_left, gnome_2_blue_right, etc.\n          const parts = decoration.split('_');\n          if (parts.length >= 4) {\n            const id = parseInt(parts[1]);\n            const color = parts[2];\n            const position = parts[3] as 'left' | 'right';\n            gnomes.push({ id, color, position });\n          }\n        } else {\n          otherDecorations.push(decoration);\n        }\n      } else {\n        otherDecorations.push(decoration);\n      }\n    }\n    \n    return { gnomes, hasLights: otherDecorations.includes('fairy_lights') };\n  };\n  \n  const { gnomes, hasLights } = parseDecorations();\n  // Tree colors based on your exact image\n  const getTreeColors = () => {\n    const colors = {\n      crown: '#8BC34A', // Light green like image\n      crownDark: '#689F38', // Darker green for depth\n      crownLight: '#AED581', // Lighter green for highlights\n      trunk: '#8D6E63', // Brown trunk\n      trunkDark: '#5D4037', // Darker brown for depth\n      soil: '#8B4513', // Brown soil\n      seed: '#CD853F' // Light brown seed\n    };\n    \n    // Different tree types get slight color variations\n    switch (type) {\n      case 'cherry':\n        return { ...colors, crown: '#E91E63', crownDark: '#AD1457', crownLight: '#F48FB1' };\n      case 'pine':\n        return { ...colors, crown: '#4CAF50', crownDark: '#2E7D32', crownLight: '#81C784' };\n      case 'rainbow':\n        return { ...colors, crown: '#b36ae2', crownDark: '#9854c7', crownLight: '#c985eb' };\n      case 'willow':\n        return { ...colors, crown: '#9CCC65', crownDark: '#689F38', crownLight: '#DCEDC8' };\n      case 'maple':\n        return { ...colors, crown: '#FF7043', crownDark: '#D84315', crownLight: '#FFAB91' };\n      case 'birch':\n        return { ...colors, crown: '#66BB6A', crownDark: '#388E3C', crownLight: '#A5D6A7' };\n      case 'sakura':\n        return { ...colors, crown: '#F8BBD9', crownDark: '#E91E63', crownLight: '#FCE4EC' };\n      default:\n        return colors;\n    }\n  };\n\n  const colors = getTreeColors();\n  \n  // Size multipliers - made even bigger\n  const sizeMultiplier = size === 'small' ? 1.5 : size === 'large' ? 3.0 : 2.5;\n  const containerHeight = size === 'small' ? 'h-24' : size === 'large' ? 'h-60' : 'h-48';\n  const containerWidth = size === 'small' ? 'w-24' : size === 'large' ? 'w-60' : 'w-48';\n  \n  // Gnome color mapping\n  const getGnomeHatColor = (color: string) => {\n    switch (color) {\n      case 'green': return '#32CD32';\n      case 'blue': return '#00BFFF';\n      case 'pink': return '#FF69B4';\n      case 'red': return '#FF6347';\n      case 'purple': return '#9370DB';\n      case 'orange': return '#FF8C00';\n      default: return '#32CD32';\n    }\n  };\n  \n  const getGnomeHatTipColor = (color: string) => {\n    switch (color) {\n      case 'green': return '#90EE90';\n      case 'blue': return '#87CEEB';\n      case 'pink': return '#FFB6C1';\n      case 'red': return '#FFA07A';\n      case 'purple': return '#DDA0DD';\n      case 'orange': return '#FFD700';\n      default: return '#90EE90';\n    }\n  };\n  \n  // Generate gnome positioning for multiple gnomes with equal distance around tree center\n  const getGnomePositions = (count: number, treeWidth: number) => {\n    if (count === 0) return [];\n    \n    const radius = treeWidth * 1.0; // Further increased distance for more spacing\n    const positions = [];\n    \n    // Place gnomes in a semicircle around the tree base\n    for (let i = 0; i < count; i++) {\n      const angle = (Math.PI / (count + 1)) * (i + 1); // Spread evenly in semicircle\n      const x = Math.cos(angle) * radius; // Positive = right, negative = left\n      const z = Math.sin(angle) * radius * 0.2; // Reduced depth effect for better spacing\n      \n      positions.push({ \n        x: x, \n        z: z,\n        side: x > 0 ? 'right' as const : (x < 0 ? 'left' as const : 'center' as const)\n      });\n    }\n    \n    return positions;\n  };\n  \n  // Render multiple gnomes with different colors and positions\n  const renderGnomes = (gnomeCount: number, gnomeWidth: number, gnomeHeight: number, treeWidth: number) => {\n    if (gnomes.length === 0) return null;\n    \n    const positions = getGnomePositions(Math.min(gnomes.length, 4), treeWidth);\n    \n    return gnomes.slice(0, 4).map((gnome, index) => {\n      const position = positions[index];\n      if (!position) return null;\n      \n      return (\n        <div \n          key={gnome.id}\n          className=\"absolute bottom-0\"\n          style={{ \n            zIndex: 5,\n            left: '50%',\n            transform: `translateX(calc(-50% + ${position.x}px)) translateY(${position.z || 0}px)`,\n          }}\n        >\n          <svg \n            width={`${gnomeWidth}px`} \n            height={`${gnomeHeight}px`} \n            viewBox=\"0 0 16 20\"\n            className=\"drop-shadow-md\"\n          >\n            {/* Gnome body */}\n            <ellipse cx=\"8\" cy=\"16\" rx=\"4\" ry=\"3\" fill=\"#8FBC8F\" />\n            {/* Gnome face */}\n            <circle cx=\"8\" cy=\"12\" r=\"2.5\" fill=\"#FDBCB4\" />\n            {/* Pointed cone hat with gnome's specific color */}\n            <path \n              d=\"M 8 3 L 12 11 L 4 11 Z\" \n              fill={getGnomeHatColor(gnome.color)} \n            />\n            <circle cx=\"8\" cy=\"3\" r=\"1\" fill={getGnomeHatTipColor(gnome.color)} />\n            {/* White beard */}\n            <ellipse cx=\"8\" cy=\"14\" rx=\"2\" ry=\"1.5\" fill=\"#FFFFFF\" />\n            {/* Eyes */}\n            <circle cx=\"7\" cy=\"11.5\" r=\"0.3\" fill=\"#000000\" />\n            <circle cx=\"9\" cy=\"11.5\" r=\"0.3\" fill=\"#000000\" />\n            {/* Pink nose */}\n            <circle cx=\"8\" cy=\"12.5\" r=\"0.2\" fill=\"#FFB6C1\" />\n            {/* Hands */}\n            <circle cx=\"4.5\" cy=\"15\" r=\"0.8\" fill=\"#FDBCB4\" />\n            <circle cx=\"11.5\" cy=\"15\" r=\"0.8\" fill=\"#FDBCB4\" />\n            {/* Black shoes */}\n            <ellipse cx=\"6\" cy=\"19\" rx=\"1.2\" ry=\"0.8\" fill=\"#2C2C2C\" />\n            <ellipse cx=\"10\" cy=\"19\" rx=\"1.2\" ry=\"0.8\" fill=\"#2C2C2C\" />\n          </svg>\n        </div>\n      );\n    });\n  };\n  \n  // Render different visuals based on growth stage\n  const renderTreeByStage = () => {\n    switch (stage) {\n      case 1: // Seed\n        return (\n          <div className=\"relative flex items-end justify-center\">\n            {/* Soil mound */}\n            <div \n              className=\"rounded-full\"\n              style={{\n                width: `${20 * sizeMultiplier}px`,\n                height: `${8 * sizeMultiplier}px`,\n                backgroundColor: colors.soil,\n                position: 'relative'\n              }}\n            >\n              {/* Seed visible in soil */}\n              <div \n                className=\"absolute rounded-full\"\n                style={{\n                  width: `${6 * sizeMultiplier}px`,\n                  height: `${4 * sizeMultiplier}px`,\n                  backgroundColor: colors.seed,\n                  top: `${-2 * sizeMultiplier}px`,\n                  left: '50%',\n                  transform: 'translateX(-50%)'\n                }}\n              />\n            </div>\n          </div>\n        );\n      \n      case 2: // Sprout - leaves attached to top of stem\n        return (\n          <div className=\"relative flex items-center justify-center\">\n            {/* Vertical stem - shorter and thinner */}\n            <div \n              className=\"relative\"\n              style={{\n                width: `${2.5 * sizeMultiplier}px`,\n                height: `${9 * sizeMultiplier}px`,\n                backgroundColor: '#93c47d',\n                borderRadius: '50% 50% 0% 0%'\n              }}\n            >\n              {/* Left leaf - attached at top center of stem */}\n              <div \n                className=\"absolute\"\n                style={{\n                  width: `${11 * sizeMultiplier}px`,\n                  height: `${5 * sizeMultiplier}px`,\n                  backgroundColor: colors.crownLight,\n                  top: `${0 * sizeMultiplier}px`,\n                  left: `${-8.5 * sizeMultiplier}px`,\n                  borderRadius: '100% 0% 100% 0%',\n                  transform: 'rotate(35deg)',\n                  transformOrigin: 'right center'\n                }}\n              />\n              {/* Right leaf - attached at top center of stem */}\n              <div \n                className=\"absolute\"\n                style={{\n                  width: `${11 * sizeMultiplier}px`,\n                  height: `${5 * sizeMultiplier}px`,\n                  backgroundColor: colors.crownLight,\n                  top: `${0 * sizeMultiplier}px`,\n                  right: `${-8.5 * sizeMultiplier}px`,\n                  borderRadius: '0% 100% 0% 100%',\n                  transform: 'rotate(-35deg)',\n                  transformOrigin: 'left center'\n                }}\n              />\n            </div>\n          </div>\n        );\n      \n      case 3: // Small tree\n        const smallCrownSize = 16 * sizeMultiplier;\n        const smallTrunkWidth = 4 * sizeMultiplier;\n        const smallTrunkHeight = 12 * sizeMultiplier;\n        return (\n          <div className=\"relative flex flex-col items-center justify-end\">\n            {/* Small crown */}\n            <div\n              className=\"relative z-20 rounded-full\"\n              style={{\n                width: `${smallCrownSize}px`,\n                height: `${smallCrownSize}px`,\n                background: `radial-gradient(circle at 30% 30%, ${colors.crownLight}, ${colors.crown}, ${colors.crownDark})`,\n                marginBottom: `${-smallTrunkHeight * 0.3}px`\n              }}\n            />\n            {/* Small trunk */}\n            <div\n              className=\"relative z-10\"\n              style={{\n                width: `${smallTrunkWidth}px`,\n                height: `${smallTrunkHeight}px`,\n                backgroundColor: colors.trunk,\n                borderRadius: '2px 2px 1px 1px'\n              }}\n            />\n            \n            {/* Multiple gnome decorations for small trees */}\n            {renderGnomes(gnomes.length, 12 * sizeMultiplier, 15 * sizeMultiplier, smallCrownSize)}\n          </div>\n        );\n      \n      case 4: // Medium tree\n        const mediumCrownSize = 28 * sizeMultiplier;\n        const mediumTrunkWidth = 8 * sizeMultiplier;\n        const mediumTrunkHeight = 20 * sizeMultiplier;\n        return (\n          <div className=\"relative flex flex-col items-center justify-end\">\n            {/* Medium crown */}\n            <div\n              className=\"relative z-20\"\n              style={{\n                width: `${mediumCrownSize}px`,\n                height: `${mediumCrownSize * 0.9}px`,\n                background: `radial-gradient(circle at 30% 30%, ${colors.crownLight}, ${colors.crown}, ${colors.crownDark})`,\n                borderRadius: '50% 45% 55% 50%',\n                marginBottom: `${-mediumTrunkHeight * 0.3}px`\n              }}\n            >\n              {/* Some leaf details */}\n              <div\n                className=\"absolute rounded-full\"\n                style={{\n                  width: '25%',\n                  height: '25%',\n                  backgroundColor: colors.crownLight,\n                  top: '20%',\n                  left: '20%',\n                  opacity: 0.8\n                }}\n              />\n              <div\n                className=\"absolute rounded-full\"\n                style={{\n                  width: '20%',\n                  height: '20%',\n                  backgroundColor: colors.crownDark,\n                  bottom: '25%',\n                  right: '25%',\n                  opacity: 0.6\n                }}\n              />\n              \n              {/* Fairy lights for medium tree - single horizontal line */}\n              {hasLights && (\n                <>\n                  {/* Single wire string exactly from tree sides */}\n                  <div className=\"absolute\" style={{ top: '45%', left: '0%', right: '0%', height: '1px', backgroundColor: '#2d2d2d', zIndex: 10 }} />\n                  \n                  {/* Medium Christmas light bulbs starting from edges */}\n                  <div className=\"absolute animate-pulse\" style={{ top: '45%', left: '0%', width: `${4 * sizeMultiplier}px`, height: `${6 * sizeMultiplier}px`, backgroundColor: '#FF6B35', borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%', filter: 'drop-shadow(0 0 3px #FF6B35)', zIndex: 11 }} />\n                  <div className=\"absolute animate-pulse\" style={{ top: '45%', left: '24%', width: `${4 * sizeMultiplier}px`, height: `${6 * sizeMultiplier}px`, backgroundColor: '#4ECDC4', borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%', filter: 'drop-shadow(0 0 3px #4ECDC4)', animationDelay: '0.4s', zIndex: 11 }} />\n                  <div className=\"absolute animate-pulse\" style={{ top: '45%', left: '48%', width: `${4 * sizeMultiplier}px`, height: `${6 * sizeMultiplier}px`, backgroundColor: '#FFD93D', borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%', filter: 'drop-shadow(0 0 3px #FFD93D)', animationDelay: '0.8s', zIndex: 11 }} />\n                  <div className=\"absolute animate-pulse\" style={{ top: '45%', right: '24%', width: `${4 * sizeMultiplier}px`, height: `${6 * sizeMultiplier}px`, backgroundColor: '#6BCF7F', borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%', filter: 'drop-shadow(0 0 3px #6BCF7F)', animationDelay: '1.2s', zIndex: 11 }} />\n                  <div className=\"absolute animate-pulse\" style={{ top: '45%', right: '0%', width: `${4 * sizeMultiplier}px`, height: `${6 * sizeMultiplier}px`, backgroundColor: '#FF6B9D', borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%', filter: 'drop-shadow(0 0 3px #FF6B9D)', animationDelay: '1.6s', zIndex: 11 }} />\n                </>\n              )}\n            </div>\n            {/* Medium trunk */}\n            <div\n              className=\"relative z-10\"\n              style={{\n                width: `${mediumTrunkWidth}px`,\n                height: `${mediumTrunkHeight}px`,\n                background: `linear-gradient(45deg, ${colors.trunkDark}, ${colors.trunk}, ${colors.trunkDark})`,\n                borderRadius: '3px 3px 1px 1px'\n              }}\n            />\n            \n            {/* Garden gnome decoration for medium trees */}\n            {/* Multiple gnome decorations for medium trees */}\n            {renderGnomes(gnomes.length, 14 * sizeMultiplier, 17 * sizeMultiplier, mediumCrownSize)}\n          </div>\n        );\n      \n      case 5: // Full mature tree (original design)\n      default:\n        const fullCrownSize = 40 * sizeMultiplier;\n        const fullTrunkWidth = 12 * sizeMultiplier;\n        const fullTrunkHeight = 28 * sizeMultiplier;\n        return (\n          <div className=\"relative flex flex-col items-center justify-end\">\n            {/* FULL CARTOON TREE CROWN */}\n            <motion.div\n              className=\"relative z-20\"\n              style={{\n                width: `${fullCrownSize}px`,\n                height: `${fullCrownSize * 0.9}px`,\n                background: type === 'rainbow' \n                  ? colors.crown  // Flat color for rainbow tree\n                  : `radial-gradient(circle at 30% 30%, ${colors.crownLight} 0%, ${colors.crown} 40%, ${colors.crownDark} 100%)`,\n                borderRadius: '50% 45% 55% 50%',\n                filter: type === 'rainbow' \n                  ? 'none'  // No drop shadow for rainbow tree\n                  : 'drop-shadow(4px 8px 16px rgba(0,0,0,0.3))',\n                position: 'relative',\n                marginBottom: `${-fullTrunkHeight * 0.3}px`,\n                border: `1px solid ${colors.crownDark}`,\n              }}\n              animate={{\n                scale: [1, 1.02, 1],\n              }}\n              transition={{ duration: 4, repeat: Infinity }}\n            >\n              {/* Full leaf detail clusters */}\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '15%',\n                  left: '20%',\n                  width: '25%',\n                  height: '25%',\n                  backgroundColor: colors.crownLight,\n                  borderRadius: '50%',\n                  opacity: 0.8\n                }}\n              />\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '25%',\n                  right: '15%',\n                  width: '30%',\n                  height: '20%',\n                  backgroundColor: colors.crownLight,\n                  borderRadius: '60%',\n                  opacity: 0.7\n                }}\n              />\n              <div\n                style={{\n                  position: 'absolute',\n                  bottom: '20%',\n                  left: '25%',\n                  width: '20%',\n                  height: '25%',\n                  backgroundColor: colors.crownDark,\n                  borderRadius: '50%',\n                  opacity: 0.6\n                }}\n              />\n              <div\n                style={{\n                  position: 'absolute',\n                  bottom: '15%',\n                  right: '20%',\n                  width: '25%',\n                  height: '20%',\n                  backgroundColor: colors.crownDark,\n                  borderRadius: '50%',\n                  opacity: 0.5\n                }}\n              />\n              \n              {/* Fairy lights decoration - single horizontal line from side to side */}\n              {hasLights && (\n                <>\n                  {/* Single black wire string connecting exactly from tree sides */}\n                  <div \n                    className=\"absolute\"\n                    style={{\n                      top: '50%',\n                      left: '0%',\n                      right: '0%',\n                      height: '1px',\n                      backgroundColor: '#2d2d2d',\n                      zIndex: 10\n                    }}\n                  />\n                  \n                  {/* Christmas light bulbs starting exactly from tree edges */}\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      left: '0%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#FF6B35',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #FF6B35)',\n                      zIndex: 11\n                    }}\n                  />\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      left: '12%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#4ECDC4',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #4ECDC4)',\n                      animationDelay: '0.3s',\n                      zIndex: 11\n                    }}\n                  />\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      left: '25%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#FFD93D',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #FFD93D)',\n                      animationDelay: '0.6s',\n                      zIndex: 11\n                    }}\n                  />\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      left: '37%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#6BCF7F',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #6BCF7F)',\n                      animationDelay: '0.9s',\n                      zIndex: 11\n                    }}\n                  />\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      left: '50%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#4D96FF',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #4D96FF)',\n                      animationDelay: '1.2s',\n                      zIndex: 11\n                    }}\n                  />\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      right: '37%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#FF6B9D',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #FF6B9D)',\n                      animationDelay: '1.5s',\n                      zIndex: 11\n                    }}\n                  />\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      right: '25%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#A8E6CF',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #A8E6CF)',\n                      animationDelay: '1.8s',\n                      zIndex: 11\n                    }}\n                  />\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      right: '12%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#FFA726',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #FFA726)',\n                      animationDelay: '2.1s',\n                      zIndex: 11\n                    }}\n                  />\n                  <div \n                    className=\"absolute animate-pulse\"\n                    style={{\n                      top: '50%',\n                      right: '0%',\n                      width: `${5 * sizeMultiplier}px`,\n                      height: `${7 * sizeMultiplier}px`,\n                      backgroundColor: '#B19CD9',\n                      borderRadius: '50% 50% 50% 50% / 60% 60% 40% 40%',\n                      filter: 'drop-shadow(0 0 4px #B19CD9)',\n                      animationDelay: '2.4s',\n                      zIndex: 11\n                    }}\n                  />\n                </>\n              )}\n            </motion.div>\n            \n            {/* FULL CARTOON TRUNK */}\n            <div\n              className=\"relative z-10\"\n              style={{\n                width: `${fullTrunkWidth}px`,\n                height: `${fullTrunkHeight}px`,\n                background: type === 'rainbow'\n                  ? colors.trunk  // Flat color for rainbow tree\n                  : `linear-gradient(45deg, ${colors.trunkDark} 0%, ${colors.trunk} 30%, ${colors.trunkDark} 100%)`,\n                borderRadius: '3px 3px 1px 1px',\n                filter: type === 'rainbow' \n                  ? 'none'  // No drop shadow for rainbow tree\n                  : 'drop-shadow(2px 4px 8px rgba(0,0,0,0.4))',\n                border: `1px solid ${colors.trunkDark}`,\n              }}\n            >\n              {/* Bark texture lines */}\n              <div \n                style={{\n                  position: 'absolute',\n                  top: '25%',\n                  left: '10%',\n                  right: '10%',\n                  height: '1px',\n                  backgroundColor: colors.trunkDark,\n                  opacity: 0.8\n                }}\n              />\n              <div \n                style={{\n                  position: 'absolute',\n                  top: '50%',\n                  left: '15%',\n                  right: '15%',\n                  height: '1px',\n                  backgroundColor: colors.trunkDark,\n                  opacity: 0.6\n                }}\n              />\n              <div \n                style={{\n                  position: 'absolute',\n                  top: '75%',\n                  left: '20%',\n                  right: '20%',\n                  height: '1px',\n                  backgroundColor: colors.trunkDark,\n                  opacity: 0.4\n                }}\n              />\n            </div>\n            \n            {/* Garden gnome decoration - cute gnome with colorful hat at tree base */}\n            {/* Multiple gnome decorations for large trees */}\n            {renderGnomes(gnomes.length, 16 * sizeMultiplier, 20 * sizeMultiplier, fullCrownSize)}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className={`relative flex items-end justify-center ${containerHeight} ${containerWidth} ${className}`}>\n      <motion.div\n        className=\"relative flex flex-col items-center justify-end\"\n        initial={{ scale: 0.3, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ duration: 1.0, ease: \"backOut\" }}\n      >\n        {renderTreeByStage()}\n      </motion.div>\n    </div>\n  );\n};","size_bytes":26821},"client/src/components/ProgressChart.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface ProgressChartProps {\n  data: { date: string; score: number }[];\n  className?: string;\n}\n\nexport function ProgressChart({ data, className = \"\" }: ProgressChartProps) {\n  const maxScore = Math.max(...data.map(d => d.score), 100);\n  const chartHeight = 200;\n  const chartWidth = 600;\n  const padding = 50;\n\n  const pathData = data.map((point, index) => {\n    const x = padding + (index * (chartWidth - padding * 2)) / (data.length - 1);\n    const y = chartHeight - padding - ((point.score / maxScore) * (chartHeight - padding * 2));\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  const areaData = `${pathData} L ${chartWidth - padding} ${chartHeight - padding} L ${padding} ${chartHeight - padding} Z`;\n\n  return (\n    <div className={`bg-white rounded-2xl shadow-sm p-8 ${className}`}>\n      <h3 className=\"font-inter font-semibold text-navy mb-6\">Performance Trends</h3>\n      \n      <div className=\"h-64 bg-gray-50 rounded-xl flex items-center justify-center mb-6\">\n        <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${chartWidth} ${chartHeight}`}>\n          <defs>\n            <linearGradient id=\"progressGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <stop offset=\"0%\" style={{ stopColor: \"#00C2CB\", stopOpacity: 0.3 }} />\n              <stop offset=\"100%\" style={{ stopColor: \"#00C2CB\", stopOpacity: 0 }} />\n            </linearGradient>\n          </defs>\n          \n          {/* Grid Lines */}\n          <g stroke=\"#E5E7EB\" strokeWidth=\"1\" opacity=\"0.5\">\n            {[...Array(6)].map((_, i) => (\n              <line\n                key={i}\n                x1={padding + i * (chartWidth - padding * 2) / 5}\n                y1={padding}\n                x2={padding + i * (chartWidth - padding * 2) / 5}\n                y2={chartHeight - padding}\n              />\n            ))}\n          </g>\n          \n          {/* Progress Area */}\n          <motion.path\n            d={areaData}\n            fill=\"url(#progressGradient)\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: 1 }}\n            transition={{ duration: 1.5, ease: \"easeInOut\" }}\n          />\n          \n          {/* Progress Line */}\n          <motion.path\n            d={pathData}\n            fill=\"none\"\n            stroke=\"#00C2CB\"\n            strokeWidth=\"3\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: 1 }}\n            transition={{ duration: 1.5, ease: \"easeInOut\" }}\n          />\n          \n          {/* Data Points */}\n          {data.map((point, index) => {\n            const x = padding + (index * (chartWidth - padding * 2)) / (data.length - 1);\n            const y = chartHeight - padding - ((point.score / maxScore) * (chartHeight - padding * 2));\n            return (\n              <motion.circle\n                key={index}\n                cx={x}\n                cy={y}\n                r=\"4\"\n                fill={index === data.length - 1 ? \"#00C2CB\" : \"#002E5D\"}\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n              />\n            );\n          })}\n        </svg>\n      </div>\n      \n      {/* Performance Metrics */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"text-center p-4 bg-cyan/10 rounded-xl\">\n          <div className=\"text-2xl font-bold text-cyan\">\n            {data.length > 0 ? `${Math.round(data[data.length - 1].score)}%` : \"0%\"}\n          </div>\n          <div className=\"text-sm text-gray-600\">Latest Score</div>\n        </div>\n        <div className=\"text-center p-4 bg-green-50 rounded-xl\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            {data.length > 1 ? \n              `${Math.round(((data[data.length - 1].score - data[0].score) / data[0].score) * 100)}%` : \n              \"0%\"\n            }\n          </div>\n          <div className=\"text-sm text-gray-600\">Improvement</div>\n        </div>\n        <div className=\"text-center p-4 bg-blue-50 rounded-xl\">\n          <div className=\"text-2xl font-bold text-blue-600\">{data.length}</div>\n          <div className=\"text-sm text-gray-600\">Sessions</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4260},"client/src/components/SaveProgressNotification.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { X, Save } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface SaveProgressNotificationProps {\n  show: boolean;\n  onClose: () => void;\n}\n\nexport function SaveProgressNotification({ show, onClose }: SaveProgressNotificationProps) {\n  return (\n    <AnimatePresence>\n      {show && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\"\n        >\n          <motion.div\n            initial={{ scale: 0.9, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            exit={{ scale: 0.9, opacity: 0 }}\n            className=\"m-4\"\n          >\n            <Card className=\"w-full max-w-md\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Save className=\"text-cyan\" size={24} />\n                    <h3 className=\"font-inter font-semibold text-navy\">Save Your Progress</h3>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={onClose}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    <X size={16} />\n                  </Button>\n                </div>\n                \n                <p className=\"text-gray-600 mb-6\">\n                  You're currently using demo mode. Your progress will be lost when you leave. \n                  Sign in to save your XP, achievements, and training history permanently.\n                </p>\n                \n                <div className=\"flex space-x-3\">\n                  <Button \n                    className=\"flex-1 bg-navy hover:bg-navy/90 text-white\"\n                    onClick={() => {\n                      window.location.href = \"/api/login\";\n                    }}\n                  >\n                    Save Progress\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={onClose}\n                    className=\"flex-1\"\n                  >\n                    Continue Demo\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":2593},"client/src/components/TreeDesignOptions.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface TreeDesignProps {\n  type: string;\n  stage: number;\n  style: 'simple' | 'fluffy' | 'geometric' | 'layered';\n  xpContributed?: number;\n  className?: string;\n}\n\nexport const TreeDesignOptions = ({ \n  type, \n  stage, \n  style,\n  xpContributed = 0, \n  className = \"\" \n}: TreeDesignProps) => {\n  \n  const getColors = (type: string) => {\n    switch (type) {\n      case 'oak':\n        return { crown: '#4CAF50', light: '#81C784', trunk: '#8D6E63' };\n      case 'cherry':\n        return { crown: '#E91E63', light: '#F48FB1', trunk: '#8D6E63' };\n      case 'willow':\n        return { crown: '#9CCC65', light: '#C5E1A5', trunk: '#8D6E63' };\n      default:\n        return { crown: '#4CAF50', light: '#81C784', trunk: '#8D6E63' };\n    }\n  };\n\n  const colors = getColors(type);\n  const size = 40 + (stage * 8);\n  const treeScale = 0.8 + (stage * 0.1);\n\n  const renderSimpleTree = () => (\n    <div className=\"relative flex items-end justify-center h-24 w-24\">\n      <motion.div className=\"relative\" animate={{ scale: treeScale }}>\n        {/* Simple circular crown */}\n        <div\n          style={{\n            width: `${size}px`,\n            height: `${size}px`,\n            backgroundColor: colors.crown,\n            borderRadius: '50%',\n            position: 'relative',\n            filter: 'drop-shadow(2px 3px 6px rgba(0,0,0,0.2))'\n          }}\n        >\n          <div\n            style={{\n              position: 'absolute',\n              top: '20%',\n              left: '25%',\n              width: '25%',\n              height: '25%',\n              backgroundColor: colors.light,\n              borderRadius: '50%',\n              opacity: 0.8\n            }}\n          />\n        </div>\n        <div\n          style={{\n            position: 'absolute',\n            bottom: '-8px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            width: `${8 + stage * 2}px`,\n            height: `${16 + stage * 2}px`,\n            backgroundColor: colors.trunk,\n            borderRadius: '2px'\n          }}\n        />\n      </motion.div>\n    </div>\n  );\n\n  const renderFluffyTree = () => (\n    <div className=\"relative flex items-end justify-center h-24 w-24\">\n      <motion.div className=\"relative\" animate={{ scale: treeScale }}>\n        {/* Fluffy cloud-like crown */}\n        <div className=\"relative\">\n          {/* Main crown circles */}\n          <div\n            style={{\n              width: `${size}px`,\n              height: `${size * 0.8}px`,\n              backgroundColor: colors.crown,\n              borderRadius: '50%',\n              position: 'relative'\n            }}\n          />\n          <div\n            style={{\n              position: 'absolute',\n              top: `${-size * 0.2}px`,\n              left: `${-size * 0.15}px`,\n              width: `${size * 0.7}px`,\n              height: `${size * 0.7}px`,\n              backgroundColor: colors.light,\n              borderRadius: '50%'\n            }}\n          />\n          <div\n            style={{\n              position: 'absolute',\n              top: `${-size * 0.1}px`,\n              right: `${-size * 0.1}px`,\n              width: `${size * 0.6}px`,\n              height: `${size * 0.6}px`,\n              backgroundColor: colors.light,\n              borderRadius: '50%'\n            }}\n          />\n        </div>\n        <div\n          style={{\n            position: 'absolute',\n            bottom: '-8px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            width: `${10 + stage * 2}px`,\n            height: `${18 + stage * 2}px`,\n            backgroundColor: colors.trunk,\n            borderRadius: '4px'\n          }}\n        />\n      </motion.div>\n    </div>\n  );\n\n  const renderGeometricTree = () => (\n    <div className=\"relative flex items-end justify-center h-24 w-24\">\n      <motion.div className=\"relative\" animate={{ scale: treeScale }}>\n        {/* Geometric triangular crown */}\n        <div\n          style={{\n            width: 0,\n            height: 0,\n            borderLeft: `${size * 0.6}px solid transparent`,\n            borderRight: `${size * 0.6}px solid transparent`,\n            borderBottom: `${size}px solid ${colors.crown}`,\n            position: 'relative',\n            filter: 'drop-shadow(2px 3px 6px rgba(0,0,0,0.2))'\n          }}\n        >\n          <div\n            style={{\n              position: 'absolute',\n              top: `${size * 0.3}px`,\n              left: `${-size * 0.3}px`,\n              width: 0,\n              height: 0,\n              borderLeft: `${size * 0.3}px solid transparent`,\n              borderRight: `${size * 0.3}px solid transparent`,\n              borderBottom: `${size * 0.5}px solid ${colors.light}`\n            }}\n          />\n        </div>\n        <div\n          style={{\n            position: 'absolute',\n            bottom: '-8px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            width: `${8 + stage * 2}px`,\n            height: `${16 + stage * 3}px`,\n            backgroundColor: colors.trunk,\n            borderRadius: '1px'\n          }}\n        />\n      </motion.div>\n    </div>\n  );\n\n  const renderLayeredTree = () => (\n    <div className=\"relative flex items-end justify-center h-24 w-24\">\n      <motion.div className=\"relative\" animate={{ scale: treeScale }}>\n        {/* Layered oval crown */}\n        <div className=\"relative\">\n          <div\n            style={{\n              width: `${size}px`,\n              height: `${size * 0.7}px`,\n              backgroundColor: colors.crown,\n              borderRadius: '50%',\n              position: 'relative'\n            }}\n          />\n          <div\n            style={{\n              position: 'absolute',\n              top: `${size * 0.15}px`,\n              left: '50%',\n              transform: 'translateX(-50%)',\n              width: `${size * 0.8}px`,\n              height: `${size * 0.6}px`,\n              backgroundColor: colors.light,\n              borderRadius: '50%'\n            }}\n          />\n          <div\n            style={{\n              position: 'absolute',\n              top: `${size * 0.25}px`,\n              left: '50%',\n              transform: 'translateX(-50%)',\n              width: `${size * 0.6}px`,\n              height: `${size * 0.4}px`,\n              backgroundColor: colors.crown,\n              borderRadius: '50%',\n              opacity: 0.8\n            }}\n          />\n        </div>\n        <div\n          style={{\n            position: 'absolute',\n            bottom: '-8px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            width: `${10 + stage * 2}px`,\n            height: `${18 + stage * 2}px`,\n            backgroundColor: colors.trunk,\n            borderRadius: '3px'\n          }}\n        />\n      </motion.div>\n    </div>\n  );\n\n  switch (style) {\n    case 'simple': return renderSimpleTree();\n    case 'fluffy': return renderFluffyTree();\n    case 'geometric': return renderGeometricTree();\n    case 'layered': return renderLayeredTree();\n    default: return renderSimpleTree();\n  }\n};\n\n// Demo component to show all options\nexport const TreeStyleShowcase = () => {\n  const treeTypes = ['oak', 'cherry', 'willow'];\n  const styles: ('simple' | 'fluffy' | 'geometric' | 'layered')[] = ['simple', 'fluffy', 'geometric', 'layered'];\n  \n  return (\n    <div className=\"p-6 bg-gray-50 dark:bg-gray-900 rounded-lg\">\n      <h2 className=\"text-2xl font-bold mb-6 text-center\">Tree Design Options</h2>\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n        {styles.map((style) => (\n          <div key={style} className=\"text-center\">\n            <h3 className=\"text-lg font-semibold mb-3 capitalize\">{style} Style</h3>\n            <div className=\"space-y-3\">\n              {treeTypes.map((type) => (\n                <div key={type} className=\"flex flex-col items-center\">\n                  <TreeDesignOptions\n                    type={type}\n                    stage={3}\n                    style={style}\n                    xpContributed={25}\n                  />\n                  <span className=\"text-sm text-gray-600 capitalize\">{type}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"mt-8 text-center\">\n        <h3 className=\"text-lg font-semibold mb-4\">Growth Stages (Simple Style Example)</h3>\n        <div className=\"flex justify-center items-end gap-4\">\n          {[1, 2, 3, 4, 5].map((stage) => (\n            <div key={stage} className=\"flex flex-col items-center\">\n              <TreeDesignOptions\n                type=\"oak\"\n                stage={stage}\n                style=\"simple\"\n                xpContributed={stage * 10}\n              />\n              <span className=\"text-sm text-gray-600\">Stage {stage}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":8903},"client/src/components/TreeVisual3D.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface TreeVisual3DProps {\n  type: string;\n  stage: number;\n  className?: string;\n}\n\nexport const TreeVisual3D = ({ type, stage, className = \"\" }: TreeVisual3DProps) => {\n  const getCrownColor = () => {\n    switch (type) {\n      case 'oak': return 'bg-gradient-to-br from-green-400 to-green-600';\n      case 'cherry': return 'bg-gradient-to-br from-pink-400 to-pink-600';\n      case 'willow': return 'bg-gradient-to-br from-lime-400 to-lime-600';\n      case 'rainbow': return 'bg-gradient-to-br from-purple-400 via-pink-500 to-red-500';\n      default: return 'bg-gradient-to-br from-green-400 to-green-600';\n    }\n  };\n\n  const getCrownSize = (stage: number) => {\n    switch (stage) {\n      case 1: return \"w-8 h-8\";\n      case 2: return \"w-12 h-12\";\n      case 3: return \"w-16 h-16\";\n      case 4: return \"w-20 h-20\";\n      case 5: return \"w-24 h-24\";\n      default: return \"w-8 h-8\";\n    }\n  };\n\n  const getTrunkSize = (stage: number) => {\n    switch (stage) {\n      case 1: return \"w-2 h-6\";\n      case 2: return \"w-3 h-8\";\n      case 3: return \"w-4 h-10\";\n      case 4: return \"w-4 h-12\";\n      case 5: return \"w-5 h-14\";\n      default: return \"w-2 h-6\";\n    }\n  };\n\n  const getTreeVisual = () => {\n    const baseClass = \"relative flex items-center justify-center\";\n    \n    return (\n      <div className={`${baseClass} ${className}`}>\n        <motion.div\n          className=\"relative\"\n          initial={{ scale: 0.8, opacity: 0.7 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        >\n          {/* Tree Crown */}\n          <motion.div\n            className={`rounded-full ${getCrownColor()} ${getCrownSize(stage)}`}\n            animate={{ \n              scale: [1, 1.02, 1],\n              opacity: [0.9, 1, 0.9]\n            }}\n            transition={{ duration: 3, repeat: Infinity }}\n          />\n          \n          {/* Tree Trunk */}\n          <div\n            className={`absolute bottom-0 left-1/2 transform -translate-x-1/2 bg-gradient-to-b from-amber-800 to-amber-900 ${getTrunkSize(stage)}`}\n            style={{\n              clipPath: 'polygon(30% 0%, 70% 0%, 85% 100%, 15% 100%)'\n            }}\n          />\n          \n          {/* Stage indicators */}\n          {stage >= 3 && (\n            <motion.div\n              className=\"absolute top-2 left-2 text-yellow-300 text-sm\"\n              animate={{ rotate: [0, 10, -10, 0] }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              ✨\n            </motion.div>\n          )}\n          \n          {stage === 5 && (\n            <motion.div\n              className=\"absolute -top-1 right-1 text-green-300 text-lg\"\n              animate={{ \n                scale: [1, 1.2, 1],\n                opacity: [0.7, 1, 0.7]\n              }}\n              transition={{ duration: 1.5, repeat: Infinity }}\n            >\n              🌟\n            </motion.div>\n          )}\n        </motion.div>\n      </div>\n    );\n  };\n\n  return getTreeVisual();\n};","size_bytes":3035},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Achievements.tsx":{"content":"import { useStaticAchievements } from \"@/hooks/useStaticData\";\nimport { useStaticAuth } from \"@/hooks/useStaticAuth\";\nimport { AchievementBadge } from \"@/components/AchievementBadge\";\nimport { motion } from \"framer-motion\";\n\n// Default achievements data\nconst defaultAchievements = [\n  {\n    id: 1,\n    key: \"neural-spark\",\n    name: \"Neural Spark\",\n    description: \"Complete your first brain training session\",\n    xpReward: 50,\n    iconType: \"brain\",\n  },\n  {\n    id: 2,\n    key: \"focused-flame\",\n    name: \"Focused Flame\",\n    description: \"Maintain a 7-day training streak\",\n    xpReward: 100,\n    iconType: \"flame\",\n  },\n  {\n    id: 3,\n    key: \"synesthetic-pro\",\n    name: \"Synesthetic Pro\",\n    description: \"Master all color-sound matching games\",\n    xpReward: 75,\n    iconType: \"palette\",\n  },\n  {\n    id: 4,\n    key: \"memory-master\",\n    name: \"Memory Master\",\n    description: \"Score 95% or higher on all memory games\",\n    xpReward: 150,\n    iconType: \"trophy\",\n  },\n  {\n    id: 5,\n    key: \"speed-demon\",\n    name: \"Speed Demon\",\n    description: \"Complete 10 games in under 5 minutes each\",\n    xpReward: 200,\n    iconType: \"rocket\",\n  },\n  {\n    id: 6,\n    key: \"tree-sage\",\n    name: \"Tree Sage\",\n    description: \"Grow your tree to maximum level\",\n    xpReward: 500,\n    iconType: \"tree\",\n  },\n  {\n    id: 7,\n    key: \"pattern-master\",\n    name: \"Pattern Master\",\n    description: \"Complete 50 pattern recognition games\",\n    xpReward: 300,\n    iconType: \"puzzle\",\n  },\n  {\n    id: 8,\n    key: \"lightning-reflexes\",\n    name: \"Lightning Reflexes\",\n    description: \"Achieve sub-200ms reaction time 10 times\",\n    xpReward: 250,\n    iconType: \"zap\",\n  },\n  {\n    id: 9,\n    key: \"garden-architect\",\n    name: \"Garden Architect\",\n    description: \"Plant and grow 5 different tree types\",\n    xpReward: 400,\n    iconType: \"leaf\",\n  },\n  {\n    id: 10,\n    key: \"color-conductor\",\n    name: \"Color Conductor\",\n    description: \"Perfect score on 25 color-echo games\",\n    xpReward: 350,\n    iconType: \"rainbow\",\n  },\n  {\n    id: 11,\n    key: \"mind-athlete\",\n    name: \"Mind Athlete\",\n    description: \"Complete 100 brain training sessions\",\n    xpReward: 600,\n    iconType: \"medal\",\n  },\n  {\n    id: 12,\n    key: \"synesthete-legend\",\n    name: \"Synesthete Legend\",\n    description: \"Unlock all synesthesia-related achievements\",\n    xpReward: 1000,\n    iconType: \"crown\",\n  },\n  {\n    id: 13,\n    key: \"quick-thinker\",\n    name: \"Quick Thinker\",\n    description: \"Win 20 quick-response games in a row\",\n    xpReward: 450,\n    iconType: \"brain-circuit\",\n  },\n  {\n    id: 14,\n    key: \"sequence-savant\",\n    name: \"Sequence Savant\",\n    description: \"Remember a 12-item sequence perfectly\",\n    xpReward: 500,\n    iconType: \"chain\",\n  },\n  {\n    id: 15,\n    key: \"attention-ace\",\n    name: \"Attention Ace\",\n    description: \"Complete 100 spotlight games\",\n    xpReward: 350,\n    iconType: \"eye\",\n  },\n  {\n    id: 16,\n    key: \"decorator-supreme\",\n    name: \"Decorator Supreme\",\n    description: \"Add decorations to 10 different trees\",\n    xpReward: 300,\n    iconType: \"sparkles\",\n  },\n  {\n    id: 17,\n    key: \"xp-collector\",\n    name: \"XP Collector\",\n    description: \"Earn 5000 total experience points\",\n    xpReward: 750,\n    iconType: \"star\",\n  },\n  {\n    id: 18,\n    key: \"streak-champion\",\n    name: \"Streak Champion\",\n    description: \"Maintain a 30-day training streak\",\n    xpReward: 800,\n    iconType: \"fire\",\n  },\n  {\n    id: 19,\n    key: \"matrix-master\",\n    name: \"Matrix Master\",\n    description: \"Perfect score on memory matrix at maximum difficulty\",\n    xpReward: 600,\n    iconType: \"grid\",\n  },\n  {\n    id: 20,\n    key: \"cognitive-elite\",\n    name: \"Cognitive Elite\",\n    description: \"Achieve top 1% performance in all game categories\",\n    xpReward: 1500,\n    iconType: \"diamond\",\n  },\n];\n\nexport default function Achievements() {\n  const { user } = useStaticAuth();\n  const { achievements, userAchievements } = useStaticAchievements();\n  \n  // Use default achievements\n  const allAchievements = achievements || defaultAchievements;\n  const unlockedAchievements = userAchievements || [];\n\n  const isUnlocked = (achievementId: number) => {\n    return unlockedAchievements.some((ua: any) => ua.achievementId === achievementId);\n  };\n\n  const getUnlockedDate = (achievementId: number) => {\n    const userAchievement = unlockedAchievements.find((ua: any) => ua.achievementId === achievementId);\n    return userAchievement?.unlockedAt;\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Modern Header */}\n      <motion.div \n        className=\"text-center mb-12 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-2xl p-8 border-2 border-purple-200 dark:border-purple-700\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <motion.div\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n        >\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-4\">\n            🏆 Achievement Gallery\n          </h1>\n        </motion.div>\n        <motion.p \n          className=\"text-gray-600 dark:text-gray-400 text-lg\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.4 }}\n        >\n          Track your progress and unlock amazing rewards!\n        </motion.p>\n        \n        {/* Achievement Stats */}\n        <motion.div \n          className=\"flex justify-center gap-8 mt-6\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n        >\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {unlockedAchievements.length}\n            </div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Unlocked</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {allAchievements.length}\n            </div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Total</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {allAchievements.length > 0 ? Math.round((unlockedAchievements.length / allAchievements.length) * 100) : 0}%\n            </div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Progress</div>\n          </div>\n        </motion.div>\n      </motion.div>\n\n      {/* Achievement Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n        {allAchievements.map((achievement: any, index: number) => (\n          <motion.div\n            key={achievement.id}\n            initial={{ opacity: 0, y: 30, scale: 0.9 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            transition={{ \n              delay: index * 0.1, \n              duration: 0.5,\n              type: \"spring\",\n              stiffness: 100\n            }}\n            whileHover={{ \n              y: -8,\n              transition: { duration: 0.2 }\n            }}\n          >\n            <AchievementBadge\n              achievement={achievement}\n              isUnlocked={isUnlocked(achievement.id)}\n              unlockedAt={getUnlockedDate(achievement.id)}\n              progress={!isUnlocked(achievement.id) ? \"Not started\" : undefined}\n            />\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7696},"client/src/pages/Garden.tsx":{"content":"import React from 'react';\nimport EnhancedGrowthTree from '@/components/EnhancedGrowthTree';\n\nexport default function Garden() {\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <EnhancedGrowthTree />\n    </div>\n  );\n}","size_bytes":236},"client/src/pages/Home.tsx":{"content":"import { useStaticAuth } from \"@/hooks/useStaticAuth\";\nimport { GrowthTree } from \"@/components/GrowthTree\";\nimport { PerfectCartoonTree } from \"@/components/PerfectCartoonTree\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Quote } from \"lucide-react\";\n\nconst dailyQuotes = [\n  \"Your mind is like a muscle - the more you challenge it, the stronger it becomes.\",\n  \"Every expert was once a beginner. Every pro was once an amateur.\",\n  \"The brain that changes itself is the brain that grows.\",\n  \"Small daily improvements lead to stunning long-term results.\",\n  \"Your potential is limitless when you train consistently.\",\n  \"Each challenge is an opportunity to grow stronger.\",\n  \"Progress, not perfection, is the goal.\",\n];\n\nexport default function Home() {\n  const { user, isLoading } = useStaticAuth();\n  \n  if (isLoading || !user) return (\n    <div className=\"min-h-screen bg-light-gray flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-gradient-to-r from-navy to-cyan rounded-2xl flex items-center justify-center mx-auto mb-4\">\n          <i className=\"fas fa-brain text-white text-2xl\"></i>\n        </div>\n        <p className=\"text-gray-600\">Loading...</p>\n      </div>\n    </div>\n  );\n\n  const currentXP = user?.xp || 0;\n  const currentLevel = user?.level || 1;\n  \n  // Calculate next level XP based on new system\n  let nextLevelXP: number;\n  let progressPercentage: number;\n  \n  if (currentLevel < 10) {\n    // Levels 1-9: Every 200 XP\n    nextLevelXP = currentLevel * 200;\n    progressPercentage = ((currentXP % 200) / 200) * 100;\n  } else if (currentLevel === 10) {\n    // Level 10 special case: 2000 XP for tree completion\n    nextLevelXP = 2000;\n    progressPercentage = (currentXP / 2000) * 100;\n  } else {\n    // Level 11+: Every 300 XP after 2000\n    const excessLevels = currentLevel - 10;\n    nextLevelXP = 2000 + (excessLevels * 300);\n    const currentProgress = currentXP - 2000 - ((currentLevel - 11) * 300);\n    progressPercentage = (currentProgress / 300) * 100;\n  }\n  \n  const todayQuote = dailyQuotes[new Date().getDay()];\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Welcome Section */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <Card className=\"bg-gradient-to-br from-white to-blue-50 dark:from-gray-800 dark:to-blue-900/20 border-2 border-blue-200 dark:border-blue-700 shadow-xl\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center gap-4 mb-2\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-indigo-600 to-purple-600 rounded-lg flex items-center justify-center shadow-lg\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 100 100\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <circle cx=\"50\" cy=\"30\" r=\"15\" fill=\"white\"/>\n                      <circle cx=\"35\" cy=\"60\" r=\"8\" fill=\"white\"/>\n                      <circle cx=\"65\" cy=\"60\" r=\"8\" fill=\"white\"/>\n                      <circle cx=\"50\" cy=\"80\" r=\"6\" fill=\"white\"/>\n                    </svg>\n                  </div>\n                  <h2 className=\"text-3xl font-inter font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n                    Welcome back{user?.username ? `, ${user.username}` : ''}!\n                  </h2>\n                </div>\n                <p className=\"text-gray-600 text-lg mb-6\">\n                  Ready to train your mind today?\n                </p>\n                \n                {/* XP Progress Bar */}\n                <div className=\"mb-6\">\n                  <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n                    <span>Level {currentLevel} - Neural Explorer</span>\n                    <span>{currentXP} / {nextLevelXP} XP</span>\n                  </div>\n                  <Progress value={progressPercentage} className=\"h-3\" />\n                </div>\n\n                {/* Daily Challenge */}\n                <motion.div \n                  className=\"bg-gradient-to-r from-cyan/10 to-blue-500/10 rounded-xl p-6 border-l-4 border-cyan\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <h3 className=\"font-inter font-semibold text-navy mb-2\">\n                    🎯 Today's Challenge\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Complete 2 training sessions to maintain your streak\n                  </p>\n                  <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                    <Button \n                      className=\"bg-gradient-to-r from-indigo-600 to-purple-600 text-white hover:from-indigo-700 hover:to-purple-700 shadow-lg\"\n                      onClick={() => {\n                        // Navigate to training tab\n                        const event = new CustomEvent('navigate', { detail: 'training' });\n                        window.dispatchEvent(event);\n                      }}\n                    >\n                      ⚡ Start Training\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Daily Quote */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n          >\n            <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border-2 border-purple-200 dark:border-purple-700 shadow-xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <motion.div\n                    whileHover={{ rotate: 360 }}\n                    transition={{ duration: 0.5 }}\n                  >\n                    <Quote className=\"text-purple-600\" size={24} />\n                  </motion.div>\n                  <h3 className=\"font-inter font-semibold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n                    ✨ Daily Motivation\n                  </h3>\n                </div>\n                <motion.p \n                  className=\"text-gray-700 dark:text-gray-300 text-lg italic\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.5 }}\n                >\n                  \"{todayQuote}\"\n                </motion.p>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Growth Tree Visualization */}\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.5, delay: 0.4 }}\n          className=\"bg-gradient-to-br from-green-50 via-blue-50 to-purple-50 dark:from-green-900/20 dark:via-blue-900/20 dark:to-purple-900/20 rounded-xl p-6 border-2 border-green-200 dark:border-green-700\"\n        >\n          <div className=\"text-center mb-4\">\n            <h3 className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n              🌳 Your Mind Tree\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n              Watch your growth flourish\n            </p>\n          </div>\n          \n          <GrowthTree \n            xp={currentXP}\n            level={currentLevel}\n            achievements={(user as any)?.achievementCount || 0}\n            className=\"w-full\"\n          />\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8109},"client/src/pages/Journal.tsx":{"content":"import { useState } from \"react\";\nimport { useStaticJournal } from \"@/hooks/useStaticData\";\nimport { useStaticAuth } from \"@/hooks/useStaticAuth\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\nexport default function Journal() {\n  const { toast } = useToast();\n  const { user } = useStaticAuth();\n  const { journalEntries, addJournalEntry } = useStaticJournal();\n  \n  const [focusLevel, setFocusLevel] = useState([7]);\n  const [energyLevel, setEnergyLevel] = useState(\"medium\");\n  const [reflection, setReflection] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!reflection.trim()) {\n      toast({\n        title: \"Incomplete entry\",\n        description: \"Please write a reflection before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (user && !isSubmitting) {\n      setIsSubmitting(true);\n      \n      try {\n        addJournalEntry({\n          focusLevel: focusLevel[0],\n          energyLevel,\n          reflection: reflection.trim(),\n        });\n        \n        setReflection(\"\");\n        setFocusLevel([7]);\n        setEnergyLevel(\"medium\");\n        \n        toast({\n          title: \"Journal entry saved!\",\n          description: \"Thanks for checking in. XP earned!\",\n        });\n      } finally {\n        setIsSubmitting(false);\n      }\n    }\n  };\n\n  const energyLevels = [\n    { value: \"low\", label: \"Low\", icon: \"🔋\" },\n    { value: \"medium\", label: \"Medium\", icon: \"🔋\" },\n    { value: \"high\", label: \"High\", icon: \"🔋\" },\n  ];\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-inter font-bold text-navy mb-2\">\n          Mind Journal\n        </h2>\n        <p className=\"text-gray-600\">\n          Track your thoughts and cognitive wellness\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Daily Check-in */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <Card>\n            <CardContent className=\"p-8\">\n              <h3 className=\"font-inter font-semibold text-navy mb-6\">\n                Daily Check-in\n              </h3>\n              \n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Focus Level Slider */}\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                    How focused do you feel today?\n                  </Label>\n                  <div className=\"px-3\">\n                    <Slider\n                      value={focusLevel}\n                      onValueChange={setFocusLevel}\n                      max={10}\n                      min={1}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-sm text-gray-500 mt-2\">\n                      <span>Scattered</span>\n                      <span className=\"font-medium text-navy\">{focusLevel[0]}/10</span>\n                      <span>Laser-focused</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Energy Level */}\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                    Energy Level\n                  </Label>\n                  <div className=\"flex space-x-2\">\n                    {energyLevels.map((level) => (\n                      <Button\n                        key={level.value}\n                        type=\"button\"\n                        variant={energyLevel === level.value ? \"default\" : \"outline\"}\n                        onClick={() => setEnergyLevel(level.value)}\n                        className={`px-4 py-2 ${\n                          energyLevel === level.value\n                            ? \"bg-cyan text-white border-cyan\"\n                            : \"border-gray-200 text-gray-600 hover:border-cyan hover:text-cyan\"\n                        }`}\n                      >\n                        <span className=\"mr-2\">{level.icon}</span>\n                        {level.label}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Reflection */}\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">\n                    What did today's training make you feel?\n                  </Label>\n                  <Textarea\n                    value={reflection}\n                    onChange={(e) => setReflection(e.target.value)}\n                    placeholder=\"Describe your experience, insights, or any challenges you faced...\"\n                    className=\"resize-none\"\n                    rows={4}\n                  />\n                </div>\n\n                {/* Submit */}\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-navy hover:bg-navy/90\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? \"Saving...\" : \"Save Entry (+5 XP)\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Journal History */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n        >\n          <Card>\n            <CardContent className=\"p-8\">\n              <h3 className=\"font-inter font-semibold text-navy mb-6\">\n                Recent Entries\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {journalEntries?.length ? (\n                  journalEntries.map((entry: any) => (\n                    <div key={entry.id} className=\"border-l-4 border-cyan pl-4 py-3\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <span className=\"text-sm font-medium text-gray-700\">\n                          {new Date(entry.createdAt).toLocaleDateString()}\n                        </span>\n                        <span className=\"text-sm text-gray-500\">\n                          Focus: {entry.focusLevel}/10\n                        </span>\n                      </div>\n                      {entry.reflection && (\n                        <p className=\"text-gray-600 text-sm\">{entry.reflection}</p>\n                      )}\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <p>No journal entries yet.</p>\n                    <p className=\"text-sm mt-2\">Start by filling out your first check-in!</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Mood Trends Placeholder */}\n              <div className=\"mt-8 pt-6 border-t border-gray-200\">\n                <h4 className=\"font-medium text-navy mb-4\">Weekly Focus Trends</h4>\n                <div className=\"h-24 bg-gray-50 rounded-xl flex items-center justify-center\">\n                  <p className=\"text-gray-500 text-sm\">\n                    {journalEntries?.length ? \n                      \"Your focus levels are looking good! Keep it up! 📈\" : \n                      \"Complete a few entries to see your trends\"\n                    }\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7993},"client/src/pages/Landing.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Brain, Gamepad2, TrendingUp, Trophy } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-light-gray to-white\">\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            className=\"mb-8\"\n          >\n            <div className=\"flex items-center justify-center space-x-3 mb-6\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-navy to-cyan rounded-full flex items-center justify-center\">\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z\" fill=\"white\"/>\n                  <path d=\"M8.5 9C8.78 9 9 8.78 9 8.5S8.78 8 8.5 8S8 8.22 8 8.5S8.22 9 8.5 9Z\" fill=\"white\"/>\n                  <path d=\"M15.5 9C15.78 9 16 8.78 16 8.5S15.78 8 15.5 8S15 8.22 15 8.5S15.22 9 15.5 9Z\" fill=\"white\"/>\n                  <path d=\"M12 6.5C10.62 6.5 9.5 7.62 9.5 9H10.5C10.5 8.17 11.17 7.5 12 7.5S13.5 8.17 13.5 9H14.5C14.5 7.62 13.38 6.5 12 6.5Z\" fill=\"white\"/>\n                  <path d=\"M9 11.5C9 12.33 9.67 13 10.5 13H13.5C14.33 13 15 12.33 15 11.5H14C14 11.78 13.78 12 13.5 12H10.5C10.22 12 10 11.78 10 11.5H9Z\" fill=\"white\"/>\n                </svg>\n              </div>\n              <h1 className=\"text-5xl font-inter font-bold text-navy\">Stimuli</h1>\n            </div>\n            <p className=\"text-xl text-gray-600 mb-8\">\n              Train your senses. Grow your mind.\n            </p>\n            <p className=\"text-lg text-gray-500 max-w-2xl mx-auto mb-12\">\n              Professional sensory training designed for neurodivergent minds. \n              Build focus, memory, and cognitive flexibility through scientifically-designed exercises.\n            </p>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            <Button \n              size=\"lg\"\n              className=\"bg-navy hover:bg-navy/90 text-white px-8 py-4 text-lg font-medium\"\n              onClick={() => window.location.href = \"/api/login\"}\n            >\n              Start Your Journey\n            </Button>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n            className=\"text-center mb-16\"\n          >\n            <h2 className=\"text-3xl font-inter font-bold text-navy mb-4\">\n              Why Choose Stimuli?\n            </h2>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Our platform combines neuroscience research with engaging gameplay \n              to create a personalized cognitive training experience.\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.5 }}\n            >\n              <Card className=\"h-full hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                    <Gamepad2 className=\"text-white\" size={24} />\n                  </div>\n                  <h3 className=\"font-inter font-semibold text-navy mb-2\">\n                    Cognitive Games\n                  </h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Scientifically-designed exercises targeting memory, attention, and processing speed.\n                  </p>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.6 }}\n            >\n              <Card className=\"h-full hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-teal-500 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                    <TrendingUp className=\"text-white\" size={24} />\n                  </div>\n                  <h3 className=\"font-inter font-semibold text-navy mb-2\">\n                    Progress Tracking\n                  </h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Watch your cognitive abilities grow with detailed analytics and visual progress trees.\n                  </p>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.7 }}\n            >\n              <Card className=\"h-full hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                    <Trophy className=\"text-white\" size={24} />\n                  </div>\n                  <h3 className=\"font-inter font-semibold text-navy mb-2\">\n                    Achievements\n                  </h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Unlock badges and celebrate milestones as you build consistent training habits.\n                  </p>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.8 }}\n            >\n              <Card className=\"h-full hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan rounded-xl flex items-center justify-center mx-auto mb-4\">\n                    <Brain className=\"text-white\" size={24} />\n                  </div>\n                  <h3 className=\"font-inter font-semibold text-navy mb-2\">\n                    Neurodivergent-Friendly\n                  </h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Designed with accessibility in mind, supporting different learning styles and needs.\n                  </p>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-navy to-cyan\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.9 }}\n          >\n            <h2 className=\"text-3xl font-inter font-bold text-white mb-4\">\n              Ready to Train Your Mind?\n            </h2>\n            <p className=\"text-xl text-white/90 mb-8\">\n              Join thousands of users who are already improving their cognitive abilities.\n            </p>\n            <Button \n              size=\"lg\"\n              variant=\"secondary\"\n              className=\"bg-white text-navy hover:bg-gray-100 px-8 py-4 text-lg font-medium\"\n              onClick={() => window.location.href = \"/api/login\"}\n            >\n              Get Started Today\n            </Button>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":8559},"client/src/pages/Progress.tsx":{"content":"import { useStaticGameProgress } from \"@/hooks/useStaticData\";\nimport { useStaticAuth } from \"@/hooks/useStaticAuth\";\nimport { ProgressChart } from \"@/components/ProgressChart\";\nimport { GrowthTree } from \"@/components/GrowthTree\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\n\nexport default function ProgressPage() {\n  const { user, isLoading } = useStaticAuth();\n  const { gameProgress } = useStaticGameProgress();\n\n  if (isLoading || !user) return null;\n\n  // Transform game progress data for chart\n  const chartData = gameProgress?.slice(0, 10).reverse().map((progress: any, index: number) => ({\n    date: new Date(progress.completedAt).toLocaleDateString(),\n    score: progress.score,\n  })) || [];\n\n  // Default skill levels if no data\n  const defaultSkills = [\n    { skillType: \"memory\", level: 75 },\n    { skillType: \"attention\", level: 82 },\n    { skillType: \"speed\", level: 68 },\n    { skillType: \"pattern\", level: 90 },\n  ];\n\n  const skills = defaultSkills; // Using default skills for static version\n\n  const skillNames = {\n    memory: \"Memory\",\n    attention: \"Attention\", \n    speed: \"Processing Speed\",\n    pattern: \"Pattern Recognition\",\n  };\n\n  const skillColors = {\n    memory: \"bg-blue-500\",\n    attention: \"bg-green-500\",\n    speed: \"bg-yellow-500\", \n    pattern: \"bg-purple-500\",\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-inter font-bold text-navy mb-2\">\n          Your Progress\n        </h2>\n        <p className=\"text-gray-600\">\n          Track your cognitive development over time\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Progress Chart */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"lg:col-span-2\"\n        >\n          <ProgressChart data={chartData} />\n        </motion.div>\n\n        {/* Tree Growth & Stats */}\n        <div className=\"space-y-6\">\n          {/* Tree Progress */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n          >\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-inter font-semibold text-navy mb-4\">\n                  Growth Tree\n                </h3>\n                \n                <GrowthTree \n                  xp={user.xp || 0}\n                  level={user.level || 1}\n                  achievements={3}\n                  className=\"w-full\"\n                />\n                \n                <div className=\"mt-4 space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total XP</span>\n                    <span className=\"font-medium text-navy\">{user.xp || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Level</span>\n                    <span className=\"font-medium text-navy\">Neural Explorer</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Days Active</span>\n                    <span className=\"font-medium text-navy\">{user.streak || 0}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Skill Breakdown */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.4 }}\n          >\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-inter font-semibold text-navy mb-4\">\n                  Skill Breakdown\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  {skills.map((skill: any) => (\n                    <div key={skill.skillType}>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-gray-600\">\n                          {skillNames[skill.skillType as keyof typeof skillNames]}\n                        </span>\n                        <span className=\"font-medium text-navy\">\n                          {Math.round(skill.level)}%\n                        </span>\n                      </div>\n                      <Progress \n                        value={skill.level} \n                        className=\"h-2\"\n                      />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4969},"client/src/pages/Store.tsx":{"content":"import React from 'react';\nimport CoinStore from '@/components/CoinStore';\n\nexport default function Store() {\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <CoinStore />\n    </div>\n  );\n}","size_bytes":208},"client/src/pages/Training.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useStaticGameProgress } from \"@/hooks/useStaticData\";\nimport { useStaticAuth } from \"@/hooks/useStaticAuth\";\nimport { GameCard } from \"@/components/GameCard\";\nimport { GameContainer } from \"@/components/games/GameContainer\";\nimport { ColorEchoGame } from \"@/components/games/ColorEchoGame\";\nimport { ShapeSequenceGame } from \"@/components/games/ShapeSequenceGame\";\nimport { SpotlightGame } from \"@/components/games/SpotlightGame\";\nimport { SynestheticRecallGame } from \"@/components/games/SynestheticRecallGame\";\nimport { MemoryMatrixGame } from \"@/components/games/MemoryMatrixGame\";\nimport { QuickResponseGame } from \"@/components/games/QuickResponseGame\";\nimport { ReactionTimeGame } from \"@/components/games/ReactionTimeGame\";\nimport { NumberSequenceGame } from \"@/components/games/NumberSequenceGame\";\nimport { PatternRecognitionGame } from \"@/components/games/PatternRecognitionGame\";\n// import StroopTestGame from \"@/components/games/StroopTestGame\";\n// import DualNBackGame from \"@/components/games/DualNBackGame\";\n// import VisualAttentionGame from \"@/components/games/VisualAttentionGame\";\nimport { motion } from \"framer-motion\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\nconst games = [\n  // Original Synesthesia Games\n  {\n    gameType: \"color-echo\",\n    name: \"Color Echo\",\n    description: \"Match colors to sounds and strengthen cross-sensory connections.\",\n    skillType: \"Synesthetic Memory\",\n    badge: \"Synesthesia\",\n  },\n  {\n    gameType: \"shape-sequence\",\n    name: \"Shape Sequence\",\n    description: \"Remember and reproduce complex visual patterns.\",\n    skillType: \"Pattern Recognition\",\n    badge: \"Memory\",\n  },\n  {\n    gameType: \"spotlight\",\n    name: \"Spotlight\",\n    description: \"Find the odd one out and improve focused attention.\",\n    skillType: \"Attention Training\",\n    badge: \"Focus\",\n  },\n  {\n    gameType: \"synesthetic-recall\",\n    name: \"Synesthetic Recall\",\n    description: \"Connect words with colors to enhance semantic memory.\",\n    skillType: \"Word-Color Memory\",\n    badge: \"Synesthesia\",\n  },\n  {\n    gameType: \"memory-matrix\",\n    name: \"Memory Matrix\",\n    description: \"Remember and manipulate information in your mind.\",\n    skillType: \"Working Memory\",\n    badge: \"Memory\",\n  },\n  {\n    gameType: \"quick-response\",\n    name: \"Quick Response\",\n    description: \"React quickly to visual stimuli and improve mental speed.\",\n    skillType: \"Processing Speed\",\n    badge: \"Speed\",\n  },\n  \n  // New Scientifically-Backed Games\n  {\n    gameType: \"reaction-time\",\n    name: \"Reaction Time\",\n    description: \"Test and improve your reflexes with scientific precision timing.\",\n    skillType: \"Motor Response\",\n    badge: \"Science-Backed\",\n  },\n  {\n    gameType: \"number-sequence\",\n    name: \"Number Sequence Memory\",\n    description: \"Challenge your working memory with digit span tasks.\",\n    skillType: \"Working Memory\",\n    badge: \"Science-Backed\",\n  },\n  {\n    gameType: \"pattern-recognition\",\n    name: \"Pattern Recognition\",\n    description: \"Develop analytical thinking with complex pattern sequences.\",\n    skillType: \"Logical Reasoning\",\n    badge: \"Science-Backed\",\n  },\n  // {\n  //   gameType: \"stroop-test\",\n  //   name: \"Stroop Test\",\n  //   description: \"Scientific attention control training based on the classic Stroop effect.\",\n  //   skillType: \"Cognitive Flexibility\",\n  //   badge: \"Science-Backed\",\n  // },\n  // {\n  //   gameType: \"dual-n-back\",\n  //   name: \"Dual N-Back\",\n  //   description: \"Proven working memory training that can increase fluid intelligence.\",\n  //   skillType: \"Working Memory\",\n  //   badge: \"IQ Training\",\n  // },\n  // {\n  //   gameType: \"visual-attention\",\n  //   name: \"Visual Attention\",\n  //   description: \"Train your attention networks with this research-based paradigm.\",\n  //   skillType: \"Attention Networks\",\n  //   badge: \"Science-Backed\",\n  // },\n];\n\nexport default function Training() {\n  const { toast } = useToast();\n  const { user, isLoading } = useStaticAuth();\n  const { addGameProgress, gameProgress } = useStaticGameProgress();\n  const [activeGame, setActiveGame] = useState<string | null>(null);\n\n  const handlePlayGame = (gameType: string) => {\n    setActiveGame(gameType);\n  };\n\n  const handleGameComplete = (gameType: string, score: number, timeTaken: number) => {\n    if (user) {\n      addGameProgress({\n        gameType,\n        score,\n        timeTaken,\n        difficulty: 'normal'\n      });\n      \n      toast({\n        title: \"Great job!\",\n        description: \"Your progress has been saved. XP earned!\",\n      });\n    }\n    setActiveGame(null);\n  };\n\n  const handleBackToGames = () => {\n    setActiveGame(null);\n  };\n\n  const renderGame = (gameType: string) => {\n    const game = games.find(g => g.gameType === gameType);\n    if (!game) return null;\n\n    const gameComponents = {\n      'color-echo': ColorEchoGame,\n      'shape-sequence': ShapeSequenceGame,\n      'spotlight': SpotlightGame,\n      'synesthetic-recall': SynestheticRecallGame,\n      'memory-matrix': MemoryMatrixGame,\n      'quick-response': QuickResponseGame,\n      'reaction-time': ReactionTimeGame,\n      'number-sequence': NumberSequenceGame,\n      'pattern-recognition': PatternRecognitionGame,\n      // 'stroop-test': StroopTestGame,\n      // 'dual-n-back': DualNBackGame,\n      // 'visual-attention': VisualAttentionGame,\n    };\n\n    const GameComponent = gameComponents[gameType as keyof typeof gameComponents];\n    if (!GameComponent) return null;\n\n    return (\n      <GameContainer\n        gameType={gameType}\n        name={game.name}\n        onBack={handleBackToGames}\n        onGameComplete={(score, timeTaken) => handleGameComplete(gameType, score, timeTaken)}\n      >\n        <GameComponent onComplete={(score, timeTaken) => {\n          (window as any).completeGame?.(score, timeTaken);\n        }} />\n      </GameContainer>\n    );\n  };\n\n  const getBestScore = (gameType: string) => {\n    if (!gameProgress || !Array.isArray(gameProgress)) return undefined;\n    const gameScores = gameProgress.filter((p: any) => p.gameType === gameType);\n    return gameScores.length > 0 ? Math.max(...gameScores.map((s: any) => s.score)) : undefined;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-8\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded-2xl\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // If a game is active, render the game\n  if (activeGame) {\n    return renderGame(activeGame);\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-inter font-bold text-navy mb-2\">\n          Cognitive Training\n        </h2>\n        <p className=\"text-gray-600\">\n          Challenge your mind with scientifically-designed exercises\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {games.map((game, index) => (\n          <motion.div\n            key={game.gameType}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n          >\n            <GameCard\n              gameType={game.gameType}\n              name={game.name}\n              description={game.description}\n              skillType={game.skillType}\n              bestScore={getBestScore(game.gameType)}\n              onPlay={() => handlePlayGame(game.gameType)}\n            />\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7906},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/games/ColorEchoGame.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Volume2, Play, Pause } from \"lucide-react\";\nimport { NotificationSystem, useNotifications } from \"@/components/NotificationSystem\";\n\ninterface ColorEchoGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n}\n\ninterface ColorSound {\n  color: string;\n  name: string;\n  frequency: number;\n}\n\nconst colorSounds: ColorSound[] = [\n  { color: \"#FF6B6B\", name: \"Red\", frequency: 261.63 }, // C4\n  { color: \"#4ECDC4\", name: \"Teal\", frequency: 293.66 }, // D4\n  { color: \"#45B7D1\", name: \"Blue\", frequency: 329.63 }, // E4\n  { color: \"#96CEB4\", name: \"Green\", frequency: 349.23 }, // F4\n  { color: \"#FFEAA7\", name: \"Yellow\", frequency: 392.00 }, // G4\n  { color: \"#DDA0DD\", name: \"Purple\", frequency: 440.00 }, // A4\n  { color: \"#FFB347\", name: \"Orange\", frequency: 493.88 }, // B4\n  { color: \"#FFB6C1\", name: \"Pink\", frequency: 523.25 }, // C5\n];\n\nexport function ColorEchoGame({ onComplete }: ColorEchoGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'playing' | 'showing' | 'guessing' | 'feedback'>('intro');\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [sequence, setSequence] = useState<ColorSound[]>([]);\n  const [playerSequence, setPlayerSequence] = useState<ColorSound[]>([]);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [currentShowingIndex, setCurrentShowingIndex] = useState(0);\n  const [feedback, setFeedback] = useState<'correct' | 'incorrect' | ''>('');\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [isPlaying, setIsPlaying] = useState(false);\n  \n  const audioContextRef = useRef<AudioContext | null>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const { notifications, removeNotification, showGeneral } = useNotifications();\n\n  useEffect(() => {\n    // Initialize audio context\n    if (typeof window !== 'undefined') {\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n    }\n    \n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            endGame();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [gameState, timeLeft]);\n\n  const playCorrectSound = () => {\n    if (!audioContextRef.current) return;\n    \n    const oscillator = audioContextRef.current.createOscillator();\n    const gainNode = audioContextRef.current.createGain();\n    \n    oscillator.connect(gainNode);\n    gainNode.connect(audioContextRef.current.destination);\n    \n    oscillator.frequency.setValueAtTime(523.25, audioContextRef.current.currentTime); // C5 - cheerful sound\n    oscillator.frequency.setValueAtTime(659.25, audioContextRef.current.currentTime + 0.1); // E5\n    oscillator.type = 'sine';\n    \n    gainNode.gain.setValueAtTime(0.3, audioContextRef.current.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContextRef.current.currentTime + 0.3);\n    \n    oscillator.start();\n    oscillator.stop(audioContextRef.current.currentTime + 0.3);\n  };\n\n  const playIncorrectSound = () => {\n    if (!audioContextRef.current) return;\n    \n    const oscillator = audioContextRef.current.createOscillator();\n    const gainNode = audioContextRef.current.createGain();\n    \n    oscillator.connect(gainNode);\n    gainNode.connect(audioContextRef.current.destination);\n    \n    oscillator.frequency.setValueAtTime(196.00, audioContextRef.current.currentTime); // G3 - lower, somber sound\n    oscillator.type = 'sawtooth';\n    \n    gainNode.gain.setValueAtTime(0.2, audioContextRef.current.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContextRef.current.currentTime + 0.5);\n    \n    oscillator.start();\n    oscillator.stop(audioContextRef.current.currentTime + 0.5);\n  };\n\n  const playSound = async (colorSound: ColorSound) => {\n    if (!audioContextRef.current) return;\n    \n    const oscillator = audioContextRef.current.createOscillator();\n    const gainNode = audioContextRef.current.createGain();\n    \n    oscillator.connect(gainNode);\n    gainNode.connect(audioContextRef.current.destination);\n    \n    oscillator.frequency.value = colorSound.frequency;\n    oscillator.type = 'sine';\n    \n    gainNode.gain.setValueAtTime(0.3, audioContextRef.current.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContextRef.current.currentTime + 0.8);\n    \n    oscillator.start();\n    oscillator.stop(audioContextRef.current.currentTime + 0.8);\n  };\n\n  const generateSequence = () => {\n    const newSequence: ColorSound[] = [];\n    // Start with 2 colors, increase gradually but cap at 6 for better gameplay\n    const sequenceLength = Math.min(2 + Math.floor(currentLevel / 3), 6);\n    \n    for (let i = 0; i < sequenceLength; i++) {\n      const randomColor = colorSounds[Math.floor(Math.random() * colorSounds.length)];\n      newSequence.push(randomColor);\n    }\n    \n    setSequence(newSequence);\n    return newSequence;\n  };\n\n  const startGame = () => {\n    setGameState('playing');\n    setGameStartTime(Date.now());\n    setTimeLeft(30);\n    setScore(0);\n    setStreak(0);\n    setCurrentLevel(1);\n    showSequence();\n  };\n\n  const showSequence = () => {\n    // Clear any existing state\n    setIsPlaying(false);\n    setCurrentShowingIndex(-1);\n    \n    const newSequence = generateSequence();\n    setSequence(newSequence);\n    setGameState('showing');\n    setIsPlaying(true);\n    \n    console.log('Generated color sequence:', newSequence.map((c, i) => `${i}: ${c.color}:${c.frequency}`));\n    \n    let currentIndex = 0;\n    \n    const showNextColor = () => {\n      if (currentIndex < newSequence.length) {\n        setCurrentShowingIndex(currentIndex);\n        playSound(newSequence[currentIndex]);\n        console.log(`Showing color ${currentIndex}: ${newSequence[currentIndex].color}`);\n        \n        setTimeout(() => {\n          currentIndex++;\n          if (currentIndex < newSequence.length) {\n            showNextColor();\n          } else {\n            setTimeout(() => {\n              setGameState('guessing');\n              setIsPlaying(false);\n              setCurrentShowingIndex(-1);\n              console.log('Ready for color guessing. Sequence:', newSequence.map(c => `${c.color}:${c.frequency}`));\n            }, 1500);\n          }\n        }, 1500);\n      }\n    };\n    \n    showNextColor();\n  };\n\n  const handleColorClick = (colorSound: ColorSound) => {\n    if (gameState !== 'guessing') return;\n    \n    // Don't allow clicks beyond sequence length\n    if (playerSequence.length >= sequence.length) {\n      return;\n    }\n    \n    playSound(colorSound);\n    \n    // Get the expected color at the current position\n    const currentPosition = playerSequence.length;\n    const expectedColor = sequence[currentPosition];\n    \n    // Compare the clicked color with the expected color at this position\n    const isCorrect = colorSound.color === expectedColor.color && colorSound.frequency === expectedColor.frequency;\n    \n    console.log('Color click debug:', {\n      currentPosition,\n      clickedColor: colorSound.color,\n      expectedColor: expectedColor.color,\n      clickedFreq: colorSound.frequency,\n      expectedFreq: expectedColor.frequency,\n      isCorrect,\n      fullSequence: sequence.map(c => `${c.color}:${c.frequency}`)\n    });\n    \n    if (isCorrect) {\n      // Add to player sequence\n      const newPlayerSequence = [...playerSequence, colorSound];\n      setPlayerSequence(newPlayerSequence);\n      \n      // Play correct sound effect\n      playCorrectSound();\n      setFeedback('correct');\n      \n      // Check if sequence is complete\n      if (newPlayerSequence.length === sequence.length) {\n        const points = sequence.length * 10 + (streak * 2);\n        setScore(prev => prev + points);\n        setStreak(prev => prev + 1);\n        setCurrentLevel(prev => prev + 1);\n        \n        showGeneral(`🎉 Perfect sequence! +${points} points!`, \"success\");\n        \n        setTimeout(() => {\n          setFeedback('');\n          nextRound();\n        }, 1500);\n      } else {\n        showGeneral(\"✅ Correct!\", \"success\");\n        setTimeout(() => setFeedback(''), 500);\n      }\n    } else {\n      // Wrong color - end round\n      playIncorrectSound();\n      setFeedback('incorrect');\n      setStreak(0);\n      showGeneral(\"❌ Wrong color! Try again.\", \"error\");\n      \n      setTimeout(() => {\n        setFeedback('');\n        if (currentLevel > 1) {\n          setCurrentLevel(prev => prev - 1);\n        }\n        setPlayerSequence([]);\n        nextRound();\n      }, 1500);\n    }\n  };\n\n  const nextRound = () => {\n    setPlayerSequence([]);\n    if (timeLeft > 0) {\n      setTimeout(() => {\n        showSequence();\n      }, 500);\n    } else {\n      endGame();\n    }\n  };\n\n  const endGame = () => {\n    const timeTaken = (Date.now() - gameStartTime) / 1000;\n    onComplete(score, timeTaken);\n  };\n\n  const replaySequence = () => {\n    if (gameState !== 'guessing' || isPlaying) return;\n    \n    setIsPlaying(true);\n    setCurrentShowingIndex(0);\n    \n    sequence.forEach((colorSound, index) => {\n      setTimeout(() => {\n        setCurrentShowingIndex(index);\n        playSound(colorSound);\n        \n        if (index === sequence.length - 1) {\n          setTimeout(() => {\n            setCurrentShowingIndex(-1);\n            setIsPlaying(false);\n          }, 1000);\n        }\n      }, index * 1200);\n    });\n  };\n\n  if (gameState === 'intro') {\n    return (\n      <div className=\"max-w-2xl mx-auto text-center space-y-6\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-4\">\n              <div className=\"text-6xl\">🎵</div>\n              <h2 className=\"text-2xl font-bold\">Color Echo</h2>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Listen to the sequence of color-sounds, then click the colors in the same order. \n                Each color has its own unique musical tone. Can you remember the pattern?\n              </p>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                  <strong>Goal:</strong> Match the sequence perfectly\n                </div>\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                  <strong>Scoring:</strong> Longer sequences = more points\n                </div>\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg\">\n                  <strong>Streak bonus:</strong> +2 points per correct sequence\n                </div>\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg\">\n                  <strong>Time limit:</strong> 30 seconds\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Button\n          onClick={startGame}\n          size=\"lg\"\n          className=\"text-lg px-8 py-6\"\n        >\n          Start Game\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Game Status */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-4\">\n          <Badge variant=\"secondary\">Level {currentLevel}</Badge>\n          <Badge variant=\"outline\">Streak: {streak}</Badge>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Time: {timeLeft}s\n          </div>\n          <Badge className=\"text-lg px-4 py-2\">Score: {score}</Badge>\n        </div>\n      </div>\n\n      {/* Game Instructions */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n              {gameState === 'showing' && \"🎵 Listen to the sequence...\"}\n              {gameState === 'guessing' && \"🎯 Click the colors in the same order\"}\n            </div>\n            {gameState === 'guessing' && (\n              <Button\n                onClick={replaySequence}\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={isPlaying}\n                className=\"flex items-center gap-2\"\n              >\n                <Volume2 className=\"w-4 h-4\" />\n                Replay\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Color Grid */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-4 gap-4\">\n            {colorSounds.map((colorSound, index) => (\n              <motion.button\n                key={colorSound.name}\n                onClick={() => handleColorClick(colorSound)}\n                disabled={gameState !== 'guessing'}\n                className={`\n                  aspect-square rounded-xl border-4 transition-all duration-300\n                  ${gameState === 'guessing' ? 'hover:scale-105 cursor-pointer' : 'cursor-not-allowed'}\n                  ${isPlaying && sequence[currentShowingIndex]?.color === colorSound.color ? 'scale-110 border-white shadow-lg' : 'border-gray-300 dark:border-gray-600'}\n                  ${gameState !== 'guessing' ? 'opacity-70' : ''}\n                `}\n                style={{ backgroundColor: colorSound.color }}\n                whileHover={gameState === 'guessing' ? { scale: 1.05 } : {}}\n                whileTap={gameState === 'guessing' ? { scale: 0.95 } : {}}\n              >\n                <div className=\"text-white font-bold text-sm drop-shadow-lg\">\n                  {colorSound.name}\n                </div>\n              </motion.button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Progress Indicator */}\n      {gameState === 'guessing' && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Progress: {playerSequence.length} / {sequence.length}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Sequence length: {sequence.length}\n              </div>\n            </div>\n            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n              <div \n                className=\"bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${(playerSequence.length / sequence.length) * 100}%` }}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Feedback */}\n      <AnimatePresence>\n        {feedback && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"text-center\"\n          >\n            <Card className={`${feedback === 'correct' ? 'border-green-500' : 'border-red-500'} border-2`}>\n              <CardContent className=\"p-6\">\n                <div className={`text-2xl font-bold ${feedback === 'correct' ? 'text-green-600' : 'text-red-600'}`}>\n                  {feedback === 'correct' ? '🎉 Correct!' : '❌ Incorrect'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                  {feedback === 'correct' ? \n                    `+${sequence.length * 10 + (streak * 2)} points!` : \n                    'Try again! Listen carefully to the sequence.'\n                  }\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <NotificationSystem\n        notifications={notifications}\n        onRemove={removeNotification}\n      />\n    </div>\n  );\n}","size_bytes":16534},"client/src/components/games/DualNBackGame.tsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport GameContainer from './GameContainer';\n\n// Scientifically-backed Dual N-Back for working memory training\nconst GRID_SIZE = 3;\nconst POSITIONS = Array.from({ length: 9 }, (_, i) => i);\nconst SOUNDS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n\ninterface Trial {\n  position: number;\n  sound: string;\n}\n\nexport default function DualNBackGame() {\n  const [nLevel, setNLevel] = useState(2); // Start with 2-back\n  const [currentTrial, setCurrentTrial] = useState(0);\n  const [trials, setTrials] = useState<Trial[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameActive, setGameActive] = useState(false);\n  const [showingStimulus, setShowingStimulus] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(120); // 2 minutes\n  const [userResponses, setUserResponses] = useState<{ position: boolean; sound: boolean }>({ position: false, sound: false });\n\n  const generateTrials = useCallback((count: number): Trial[] => {\n    return Array.from({ length: count }, () => ({\n      position: Math.floor(Math.random() * 9),\n      sound: SOUNDS[Math.floor(Math.random() * SOUNDS.length)]\n    }));\n  }, []);\n\n  const startGame = () => {\n    setGameActive(true);\n    setScore(0);\n    setCurrentTrial(0);\n    setTimeLeft(120);\n    const newTrials = generateTrials(20 + nLevel * 5); // More trials for higher n-back\n    setTrials(newTrials);\n    setShowingStimulus(false);\n    setUserResponses({ position: false, sound: false });\n  };\n\n  const isPositionMatch = (): boolean => {\n    if (currentTrial < nLevel) return false;\n    return trials[currentTrial].position === trials[currentTrial - nLevel].position;\n  };\n\n  const isSoundMatch = (): boolean => {\n    if (currentTrial < nLevel) return false;\n    return trials[currentTrial].sound === trials[currentTrial - nLevel].sound;\n  };\n\n  const nextTrial = useCallback(() => {\n    if (currentTrial >= nLevel) {\n      // Score the responses\n      const posMatch = isPositionMatch();\n      const soundMatch = isSoundMatch();\n      \n      let points = 0;\n      if (userResponses.position === posMatch) points += 1;\n      if (userResponses.sound === soundMatch) points += 1;\n      \n      setScore(prev => prev + points);\n    }\n\n    if (currentTrial + 1 >= trials.length) {\n      setGameActive(false);\n      return;\n    }\n\n    setCurrentTrial(prev => prev + 1);\n    setUserResponses({ position: false, sound: false });\n    setShowingStimulus(true);\n    \n    // Show stimulus for 500ms\n    setTimeout(() => {\n      setShowingStimulus(false);\n    }, 500);\n  }, [currentTrial, trials.length, userResponses, nLevel]);\n\n  useEffect(() => {\n    if (gameActive && trials.length > 0) {\n      // Start first trial\n      if (currentTrial === 0) {\n        setShowingStimulus(true);\n        setTimeout(() => {\n          setShowingStimulus(false);\n        }, 500);\n      }\n\n      // Auto-advance after 3 seconds\n      const timer = setTimeout(nextTrial, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [currentTrial, gameActive, trials.length, nextTrial]);\n\n  useEffect(() => {\n    if (gameActive && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0) {\n      setGameActive(false);\n    }\n  }, [gameActive, timeLeft]);\n\n  const handleResponse = (type: 'position' | 'sound') => {\n    if (!gameActive || currentTrial < nLevel) return;\n    setUserResponses(prev => ({ ...prev, [type]: true }));\n  };\n\n  const maxScore = trials.length > 0 ? Math.max(0, (trials.length - nLevel) * 2) : 0;\n  const accuracy = maxScore > 0 ? Math.round((score / maxScore) * 100) : 0;\n\n  return (\n    <GameContainer\n      title={`Dual ${nLevel}-Back`}\n      description=\"Train your working memory with this scientifically-proven cognitive training task. Track both position and sound patterns!\"\n      score={score}\n      isActive={gameActive}\n      timeLeft={timeLeft}\n      onGameEnd={() => ({\n        gameType: 'dual-n-back',\n        score: accuracy,\n        difficulty: `${nLevel}-back`,\n        timeTaken: 120 - timeLeft,\n      })}\n    >\n      <div className=\"space-y-6\">\n        {!gameActive && timeLeft === 120 ? (\n          <div className=\"text-center space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"block text-sm font-medium\">Difficulty Level:</label>\n              <div className=\"flex gap-2 justify-center\">\n                {[1, 2, 3, 4].map(level => (\n                  <Button\n                    key={level}\n                    onClick={() => setNLevel(level)}\n                    variant={nLevel === level ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    data-testid={`button-level-${level}`}\n                  >\n                    {level}-Back\n                  </Button>\n                ))}\n              </div>\n            </div>\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n              Scientific Benefits: Improves fluid intelligence, working memory, and attention.\n              Research shows 19+ sessions can increase IQ scores.\n            </p>\n            <Button onClick={startGame} size=\"lg\" data-testid=\"button-start-nback\">\n              Start Training\n            </Button>\n          </div>\n        ) : gameActive ? (\n          <div className=\"text-center space-y-6\">\n            <div className=\"flex justify-between text-sm text-gray-500\">\n              <span>Trial {currentTrial + 1} of {trials.length}</span>\n              <span>Score: {score}/{maxScore}</span>\n            </div>\n\n            {trials.length > 0 && (\n              <>\n                {/* 3x3 Grid */}\n                <div className=\"grid grid-cols-3 gap-2 w-48 h-48 mx-auto border-2 border-gray-300 dark:border-gray-700 p-2\">\n                  {POSITIONS.map(pos => (\n                    <div\n                      key={pos}\n                      className={`border border-gray-200 dark:border-gray-600 ${\n                        showingStimulus && trials[currentTrial]?.position === pos\n                          ? 'bg-blue-500'\n                          : 'bg-gray-100 dark:bg-gray-800'\n                      }`}\n                      data-testid={`grid-position-${pos}`}\n                    />\n                  ))}\n                </div>\n\n                {/* Sound Display */}\n                <div className=\"text-4xl font-bold\">\n                  {showingStimulus && trials[currentTrial] ? (\n                    <span className=\"text-green-500\" data-testid=\"text-sound\">\n                      {trials[currentTrial].sound}\n                    </span>\n                  ) : (\n                    <span className=\"text-gray-400\">•</span>\n                  )}\n                </div>\n\n                {/* Response Buttons */}\n                {currentTrial >= nLevel && (\n                  <div className=\"flex gap-4 justify-center\">\n                    <Button\n                      onClick={() => handleResponse('position')}\n                      variant={userResponses.position ? \"default\" : \"outline\"}\n                      data-testid=\"button-position-match\"\n                    >\n                      Position Match\n                    </Button>\n                    <Button\n                      onClick={() => handleResponse('sound')}\n                      variant={userResponses.sound ? \"default\" : \"outline\"}\n                      data-testid=\"button-sound-match\"\n                    >\n                      Sound Match\n                    </Button>\n                  </div>\n                )}\n\n                <p className=\"text-sm text-gray-500\">\n                  {currentTrial < nLevel \n                    ? `Remember the pattern... (${nLevel - currentTrial} more to start)`\n                    : `Is the current stimulus the same as ${nLevel} steps back?`\n                  }\n                </p>\n              </>\n            )}\n          </div>\n        ) : (\n          <div className=\"text-center space-y-4\">\n            <h3 className=\"text-2xl font-bold\">Training Complete!</h3>\n            <div className=\"space-y-2\">\n              <p className=\"text-lg\">Accuracy: {accuracy}%</p>\n              <p className=\"text-lg\">Score: {score}/{maxScore}</p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {accuracy >= 80 \n                  ? `Excellent! Consider trying ${nLevel + 1}-back next time.`\n                  : accuracy >= 60\n                  ? \"Good progress! Keep training to improve.\"\n                  : \"Keep practicing! Working memory improves with consistent training.\"\n                }\n              </p>\n            </div>\n            <Button onClick={startGame} size=\"lg\" data-testid=\"button-restart-nback\">\n              Train Again\n            </Button>\n          </div>\n        )}\n      </div>\n    </GameContainer>\n  );\n}","size_bytes":8926},"client/src/components/games/GameContainer.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Trophy, Zap, Timer, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useStaticGameProgress } from \"@/hooks/useStaticData\";\nimport { NotificationSystem, useNotifications } from \"@/components/NotificationSystem\";\n\ninterface GameContainerProps {\n  gameType: string;\n  name: string;\n  children: React.ReactNode;\n  onBack: () => void;\n  score?: number;\n  timeLeft?: number;\n  totalTime?: number;\n  onGameComplete?: (score: number, timeTaken: number) => void;\n  showTimer?: boolean;\n  showScore?: boolean;\n  showGeneral?: (message: string, type?: \"success\" | \"error\" | \"info\") => void;\n}\n\nexport function GameContainer({\n  gameType,\n  name,\n  children,\n  onBack,\n  score = 0,\n  timeLeft,\n  totalTime,\n  onGameComplete,\n  showTimer = true,\n  showScore = true,\n  showGeneral,\n}: GameContainerProps) {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [finalScore, setFinalScore] = useState(0);\n  const [finalTime, setFinalTime] = useState(0);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const { toast } = useToast();\n  const { addGameProgress } = useStaticGameProgress();\n  const {\n    notifications,\n    removeNotification,\n    showXPGain,\n    showCoinsGained,\n    showCongratulations,\n    showAchievement,\n  } = useNotifications();\n\n  const handleGameProgressSave = async (gameData: { gameType: string; score: number; timeTaken: number }) => {\n    try {\n      const result = addGameProgress(gameData);\n      \n      if (result) {\n        // Calculate rewards based on score and performance\n        const baseXP = 15; // Base XP for completing a game\n        const bonusXP = Math.floor(gameData.score / 50); // Bonus XP based on score\n        const xpEarned = baseXP + bonusXP;\n        const coinsEarned = result.coinsEarned || Math.floor(gameData.score / 10); // Coins based on score\n        \n        // Show advanced animated reward notifications similar to tree growth\n        setTimeout(() => {\n          showXPGain(xpEarned);\n        }, 500);\n        \n        setTimeout(() => {\n          showCoinsGained(coinsEarned);\n        }, 1000);\n        \n        setTimeout(() => {\n          showCongratulations(`Game completed! Well done!`);\n        }, 1500);\n      }\n    } catch (error) {\n      console.error(\"Error saving progress:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save progress. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleGameComplete = (score: number, timeTaken: number) => {\n    setFinalScore(score);\n    setFinalTime(timeTaken);\n    setGameCompleted(true);\n    \n    // Save progress using static data\n    handleGameProgressSave({\n      gameType,\n      score,\n      timeTaken,\n    });\n    \n    onGameComplete?.(score, timeTaken);\n  };\n\n  const getScoreRating = (score: number) => {\n    if (score >= 90) return { text: \"Excellent!\", color: \"text-green-600\", icon: <Trophy className=\"w-5 h-5\" /> };\n    if (score >= 70) return { text: \"Good!\", color: \"text-blue-600\", icon: <Star className=\"w-5 h-5\" /> };\n    if (score >= 50) return { text: \"Not bad!\", color: \"text-yellow-600\", icon: <Zap className=\"w-5 h-5\" /> };\n    return { text: \"Keep practicing!\", color: \"text-gray-600\", icon: <Timer className=\"w-5 h-5\" /> };\n  };\n\n  const rating = getScoreRating(finalScore);\n\n  if (gameCompleted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 p-4\">\n        <div className=\"max-w-2xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.5 }}\n          >\n            <Card className=\"text-center\">\n              <CardHeader className=\"pb-4\">\n                <motion.div\n                  initial={{ y: -20, opacity: 0 }}\n                  animate={{ y: 0, opacity: 1 }}\n                  transition={{ delay: 0.2 }}\n                  className=\"flex justify-center mb-4\"\n                >\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n                    {rating.icon}\n                  </div>\n                </motion.div>\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n                  {name} Complete!\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ delay: 0.4, type: \"spring\", stiffness: 200 }}\n                  className=\"text-center\"\n                >\n                  <div className=\"text-4xl font-bold mb-2\">{finalScore}</div>\n                  <div className={`text-lg font-semibold ${rating.color}`}>\n                    {rating.text}\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.6 }}\n                  className=\"grid grid-cols-3 gap-4\"\n                >\n                  <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Time</div>\n                    <div className=\"text-2xl font-bold\">{Math.round(finalTime)}s</div>\n                  </div>\n                  <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/30 dark:to-pink-900/30 rounded-lg p-4 border border-purple-200 dark:border-purple-700\">\n                    <div className=\"text-sm text-purple-600 dark:text-purple-400\">XP Earned</div>\n                    <div className=\"text-2xl font-bold text-purple-600\">+{15 + Math.floor(finalScore / 50)}</div>\n                  </div>\n                  <div className=\"bg-gradient-to-br from-yellow-50 to-amber-50 dark:from-yellow-900/30 dark:to-amber-900/30 rounded-lg p-4 border border-yellow-200 dark:border-yellow-700\">\n                    <div className=\"text-sm text-yellow-600 dark:text-yellow-400\">Coins Earned</div>\n                    <div className=\"text-2xl font-bold text-yellow-600\">+{Math.floor(finalScore / 10)}</div>\n                  </div>\n                </motion.div>\n\n                {showCelebration && (\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.8 }}\n                    className=\"bg-gradient-to-r from-yellow-100 to-orange-100 dark:from-yellow-900/20 dark:to-orange-900/20 rounded-lg p-4 border-2 border-yellow-300 dark:border-yellow-600\"\n                  >\n                    <div className=\"text-lg font-bold text-yellow-800 dark:text-yellow-200 mb-2\">\n                      🎉 Achievement Unlocked!\n                    </div>\n                    <div className=\"text-yellow-700 dark:text-yellow-300\">\n                      You've earned a new badge! Check your achievements.\n                    </div>\n                  </motion.div>\n                )}\n\n                <div className=\"space-y-3\">\n                  <Button\n                    onClick={() => {\n                      setGameCompleted(false);\n                      setGameStarted(false);\n                      setShowCelebration(false);\n                    }}\n                    className=\"w-full\"\n                    size=\"lg\"\n                  >\n                    Play Again\n                  </Button>\n                  <Button\n                    onClick={onBack}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    size=\"lg\"\n                  >\n                    Back to Games\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button\n            onClick={onBack}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back\n          </Button>\n          \n          <div className=\"flex items-center gap-4\">\n            {showScore && (\n              <Badge variant=\"secondary\" className=\"text-lg px-4 py-2\">\n                Score: {score}\n              </Badge>\n            )}\n            {showTimer && timeLeft !== undefined && totalTime && (\n              <div className=\"flex items-center gap-2\">\n                <Timer className=\"w-4 h-4\" />\n                <div className=\"text-sm font-medium\">\n                  {Math.ceil(timeLeft)}s\n                </div>\n                <Progress \n                  value={(timeLeft / totalTime) * 100} \n                  className=\"w-20\"\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Game Title */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center mb-8\"\n        >\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n            {name}\n          </h1>\n        </motion.div>\n\n        {/* Game Content */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ delay: 0.2 }}\n        >\n          {children}\n        </motion.div>\n\n        {/* Hidden completion handler */}\n        <div style={{ display: 'none' }}>\n          <button onClick={() => handleGameComplete(score, finalTime)} ref={(el) => {\n            if (el) {\n              (window as any).completeGame = (score: number, timeTaken: number) => {\n                handleGameComplete(score, timeTaken);\n              };\n            }\n          }} />\n        </div>\n      </div>\n      \n      {/* Notification System */}\n      <NotificationSystem \n        notifications={notifications}\n        onRemove={removeNotification}\n      />\n    </div>\n  );\n}","size_bytes":10882},"client/src/components/games/MemoryMatrixGame.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface MemoryMatrixGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n}\n\ninterface Cell {\n  row: number;\n  col: number;\n  isActive: boolean;\n  isSelected: boolean;\n}\n\nexport function MemoryMatrixGame({ onComplete }: MemoryMatrixGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'showing' | 'playing' | 'feedback'>('intro');\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [gridSize, setGridSize] = useState(3);\n  const [cells, setCells] = useState<Cell[]>([]);\n  const [activeCells, setActiveCells] = useState<Cell[]>([]);\n  const [selectedCells, setSelectedCells] = useState<Cell[]>([]);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [feedback, setFeedback] = useState<'correct' | 'incorrect' | ''>('');\n  const [timeLeft, setTimeLeft] = useState(50);\n  const [showTimeLeft, setShowTimeLeft] = useState(3);\n  \n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const showTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            endGame();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [gameState, timeLeft]);\n\n  useEffect(() => {\n    if (gameState === 'showing' && showTimeLeft > 0) {\n      showTimerRef.current = setInterval(() => {\n        setShowTimeLeft(prev => {\n          if (prev <= 1) {\n            startPlaying();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (showTimerRef.current) {\n      clearInterval(showTimerRef.current);\n    }\n\n    return () => {\n      if (showTimerRef.current) {\n        clearInterval(showTimerRef.current);\n      }\n    };\n  }, [gameState, showTimeLeft]);\n\n  const generateGrid = () => {\n    const size = Math.min(3 + Math.floor(currentLevel / 3), 6);\n    setGridSize(size);\n    \n    const newCells: Cell[] = [];\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        newCells.push({\n          row,\n          col,\n          isActive: false,\n          isSelected: false,\n        });\n      }\n    }\n    \n    // Randomly select cells to be active\n    const numActive = Math.min(3 + Math.floor(currentLevel / 2), Math.floor(size * size / 2));\n    const shuffled = [...newCells].sort(() => Math.random() - 0.5);\n    const active = shuffled.slice(0, numActive);\n    \n    active.forEach(cell => {\n      cell.isActive = true;\n    });\n    \n    setCells(newCells);\n    setActiveCells(active);\n    setSelectedCells([]);\n  };\n\n  const startGame = () => {\n    setGameState('showing');\n    setGameStartTime(Date.now());\n    setTimeLeft(50);\n    setScore(0);\n    setStreak(0);\n    setCurrentLevel(1);\n    setShowTimeLeft(3);\n    generateGrid();\n  };\n\n  const startPlaying = () => {\n    setGameState('playing');\n    // Hide the active cells\n    setCells(prev => prev.map(cell => ({ ...cell, isActive: false })));\n  };\n\n  const handleCellClick = (clickedCell: Cell) => {\n    if (gameState !== 'playing') return;\n    \n    const newSelectedCells = [...selectedCells];\n    const existingIndex = newSelectedCells.findIndex(\n      cell => cell.row === clickedCell.row && cell.col === clickedCell.col\n    );\n    \n    if (existingIndex >= 0) {\n      // Deselect cell\n      newSelectedCells.splice(existingIndex, 1);\n    } else {\n      // Select cell\n      newSelectedCells.push(clickedCell);\n    }\n    \n    setSelectedCells(newSelectedCells);\n    \n    // Update cells display\n    setCells(prev => prev.map(cell => ({\n      ...cell,\n      isSelected: newSelectedCells.some(\n        selected => selected.row === cell.row && selected.col === cell.col\n      )\n    })));\n  };\n\n  const checkAnswer = () => {\n    const isCorrect = \n      selectedCells.length === activeCells.length &&\n      selectedCells.every(selected => \n        activeCells.some(active => \n          active.row === selected.row && active.col === selected.col\n        )\n      );\n    \n    if (isCorrect) {\n      setFeedback('correct');\n      const basePoints = 30 + (currentLevel * 8);\n      const accuracyBonus = Math.floor((selectedCells.length / activeCells.length) * 20);\n      const streakBonus = streak * 5;\n      const totalPoints = basePoints + accuracyBonus + streakBonus;\n      \n      setScore(prev => prev + totalPoints);\n      setStreak(prev => prev + 1);\n      setCurrentLevel(prev => prev + 1);\n      \n      setTimeout(() => {\n        setFeedback('');\n        if (timeLeft > 0) {\n          setShowTimeLeft(3);\n          generateGrid();\n          setGameState('showing');\n        } else {\n          endGame();\n        }\n      }, 1500);\n    } else {\n      setFeedback('incorrect');\n      setStreak(0);\n      \n      setTimeout(() => {\n        setFeedback('');\n        if (timeLeft > 0) {\n          setShowTimeLeft(3);\n          generateGrid();\n          setGameState('showing');\n        } else {\n          endGame();\n        }\n      }, 1500);\n    }\n  };\n\n  const endGame = () => {\n    const timeTaken = (Date.now() - gameStartTime) / 1000;\n    onComplete(score, timeTaken);\n  };\n\n  if (gameState === 'intro') {\n    return (\n      <div className=\"max-w-2xl mx-auto text-center space-y-6\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-4\">\n              <div className=\"text-6xl\">🧠</div>\n              <h2 className=\"text-2xl font-bold\">Memory Matrix</h2>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Study the pattern of highlighted cells, then recreate it from memory. \n                Train your spatial working memory and pattern recognition skills!\n              </p>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                  <strong>Study Phase:</strong> 3 seconds to memorize pattern\n                </div>\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                  <strong>Scoring:</strong> 30+ points per correct pattern\n                </div>\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg\">\n                  <strong>Streak bonus:</strong> +5 points per consecutive success\n                </div>\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg\">\n                  <strong>Difficulty:</strong> Grid size increases with level\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Button\n          onClick={startGame}\n          size=\"lg\"\n          className=\"text-lg px-8 py-6\"\n        >\n          Start Game\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Game Status */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-4\">\n          <Badge variant=\"secondary\">Level {currentLevel}</Badge>\n          <Badge variant=\"outline\">Streak: {streak}</Badge>\n          <Badge variant=\"outline\">Grid: {gridSize}x{gridSize}</Badge>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          {gameState === 'showing' && (\n            <Badge variant=\"destructive\">Study: {showTimeLeft}s</Badge>\n          )}\n          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Time: {timeLeft}s\n          </div>\n          <Badge className=\"text-lg px-4 py-2\">Score: {score}</Badge>\n        </div>\n      </div>\n\n      {/* Game Instructions */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"text-center text-sm text-gray-600 dark:text-gray-300\">\n            {gameState === 'showing' && \"📚 Study the pattern - remember which cells are highlighted\"}\n            {gameState === 'playing' && \"🎯 Click the cells that were highlighted\"}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Game Grid */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex justify-center\">\n            <div \n              className=\"grid gap-2 max-w-md\"\n              style={{ \n                gridTemplateColumns: `repeat(${gridSize}, 1fr)`,\n                gridTemplateRows: `repeat(${gridSize}, 1fr)`,\n              }}\n            >\n              {cells.map((cell, index) => (\n                <motion.button\n                  key={index}\n                  onClick={() => handleCellClick(cell)}\n                  disabled={gameState !== 'playing'}\n                  className={`\n                    w-16 h-16 border-2 rounded-lg transition-all duration-200\n                    ${gameState === 'playing' ? 'hover:scale-105 cursor-pointer' : 'cursor-not-allowed'}\n                    ${cell.isActive && gameState === 'showing' ? 'bg-blue-500 border-blue-600' : ''}\n                    ${cell.isSelected && gameState === 'playing' ? 'bg-green-500 border-green-600' : ''}\n                    ${!cell.isActive && !cell.isSelected ? 'bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600' : ''}\n                  `}\n                  whileHover={gameState === 'playing' ? { scale: 1.05 } : {}}\n                  whileTap={gameState === 'playing' ? { scale: 0.95 } : {}}\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.05 }}\n                />\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Submit Button */}\n      {gameState === 'playing' && (\n        <div className=\"text-center\">\n          <Button\n            onClick={checkAnswer}\n            size=\"lg\"\n            className=\"text-lg px-8 py-4\"\n          >\n            Submit Answer ({selectedCells.length}/{activeCells.length})\n          </Button>\n        </div>\n      )}\n\n      {/* Feedback */}\n      <AnimatePresence>\n        {feedback && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"text-center\"\n          >\n            <Card className={`${feedback === 'correct' ? 'border-green-500' : 'border-red-500'} border-2`}>\n              <CardContent className=\"p-6\">\n                <div className={`text-2xl font-bold ${feedback === 'correct' ? 'text-green-600' : 'text-red-600'}`}>\n                  {feedback === 'correct' ? '🎉 Perfect!' : '❌ Incorrect'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                  {feedback === 'correct' ? \n                    `Excellent memory! Pattern ${currentLevel} mastered.` : \n                    'Study the pattern more carefully next time!'\n                  }\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":11559},"client/src/components/games/NumberSequenceGame.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Brain, Hash, CheckCircle, XCircle } from 'lucide-react';\n\ninterface NumberSequenceGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n}\n\nexport function NumberSequenceGame({ onComplete }: NumberSequenceGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'showing' | 'input' | 'feedback' | 'complete'>('intro');\n  const [level, setLevel] = useState(1);\n  const [sequence, setSequence] = useState<number[]>([]);\n  const [userInput, setUserInput] = useState<number[]>([]);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showingIndex, setShowingIndex] = useState(0);\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);\n  const [streak, setStreak] = useState(0);\n\n  const maxLevels = 8;\n  const baseSequenceLength = 3;\n\n  const generateSequence = (length: number) => {\n    return Array.from({ length }, () => Math.floor(Math.random() * 9) + 1);\n  };\n\n  const startLevel = () => {\n    const sequenceLength = baseSequenceLength + level - 1;\n    const newSequence = generateSequence(sequenceLength);\n    setSequence(newSequence);\n    setUserInput([]);\n    setIsCorrect(null);\n    setShowingIndex(0);\n    setGameState('showing');\n    \n    // Show sequence with timing\n    showSequence(newSequence);\n  };\n\n  const showSequence = (seq: number[]) => {\n    let index = 0;\n    const showNext = () => {\n      if (index < seq.length) {\n        setShowingIndex(index);\n        index++;\n        setTimeout(showNext, 800); // Show each number for 800ms\n      } else {\n        setTimeout(() => {\n          setGameState('input');\n        }, 500);\n      }\n    };\n    showNext();\n  };\n\n  const handleNumberClick = (num: number) => {\n    if (gameState !== 'input') return;\n    \n    const newInput = [...userInput, num];\n    setUserInput(newInput);\n    \n    // Check if sequence is complete\n    if (newInput.length === sequence.length) {\n      const correct = newInput.every((num, index) => num === sequence[index]);\n      setIsCorrect(correct);\n      \n      if (correct) {\n        const levelScore = (level * 10) + (streak * 5);\n        setScore(prev => prev + levelScore);\n        setStreak(prev => prev + 1);\n        \n        if (level >= maxLevels) {\n          setTimeout(() => {\n            const totalTime = (Date.now() - gameStartTime) / 1000;\n            onComplete(score + levelScore, totalTime);\n            setGameState('complete');\n          }, 1500);\n        } else {\n          setTimeout(() => {\n            setLevel(prev => prev + 1);\n            startLevel();\n          }, 1500);\n        }\n      } else {\n        setStreak(0);\n        setTimeout(() => {\n          const totalTime = (Date.now() - gameStartTime) / 1000;\n          onComplete(score, totalTime);\n          setGameState('complete');\n        }, 1500);\n      }\n      setGameState('feedback');\n    }\n  };\n\n  const clearInput = () => {\n    setUserInput([]);\n  };\n\n  useEffect(() => {\n    if (gameState === 'showing' && showingIndex < sequence.length) {\n      // This effect handles the visual feedback during sequence showing\n    }\n  }, [gameState, showingIndex, sequence.length]);\n\n  if (gameState === 'intro') {\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center space-y-6\"\n      >\n        <div className=\"text-6xl mb-4\">🧮</div>\n        <h2 className=\"text-2xl font-bold mb-4\">Number Sequence Memory</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto\">\n          Watch the sequence of numbers, then reproduce it in the correct order. \n          Each level adds one more number. How far can you go?\n        </p>\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-6\">\n          <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n            <strong>Tip:</strong> Use chunking - group numbers into smaller sets to remember better!\n          </p>\n        </div>\n        <Button \n          onClick={() => {\n            setGameStartTime(Date.now());\n            startLevel();\n          }} \n          size=\"lg\" \n          data-testid=\"button-start\"\n        >\n          <Brain className=\"h-5 w-5 mr-2\" />\n          Start Memory Test\n        </Button>\n      </motion.div>\n    );\n  }\n\n  if (gameState === 'complete') {\n    const avgLevelReached = level + (isCorrect ? 0 : -1);\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"text-center space-y-6\"\n      >\n        <div className=\"text-6xl mb-4\">{avgLevelReached >= 5 ? '🧠' : avgLevelReached >= 3 ? '👍' : '💪'}</div>\n        <h2 className=\"text-2xl font-bold mb-4\">Memory Test Complete!</h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <Hash className=\"h-8 w-8 mx-auto text-blue-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{avgLevelReached}</div>\n              <div className=\"text-sm text-gray-600\">Levels Reached</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <Brain className=\"h-8 w-8 mx-auto text-purple-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{baseSequenceLength + avgLevelReached - 1}</div>\n              <div className=\"text-sm text-gray-600\">Max Sequence</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <CheckCircle className=\"h-8 w-8 mx-auto text-green-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{score}</div>\n              <div className=\"text-sm text-gray-600\">Final Score</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-lg font-semibold\">\n          {avgLevelReached >= 6 ? 'Exceptional memory!' : \n           avgLevelReached >= 4 ? 'Great performance!' : \n           'Good effort! Practice improves memory.'}\n        </div>\n        \n        <div className=\"text-sm text-gray-500 space-y-1\">\n          <p><strong>Did you know?</strong> The average person can remember 7±2 items</p>\n          <p>You reached {baseSequenceLength + avgLevelReached - 1} numbers!</p>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return (\n    <div className=\"text-center space-y-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <Badge variant=\"secondary\">Level {level}/{maxLevels}</Badge>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-gray-500\">Score:</span>\n          <span className=\"font-bold\">{score}</span>\n        </div>\n      </div>\n\n      <Progress value={level / maxLevels * 100} className=\"w-full mb-6\" />\n\n      <AnimatePresence mode=\"wait\">\n        {gameState === 'showing' && (\n          <motion.div\n            key=\"showing\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"text-lg font-semibold\">Memorize this sequence:</div>\n            <div className=\"flex justify-center space-x-2\">\n              {sequence.map((num, index) => (\n                <motion.div\n                  key={index}\n                  className={`w-16 h-16 rounded-lg flex items-center justify-center text-xl font-bold ${\n                    index === showingIndex \n                      ? 'bg-blue-500 text-white' \n                      : index < showingIndex \n                        ? 'bg-blue-100 dark:bg-blue-900 text-blue-600' \n                        : 'bg-gray-100 dark:bg-gray-800 text-gray-400'\n                  }`}\n                  animate={index === showingIndex ? { scale: [1, 1.2, 1] } : {}}\n                  transition={{ duration: 0.3 }}\n                >\n                  {index <= showingIndex ? num : '?'}\n                </motion.div>\n              ))}\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              Length: {sequence.length} numbers\n            </div>\n          </motion.div>\n        )}\n\n        {gameState === 'input' && (\n          <motion.div\n            key=\"input\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"text-lg font-semibold\">Enter the sequence:</div>\n            \n            <div className=\"flex justify-center space-x-2 mb-4\">\n              {sequence.map((_, index) => (\n                <div\n                  key={index}\n                  className={`w-16 h-16 rounded-lg flex items-center justify-center text-xl font-bold border-2 ${\n                    index < userInput.length\n                      ? 'bg-green-100 dark:bg-green-900 border-green-300 text-green-700'\n                      : 'bg-gray-50 dark:bg-gray-900 border-gray-300 text-gray-400'\n                  }`}\n                >\n                  {index < userInput.length ? userInput[index] : '?'}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-3 max-w-xs mx-auto\">\n              {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (\n                <Button\n                  key={num}\n                  onClick={() => handleNumberClick(num)}\n                  variant=\"outline\"\n                  className=\"h-12 text-lg font-bold\"\n                  disabled={userInput.length >= sequence.length}\n                  data-testid={`number-${num}`}\n                >\n                  {num}\n                </Button>\n              ))}\n            </div>\n\n            <div className=\"flex justify-center gap-2 mt-4\">\n              <Button onClick={clearInput} variant=\"outline\" size=\"sm\" data-testid=\"button-clear\">\n                Clear\n              </Button>\n            </div>\n\n            <div className=\"text-sm text-gray-500\">\n              {userInput.length}/{sequence.length} entered\n            </div>\n          </motion.div>\n        )}\n\n        {gameState === 'feedback' && (\n          <motion.div\n            key=\"feedback\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"text-6xl\">\n              {isCorrect ? '✅' : '❌'}\n            </div>\n            <div className={`text-2xl font-bold ${isCorrect ? 'text-green-600' : 'text-red-600'}`}>\n              {isCorrect ? 'Correct!' : 'Incorrect!'}\n            </div>\n            \n            <div className=\"flex justify-center space-x-2\">\n              {sequence.map((num, index) => (\n                <div\n                  key={index}\n                  className={`w-12 h-12 rounded flex items-center justify-center text-sm font-bold ${\n                    userInput[index] === num\n                      ? 'bg-green-100 dark:bg-green-900 text-green-700'\n                      : 'bg-red-100 dark:bg-red-900 text-red-700'\n                  }`}\n                >\n                  <div className=\"text-center\">\n                    <div>{num}</div>\n                    {userInput[index] !== undefined && userInput[index] !== num && (\n                      <div className=\"text-xs opacity-70\">{userInput[index]}</div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {isCorrect && level < maxLevels && (\n              <div className=\"text-sm text-green-600\">\n                Moving to Level {level + 1}! (+{level * 10 + streak * 5} points)\n              </div>\n            )}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":12078},"client/src/components/games/PatternRecognitionGame.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Eye, Puzzle, CheckCircle, XCircle } from 'lucide-react';\n\ninterface PatternRecognitionGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n}\n\ntype PatternType = 'color' | 'shape' | 'size' | 'position';\n\ninterface PatternElement {\n  color: string;\n  shape: string;\n  size: 'small' | 'medium' | 'large';\n  position: number;\n}\n\nexport function PatternRecognitionGame({ onComplete }: PatternRecognitionGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'showing' | 'question' | 'feedback' | 'complete'>('intro');\n  const [level, setLevel] = useState(1);\n  const [pattern, setPattern] = useState<PatternElement[]>([]);\n  const [options, setOptions] = useState<PatternElement[]>([]);\n  const [correctAnswer, setCorrectAnswer] = useState(0);\n  const [userAnswer, setUserAnswer] = useState<number | null>(null);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);\n\n  const maxLevels = 10;\n  const colors = ['#EF4444', '#F59E0B', '#10B981', '#3B82F6', '#8B5CF6', '#EC4899'];\n  const shapes = ['●', '■', '▲', '♦', '★', '♠'];\n  const sizes = ['small', 'medium', 'large'] as const;\n\n  const generatePatternElement = (): PatternElement => ({\n    color: colors[Math.floor(Math.random() * colors.length)],\n    shape: shapes[Math.floor(Math.random() * shapes.length)],\n    size: sizes[Math.floor(Math.random() * sizes.length)],\n    position: Math.floor(Math.random() * 4)\n  });\n\n  const generatePattern = (length: number): PatternElement[] => {\n    return Array.from({ length }, generatePatternElement);\n  };\n\n  const getPatternRule = (pattern: PatternElement[]): { type: PatternType; rule: string } => {\n    // Analyze the pattern to find the rule\n    if (pattern.length < 3) {\n      return { type: 'color', rule: 'color sequence' };\n    }\n\n    // Check for color patterns\n    const colorPattern = pattern.every((el, i) => i === 0 || el.color !== pattern[i - 1].color);\n    if (colorPattern && pattern.length >= 3) {\n      return { type: 'color', rule: 'alternating colors' };\n    }\n\n    // Check for shape patterns\n    const shapePattern = pattern.every((el, i) => i === 0 || el.shape !== pattern[i - 1].shape);\n    if (shapePattern && pattern.length >= 3) {\n      return { type: 'shape', rule: 'alternating shapes' };\n    }\n\n    // Check for size patterns\n    const sizeIncreasing = pattern.every((el, i) => {\n      if (i === 0) return true;\n      const prevSize = sizes.indexOf(pattern[i - 1].size);\n      const currentSize = sizes.indexOf(el.size);\n      return currentSize >= prevSize;\n    });\n    \n    if (sizeIncreasing) {\n      return { type: 'size', rule: 'increasing size' };\n    }\n\n    // Default to position pattern\n    return { type: 'position', rule: 'position sequence' };\n  };\n\n  const generateNextElement = (pattern: PatternElement[], rule: { type: PatternType; rule: string }): PatternElement => {\n    const lastElement = pattern[pattern.length - 1];\n    const secondLastElement = pattern[pattern.length - 2];\n\n    switch (rule.type) {\n      case 'color':\n        if (rule.rule === 'alternating colors' && secondLastElement) {\n          // Continue alternating pattern\n          const availableColors = colors.filter(c => c !== lastElement.color);\n          return {\n            ...lastElement,\n            color: availableColors[Math.floor(Math.random() * availableColors.length)]\n          };\n        }\n        break;\n      \n      case 'shape':\n        if (rule.rule === 'alternating shapes' && secondLastElement) {\n          const availableShapes = shapes.filter(s => s !== lastElement.shape);\n          return {\n            ...lastElement,\n            shape: availableShapes[Math.floor(Math.random() * availableShapes.length)]\n          };\n        }\n        break;\n      \n      case 'size':\n        if (rule.rule === 'increasing size') {\n          const currentSizeIndex = sizes.indexOf(lastElement.size);\n          const nextSizeIndex = Math.min(currentSizeIndex + 1, sizes.length - 1);\n          return {\n            ...lastElement,\n            size: sizes[nextSizeIndex]\n          };\n        }\n        break;\n      \n      case 'position':\n        return {\n          ...lastElement,\n          position: (lastElement.position + 1) % 4\n        };\n    }\n\n    return generatePatternElement();\n  };\n\n  const startLevel = () => {\n    const patternLength = Math.min(3 + Math.floor(level / 2), 6);\n    const newPattern = generatePattern(patternLength);\n    const rule = getPatternRule(newPattern);\n    const nextElement = generateNextElement(newPattern, rule);\n    \n    // Generate options including the correct answer\n    const wrongOptions = Array.from({ length: 3 }, generatePatternElement);\n    const allOptions = [nextElement, ...wrongOptions].sort(() => Math.random() - 0.5);\n    const correctIndex = allOptions.indexOf(nextElement);\n    \n    setPattern(newPattern);\n    setOptions(allOptions);\n    setCorrectAnswer(correctIndex);\n    setUserAnswer(null);\n    setIsCorrect(null);\n    setGameState('showing');\n    \n    // Show pattern for a few seconds\n    setTimeout(() => {\n      setGameState('question');\n    }, 2000 + patternLength * 500);\n  };\n\n  const handleAnswerClick = (answerIndex: number) => {\n    if (gameState !== 'question') return;\n    \n    setUserAnswer(answerIndex);\n    const correct = answerIndex === correctAnswer;\n    setIsCorrect(correct);\n    \n    if (correct) {\n      const levelScore = level * 15 + streak * 5;\n      setScore(prev => prev + levelScore);\n      setStreak(prev => prev + 1);\n    } else {\n      setStreak(0);\n    }\n    \n    setGameState('feedback');\n    \n    setTimeout(() => {\n      if (correct && level < maxLevels) {\n        setLevel(prev => prev + 1);\n        startLevel();\n      } else {\n        const totalTime = (Date.now() - gameStartTime) / 1000;\n        onComplete(score + (correct ? level * 15 + streak * 5 : 0), totalTime);\n        setGameState('complete');\n      }\n    }, 2000);\n  };\n\n  const renderElement = (element: PatternElement, index: number, isOption = false) => {\n    const sizeClasses = {\n      small: 'text-lg',\n      medium: 'text-2xl',\n      large: 'text-4xl'\n    };\n\n    return (\n      <motion.div\n        key={index}\n        className={`flex items-center justify-center w-16 h-16 rounded-lg border-2 ${\n          isOption ? 'cursor-pointer hover:border-blue-400 border-gray-300' : 'border-blue-300'\n        }`}\n        style={{ backgroundColor: isOption ? '#f8f9fa' : undefined }}\n        whileHover={isOption ? { scale: 1.05 } : undefined}\n        whileTap={isOption ? { scale: 0.95 } : undefined}\n        onClick={isOption ? () => handleAnswerClick(index) : undefined}\n        data-testid={isOption ? `option-${index}` : undefined}\n      >\n        <div\n          className={`${sizeClasses[element.size]} font-bold`}\n          style={{ color: element.color }}\n        >\n          {element.shape}\n        </div>\n      </motion.div>\n    );\n  };\n\n  if (gameState === 'intro') {\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center space-y-6\"\n      >\n        <div className=\"text-6xl mb-4\">🧩</div>\n        <h2 className=\"text-2xl font-bold mb-4\">Pattern Recognition</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto\">\n          Study the pattern sequence and identify what comes next. \n          Look for patterns in color, shape, size, or position.\n        </p>\n        <div className=\"bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg mb-6\">\n          <p className=\"text-sm text-purple-800 dark:text-purple-200\">\n            <strong>Strategy:</strong> Look for repeating patterns, sequences, or logical progressions.\n          </p>\n        </div>\n        <Button \n          onClick={() => {\n            setGameStartTime(Date.now());\n            startLevel();\n          }} \n          size=\"lg\" \n          data-testid=\"button-start\"\n        >\n          <Eye className=\"h-5 w-5 mr-2\" />\n          Start Pattern Test\n        </Button>\n      </motion.div>\n    );\n  }\n\n  if (gameState === 'complete') {\n    const levelReached = level + (isCorrect ? 0 : -1);\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"text-center space-y-6\"\n      >\n        <div className=\"text-6xl mb-4\">{levelReached >= 7 ? '🎯' : levelReached >= 4 ? '👀' : '🧩'}</div>\n        <h2 className=\"text-2xl font-bold mb-4\">Pattern Test Complete!</h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <Puzzle className=\"h-8 w-8 mx-auto text-purple-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{levelReached}</div>\n              <div className=\"text-sm text-gray-600\">Levels Reached</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <Eye className=\"h-8 w-8 mx-auto text-blue-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{streak}</div>\n              <div className=\"text-sm text-gray-600\">Best Streak</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <CheckCircle className=\"h-8 w-8 mx-auto text-green-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{score}</div>\n              <div className=\"text-sm text-gray-600\">Total Score</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-lg font-semibold\">\n          {levelReached >= 8 ? 'Outstanding pattern recognition!' : \n           levelReached >= 5 ? 'Great analytical skills!' : \n           'Good effort! Pattern skills improve with practice.'}\n        </div>\n        \n        <div className=\"text-sm text-gray-500 space-y-1\">\n          <p><strong>Brain fact:</strong> Pattern recognition is key to intelligence</p>\n          <p>You mastered {levelReached} different pattern types!</p>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return (\n    <div className=\"text-center space-y-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <Badge variant=\"secondary\">Level {level}/{maxLevels}</Badge>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm text-gray-500\">Streak:</span>\n            <span className=\"font-bold text-purple-600\">{streak}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm text-gray-500\">Score:</span>\n            <span className=\"font-bold\">{score}</span>\n          </div>\n        </div>\n      </div>\n\n      <Progress value={level / maxLevels * 100} className=\"w-full mb-6\" />\n\n      <AnimatePresence mode=\"wait\">\n        {gameState === 'showing' && (\n          <motion.div\n            key=\"showing\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"space-y-6\"\n          >\n            <div className=\"text-lg font-semibold\">Study this pattern:</div>\n            <div className=\"flex justify-center space-x-4\">\n              {pattern.map((element, index) => renderElement(element, index))}\n              <div className=\"flex items-center justify-center w-16 h-16 rounded-lg border-2 border-dashed border-gray-400\">\n                <span className=\"text-2xl text-gray-400\">?</span>\n              </div>\n            </div>\n            <div className=\"text-sm text-blue-600\">\n              Look for patterns in color, shape, size, or sequence...\n            </div>\n          </motion.div>\n        )}\n\n        {gameState === 'question' && (\n          <motion.div\n            key=\"question\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-6\"\n          >\n            <div className=\"text-lg font-semibold\">What comes next in the pattern?</div>\n            \n            <div className=\"flex justify-center space-x-4 mb-8\">\n              {pattern.map((element, index) => renderElement(element, index))}\n              <div className=\"flex items-center justify-center w-16 h-16 rounded-lg border-2 border-dashed border-blue-400 bg-blue-50 dark:bg-blue-900/20\">\n                <span className=\"text-2xl text-blue-500\">?</span>\n              </div>\n            </div>\n\n            <div className=\"text-md font-medium mb-4\">Choose the correct answer:</div>\n            <div className=\"flex justify-center space-x-4\">\n              {options.map((option, index) => renderElement(option, index, true))}\n            </div>\n          </motion.div>\n        )}\n\n        {gameState === 'feedback' && (\n          <motion.div\n            key=\"feedback\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"text-6xl\">\n              {isCorrect ? '✅' : '❌'}\n            </div>\n            <div className={`text-2xl font-bold ${isCorrect ? 'text-green-600' : 'text-red-600'}`}>\n              {isCorrect ? 'Correct!' : 'Incorrect!'}\n            </div>\n            \n            <div className=\"flex justify-center space-x-4\">\n              {pattern.map((element, index) => renderElement(element, index))}\n              <div className=\"flex items-center justify-center w-16 h-16 rounded-lg border-2 border-green-400 bg-green-100 dark:bg-green-900\">\n                {renderElement(options[correctAnswer], 0).props.children}\n              </div>\n            </div>\n\n            {isCorrect && level < maxLevels && (\n              <div className=\"text-sm text-green-600\">\n                Great pattern recognition! (+{level * 15 + streak * 5} points)\n              </div>\n            )}\n\n            {!isCorrect && (\n              <div className=\"text-sm text-gray-600\">\n                The correct answer was option {correctAnswer + 1}\n              </div>\n            )}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":14589},"client/src/components/games/QuickResponseGame.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from \"lucide-react\";\nimport { NotificationSystem, useNotifications } from \"@/components/NotificationSystem\";\n\ninterface QuickResponseGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n}\n\ninterface Challenge {\n  type: 'direction' | 'color' | 'word' | 'shape';\n  stimulus: string;\n  correctAnswer: string;\n  options: string[];\n  color?: string;\n}\n\nconst directions = [\n  { name: 'up', icon: <ArrowUp className=\"w-8 h-8\" />, key: 'ArrowUp' },\n  { name: 'down', icon: <ArrowDown className=\"w-8 h-8\" />, key: 'ArrowDown' },\n  { name: 'left', icon: <ArrowLeft className=\"w-8 h-8\" />, key: 'ArrowLeft' },\n  { name: 'right', icon: <ArrowRight className=\"w-8 h-8\" />, key: 'ArrowRight' },\n];\n\nconst colors = [\n  { name: 'red', value: '#FF6B6B' },\n  { name: 'blue', value: '#45B7D1' },\n  { name: 'green', value: '#96CEB4' },\n  { name: 'yellow', value: '#FFEAA7' },\n];\n\nconst words = ['FAST', 'SLOW', 'BIG', 'SMALL', 'HOT', 'COLD'];\nconst shapes = ['●', '■', '▲', '◆'];\n\nexport function QuickResponseGame({ onComplete }: QuickResponseGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'playing' | 'feedback'>('intro');\n  const [currentChallenge, setCurrentChallenge] = useState<Challenge | null>(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [feedback, setFeedback] = useState<'correct' | 'incorrect' | ''>('');\n  const [timeLeft, setTimeLeft] = useState(45);\n  const [reactionTime, setReactionTime] = useState(0);\n  const [challengeStartTime, setChallengeStartTime] = useState(0);\n  const [averageReactionTime, setAverageReactionTime] = useState(0);\n  const [totalChallenges, setTotalChallenges] = useState(0);\n  \n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const { notifications, removeNotification, showCongratulations, showGeneral } = useNotifications();\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            setGameState('feedback');\n            setTimeout(() => endGame(), 100);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [gameState]);\n\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (gameState !== 'playing' || !currentChallenge) return;\n      \n      if (currentChallenge.type === 'direction') {\n        const direction = directions.find(d => d.key === event.key);\n        if (direction) {\n          handleAnswer(direction.name);\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [gameState, currentChallenge]);\n\n  const generateChallenge = (): Challenge => {\n    const types = ['direction', 'color', 'word', 'shape'];\n    const type = types[Math.floor(Math.random() * types.length)] as Challenge['type'];\n    \n    switch (type) {\n      case 'direction': {\n        const direction = directions[Math.floor(Math.random() * directions.length)];\n        return {\n          type: 'direction',\n          stimulus: direction.name,\n          correctAnswer: direction.name,\n          options: directions.map(d => d.name),\n        };\n      }\n      \n      case 'color': {\n        const color = colors[Math.floor(Math.random() * colors.length)];\n        const wrongColor = colors[Math.floor(Math.random() * colors.length)];\n        return {\n          type: 'color',\n          stimulus: color.name.toUpperCase(),\n          correctAnswer: color.name,\n          options: colors.map(c => c.name),\n          color: wrongColor.value, // Display word in wrong color for Stroop effect\n        };\n      }\n      \n      case 'word': {\n        const word = words[Math.floor(Math.random() * words.length)];\n        return {\n          type: 'word',\n          stimulus: word,\n          correctAnswer: word,\n          options: words,\n        };\n      }\n      \n      case 'shape': {\n        const shape = shapes[Math.floor(Math.random() * shapes.length)];\n        return {\n          type: 'shape',\n          stimulus: shape,\n          correctAnswer: shape,\n          options: shapes,\n        };\n      }\n      \n      default:\n        return generateChallenge();\n    }\n  };\n\n  const startGame = () => {\n    setGameState('playing');\n    setGameStartTime(Date.now());\n    setTimeLeft(45);\n    setScore(0);\n    setStreak(0);\n    setTotalChallenges(0);\n    setAverageReactionTime(0);\n    nextChallenge();\n  };\n\n  const nextChallenge = () => {\n    const challenge = generateChallenge();\n    setCurrentChallenge(challenge);\n    setChallengeStartTime(Date.now());\n    setTotalChallenges(prev => prev + 1);\n  };\n\n  const handleAnswer = (answer: string) => {\n    if (!currentChallenge) return;\n    \n    const currentReactionTime = Date.now() - challengeStartTime;\n    setReactionTime(currentReactionTime);\n    \n    // Update average reaction time\n    setAverageReactionTime(prev => \n      (prev * (totalChallenges - 1) + currentReactionTime) / totalChallenges\n    );\n    \n    if (answer === currentChallenge.correctAnswer) {\n      setFeedback('correct');\n      \n      // Scoring based on speed\n      const basePoints = 15;\n      const speedBonus = Math.max(0, 20 - Math.floor(currentReactionTime / 100));\n      const streakBonus = streak * 2;\n      const totalPoints = basePoints + speedBonus + streakBonus;\n      \n      setScore(prev => prev + totalPoints);\n      setStreak(prev => prev + 1);\n      \n      showCongratulations(`⚡ Fast! +${totalPoints} points! (${currentReactionTime}ms)`);\n      \n      setTimeout(() => {\n        setFeedback('');\n        if (timeLeft > 0) {\n          nextChallenge();\n        } else {\n          endGame();\n        }\n      }, 800);\n    } else {\n      setFeedback('incorrect');\n      setStreak(0);\n      \n      // Show error feedback in-game only\n      \n      setTimeout(() => {\n        setFeedback('');\n        if (timeLeft > 0) {\n          nextChallenge();\n        } else {\n          endGame();\n        }\n      }, 800);\n    }\n  };\n\n  const endGame = () => {\n    const timeTaken = (Date.now() - gameStartTime) / 1000;\n    onComplete(score, timeTaken);\n  };\n\n  if (gameState === 'intro') {\n    return (\n      <div className=\"max-w-2xl mx-auto text-center space-y-6\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-4\">\n              <div className=\"text-6xl\">⚡</div>\n              <h2 className=\"text-2xl font-bold\">Quick Response</h2>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                React as quickly as possible to various stimuli. Test your processing speed \n                and reaction time with directions, colors, words, and shapes!\n              </p>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                  <strong>Goal:</strong> Respond quickly and accurately\n                </div>\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                  <strong>Scoring:</strong> 15 points + speed bonus\n                </div>\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg\">\n                  <strong>Speed bonus:</strong> Up to +20 points for fast responses\n                </div>\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg\">\n                  <strong>Controls:</strong> Click buttons or use arrow keys\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Button\n          onClick={startGame}\n          size=\"lg\"\n          className=\"text-lg px-8 py-6\"\n        >\n          Start Game\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Game Status */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-4\">\n          <Badge variant=\"secondary\">Challenge {totalChallenges}</Badge>\n          <Badge variant=\"outline\">Streak: {streak}</Badge>\n          <Badge variant=\"outline\">Avg RT: {Math.round(averageReactionTime)}ms</Badge>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Time: {timeLeft}s\n          </div>\n          <Badge className=\"text-lg px-4 py-2\">Score: {score}</Badge>\n        </div>\n      </div>\n\n      {/* Challenge Display */}\n      {currentChallenge && (\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">\n                {currentChallenge.type === 'direction' && \"Press arrow key or click the direction\"}\n                {currentChallenge.type === 'color' && \"What COLOR is this word written in?\"}\n                {currentChallenge.type === 'word' && \"Click the matching word\"}\n                {currentChallenge.type === 'shape' && \"Click the matching shape\"}\n              </div>\n              \n              <div className=\"text-6xl font-bold mb-8\" style={{ color: currentChallenge.color }}>\n                {currentChallenge.stimulus}\n              </div>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-md mx-auto\">\n                {currentChallenge.options.map((option, index) => (\n                  <Button\n                    key={index}\n                    onClick={() => handleAnswer(option)}\n                    variant=\"outline\"\n                    size=\"lg\"\n                    className=\"h-16 text-lg\"\n                  >\n                    {currentChallenge.type === 'direction' && \n                      directions.find(d => d.name === option)?.icon\n                    }\n                    {currentChallenge.type === 'color' && (\n                      <div \n                        className=\"w-12 h-12 rounded-full border-2 border-gray-300\"\n                        style={{ backgroundColor: colors.find(c => c.name === option)?.value }}\n                      />\n                    )}\n                    {currentChallenge.type === 'word' && option}\n                    {currentChallenge.type === 'shape' && (\n                      <span className=\"text-4xl\">{option}</span>\n                    )}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Reaction Time Display */}\n      {reactionTime > 0 && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Last reaction time: <span className=\"font-bold\">{reactionTime}ms</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Feedback */}\n      <AnimatePresence>\n        {feedback && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"text-center\"\n          >\n            <Card className={`${feedback === 'correct' ? 'border-green-500' : 'border-red-500'} border-2`}>\n              <CardContent className=\"p-6\">\n                <div className={`text-2xl font-bold ${feedback === 'correct' ? 'text-green-600' : 'text-red-600'}`}>\n                  {feedback === 'correct' ? '⚡ Fast!' : '❌ Incorrect'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                  {feedback === 'correct' ? \n                    `${reactionTime}ms reaction time! Streak: ${streak}` : \n                    'Take your time to read carefully!'\n                  }\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Notification System */}\n      <NotificationSystem \n        notifications={notifications}\n        onRemove={removeNotification}\n      />\n    </div>\n  );\n}","size_bytes":12732},"client/src/components/games/ReactionTimeGame.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Zap, Target, Clock } from 'lucide-react';\n\ninterface ReactionTimeGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n}\n\nexport function ReactionTimeGame({ onComplete }: ReactionTimeGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'waiting' | 'ready' | 'reacting' | 'result' | 'complete'>('intro');\n  const [round, setRound] = useState(0);\n  const [reactionTimes, setReactionTimes] = useState<number[]>([]);\n  const [startTime, setStartTime] = useState(0);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [waitingTime, setWaitingTime] = useState(0);\n  const [tooEarly, setTooEarly] = useState(false);\n  const [targetColor, setTargetColor] = useState('#22C55E');\n\n  const maxRounds = 10;\n  const colors = ['#EF4444', '#F59E0B', '#10B981', '#3B82F6', '#8B5CF6', '#EC4899'];\n\n  const startNextRound = useCallback(() => {\n    if (round >= maxRounds) {\n      const avgReactionTime = reactionTimes.reduce((a, b) => a + b, 0) / reactionTimes.length;\n      const score = Math.max(0, Math.round(1000 - avgReactionTime));\n      const totalTime = (Date.now() - gameStartTime) / 1000;\n      onComplete(score, totalTime);\n      setGameState('complete');\n      return;\n    }\n\n    setTooEarly(false);\n    setGameState('waiting');\n    setTargetColor(colors[Math.floor(Math.random() * colors.length)]);\n    const delay = 2000 + Math.random() * 3000; // 2-5 seconds\n    setWaitingTime(delay);\n    \n    const timeoutId = setTimeout(() => {\n      setGameState('ready');\n      setStartTime(Date.now());\n    }, delay);\n\n    return () => clearTimeout(timeoutId);\n  }, [round, maxRounds, reactionTimes, gameStartTime, onComplete, gameState, colors]);\n\n  const handleClick = () => {\n    if (gameState === 'intro') {\n      setGameState('waiting');\n      setGameStartTime(Date.now());\n      setRound(1);\n      startNextRound();\n    } else if (gameState === 'waiting') {\n      setTooEarly(true);\n      setGameState('result');\n    } else if (gameState === 'ready') {\n      const reactionTime = Date.now() - startTime;\n      setReactionTimes(prev => [...prev, reactionTime]);\n      setGameState('result');\n    } else if (gameState === 'result') {\n      setRound(prev => prev + 1);\n      startNextRound();\n    }\n  };\n\n  const getReactionFeedback = (time: number) => {\n    if (time < 200) return { text: 'Lightning Fast!', color: 'text-green-600', icon: '⚡' };\n    if (time < 300) return { text: 'Excellent!', color: 'text-blue-600', icon: '🎯' };\n    if (time < 400) return { text: 'Good!', color: 'text-yellow-600', icon: '👍' };\n    if (time < 500) return { text: 'Average', color: 'text-orange-600', icon: '👌' };\n    return { text: 'Keep Trying!', color: 'text-red-600', icon: '💪' };\n  };\n\n  if (gameState === 'intro') {\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center space-y-6\"\n      >\n        <div className=\"text-6xl mb-4\">⚡</div>\n        <h2 className=\"text-2xl font-bold mb-4\">Reaction Time Challenge</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto\">\n          Test your reflexes! Click as fast as you can when the circle changes color. \n          Complete {maxRounds} rounds to measure your average reaction time.\n        </p>\n        <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg mb-6\">\n          <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n            <strong>Warning:</strong> Don't click too early! Wait for the color to change.\n          </p>\n        </div>\n        <Button onClick={handleClick} size=\"lg\" data-testid=\"button-start\">\n          <Zap className=\"h-5 w-5 mr-2\" />\n          Start Reaction Test\n        </Button>\n      </motion.div>\n    );\n  }\n\n  if (gameState === 'complete') {\n    const avgReactionTime = reactionTimes.reduce((a, b) => a + b, 0) / reactionTimes.length;\n    const bestTime = Math.min(...reactionTimes);\n    const feedback = getReactionFeedback(avgReactionTime);\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"text-center space-y-6\"\n      >\n        <div className=\"text-6xl mb-4\">{feedback.icon}</div>\n        <h2 className=\"text-2xl font-bold mb-4\">Reaction Test Complete!</h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <Clock className=\"h-8 w-8 mx-auto text-blue-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{Math.round(avgReactionTime)}ms</div>\n              <div className=\"text-sm text-gray-600\">Average Time</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <Target className=\"h-8 w-8 mx-auto text-green-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{Math.round(bestTime)}ms</div>\n              <div className=\"text-sm text-gray-600\">Best Time</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"text-center p-4\">\n              <Zap className=\"h-8 w-8 mx-auto text-purple-500 mb-2\" />\n              <div className=\"text-2xl font-bold\">{Math.max(0, Math.round(1000 - avgReactionTime))}</div>\n              <div className=\"text-sm text-gray-600\">Score</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className={`text-lg font-semibold ${feedback.color}`}>\n          {feedback.text}\n        </div>\n        \n        <div className=\"text-sm text-gray-500 space-y-1\">\n          <p><strong>Pro tip:</strong> Elite athletes have reaction times around 150-200ms</p>\n          <p>Average human reaction time is 200-300ms</p>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return (\n    <div className=\"text-center space-y-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <Badge variant=\"secondary\">Round {round}/{maxRounds}</Badge>\n        <Progress value={(round - 1) / maxRounds * 100} className=\"w-32\" />\n      </div>\n\n      <AnimatePresence mode=\"wait\">\n        {gameState === 'waiting' && (\n          <motion.div\n            key=\"waiting\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"text-lg font-semibold\">Get Ready...</div>\n            <motion.div\n              className=\"w-32 h-32 mx-auto rounded-full bg-red-500 cursor-pointer flex items-center justify-center\"\n              animate={{ \n                scale: [1, 1.1, 1],\n                backgroundColor: ['#EF4444', '#DC2626', '#EF4444']\n              }}\n              transition={{ duration: 0.5, repeat: Infinity }}\n              onClick={handleClick}\n              data-testid=\"reaction-circle\"\n            >\n              <div className=\"text-white font-bold\">WAIT</div>\n            </motion.div>\n            <p className=\"text-sm text-gray-500\">Wait for the color to change...</p>\n          </motion.div>\n        )}\n\n        {gameState === 'ready' && (\n          <motion.div\n            key=\"ready\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"text-lg font-semibold\">NOW!</div>\n            <motion.div\n              className=\"w-32 h-32 mx-auto rounded-full bg-green-500 cursor-pointer flex items-center justify-center\"\n              style={{ backgroundColor: targetColor }}\n              animate={{ \n                scale: [1, 1.2, 1],\n                boxShadow: ['0 0 0 0 rgba(34, 197, 94, 0.7)', '0 0 20px 10px rgba(34, 197, 94, 0)', '0 0 0 0 rgba(34, 197, 94, 0.7)']\n              }}\n              transition={{ duration: 0.3, repeat: Infinity }}\n              onClick={handleClick}\n              data-testid=\"reaction-circle\"\n            >\n              <div className=\"text-white font-bold text-lg\">CLICK!</div>\n            </motion.div>\n            <p className=\"text-sm text-green-600 font-semibold\">Click as fast as you can!</p>\n          </motion.div>\n        )}\n\n        {gameState === 'result' && (\n          <motion.div\n            key=\"result\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-4\"\n          >\n            {tooEarly ? (\n              <div className=\"space-y-4\">\n                <div className=\"text-6xl\">😅</div>\n                <div className=\"text-lg font-semibold text-red-600\">Too Early!</div>\n                <p className=\"text-gray-600\">Wait for the green signal before clicking.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"text-6xl\">{getReactionFeedback(reactionTimes[reactionTimes.length - 1]).icon}</div>\n                <div className=\"text-2xl font-bold\">\n                  {Math.round(reactionTimes[reactionTimes.length - 1])}ms\n                </div>\n                <div className={`text-lg ${getReactionFeedback(reactionTimes[reactionTimes.length - 1]).color}`}>\n                  {getReactionFeedback(reactionTimes[reactionTimes.length - 1]).text}\n                </div>\n              </div>\n            )}\n            \n            <Button onClick={handleClick} data-testid=\"button-continue\">\n              {round >= maxRounds ? 'View Results' : 'Next Round'}\n            </Button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":9859},"client/src/components/games/ShapeSequenceGame.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Circle, Square, Triangle, Diamond, Heart, Star } from \"lucide-react\";\nimport { NotificationSystem, useNotifications } from \"@/components/NotificationSystem\";\n\ninterface ShapeSequenceGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n}\n\ninterface Shape {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  color: string;\n}\n\nconst shapes: Shape[] = [\n  { id: 'circle', name: 'Circle', icon: <Circle className=\"w-8 h-8\" />, color: '#FF6B6B' },\n  { id: 'square', name: 'Square', icon: <Square className=\"w-8 h-8\" />, color: '#4ECDC4' },\n  { id: 'triangle', name: 'Triangle', icon: <Triangle className=\"w-8 h-8\" />, color: '#45B7D1' },\n  { id: 'diamond', name: 'Diamond', icon: <Diamond className=\"w-8 h-8\" />, color: '#96CEB4' },\n  { id: 'heart', name: 'Heart', icon: <Heart className=\"w-8 h-8\" />, color: '#FFEAA7' },\n  { id: 'star', name: 'Star', icon: <Star className=\"w-8 h-8\" />, color: '#DDA0DD' },\n];\n\nexport function ShapeSequenceGame({ onComplete }: ShapeSequenceGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'playing' | 'showing' | 'guessing' | 'feedback'>('intro');\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [sequence, setSequence] = useState<Shape[]>([]);\n  const [playerSequence, setPlayerSequence] = useState<Shape[]>([]);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [currentShowingIndex, setCurrentShowingIndex] = useState(0);\n  const [feedback, setFeedback] = useState<'correct' | 'incorrect' | ''>('');\n  const [timeLeft, setTimeLeft] = useState(45);\n  const [isShowing, setIsShowing] = useState(false);\n  \n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const { notifications, removeNotification, showCongratulations, showGeneral } = useNotifications();\n\n  useEffect(() => {\n    // Initialize audio context\n    if (typeof window !== 'undefined') {\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n    }\n  }, []);\n\n  const playCorrectSound = () => {\n    if (!audioContextRef.current) return;\n    \n    const oscillator = audioContextRef.current.createOscillator();\n    const gainNode = audioContextRef.current.createGain();\n    \n    oscillator.connect(gainNode);\n    gainNode.connect(audioContextRef.current.destination);\n    \n    oscillator.frequency.setValueAtTime(523.25, audioContextRef.current.currentTime); // C5 - cheerful sound\n    oscillator.frequency.setValueAtTime(659.25, audioContextRef.current.currentTime + 0.1); // E5\n    oscillator.type = 'sine';\n    \n    gainNode.gain.setValueAtTime(0.3, audioContextRef.current.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContextRef.current.currentTime + 0.3);\n    \n    oscillator.start();\n    oscillator.stop(audioContextRef.current.currentTime + 0.3);\n  };\n\n  const playIncorrectSound = () => {\n    if (!audioContextRef.current) return;\n    \n    const oscillator = audioContextRef.current.createOscillator();\n    const gainNode = audioContextRef.current.createGain();\n    \n    oscillator.connect(gainNode);\n    gainNode.connect(audioContextRef.current.destination);\n    \n    oscillator.frequency.setValueAtTime(196.00, audioContextRef.current.currentTime); // G3 - lower, somber sound\n    oscillator.type = 'sawtooth';\n    \n    gainNode.gain.setValueAtTime(0.2, audioContextRef.current.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContextRef.current.currentTime + 0.5);\n    \n    oscillator.start();\n    oscillator.stop(audioContextRef.current.currentTime + 0.5);\n  };\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            endGame();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [gameState, timeLeft]);\n\n  const generateSequence = () => {\n    const newSequence: Shape[] = [];\n    // Start with 2 shapes, increase gradually but cap at 5 for better gameplay\n    const sequenceLength = Math.min(2 + Math.floor(currentLevel / 3), 5);\n    \n    for (let i = 0; i < sequenceLength; i++) {\n      const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\n      newSequence.push(randomShape);\n    }\n    \n    setSequence(newSequence);\n    return newSequence;\n  };\n\n  const startGame = () => {\n    setGameState('playing');\n    setGameStartTime(Date.now());\n    setTimeLeft(45);\n    setScore(0);\n    setStreak(0);\n    setCurrentLevel(1);\n    showSequence();\n  };\n\n  const showSequence = () => {\n    // Clear any existing timeouts\n    setIsShowing(false);\n    setCurrentShowingIndex(-1);\n    \n    const newSequence = generateSequence();\n    setSequence(newSequence);\n    setGameState('showing');\n    setIsShowing(true);\n    \n    console.log('Generated sequence:', newSequence.map((s, i) => `${i}: ${s.id}`));\n    \n    let currentIndex = 0;\n    \n    const showNextShape = () => {\n      if (currentIndex < newSequence.length) {\n        setCurrentShowingIndex(currentIndex);\n        console.log(`Showing shape ${currentIndex}: ${newSequence[currentIndex].id}`);\n        \n        setTimeout(() => {\n          currentIndex++;\n          if (currentIndex < newSequence.length) {\n            showNextShape();\n          } else {\n            setTimeout(() => {\n              setGameState('guessing');\n              setIsShowing(false);\n              setCurrentShowingIndex(-1);\n              console.log('Ready for guessing. Sequence:', newSequence.map(s => s.id));\n            }, 1500);\n          }\n        }, 1500);\n      }\n    };\n    \n    showNextShape();\n  };\n\n  const handleShapeClick = (shape: Shape) => {\n    if (gameState !== 'guessing') return;\n    \n    // Don't allow clicks beyond sequence length\n    if (playerSequence.length >= sequence.length) {\n      return;\n    }\n    \n    // Get the expected shape at the current position\n    const currentPosition = playerSequence.length;\n    const expectedShape = sequence[currentPosition];\n    \n    if (!expectedShape) {\n      console.error('No expected shape found', { \n        currentPosition,\n        sequenceLength: sequence.length, \n        sequence: sequence.map(s => s.id)\n      });\n      return;\n    }\n    \n    // Compare the clicked shape with the expected shape at this position\n    const isCorrect = shape.id === expectedShape.id;\n    \n    console.log('Shape click debug:', {\n      currentPosition,\n      clickedShapeId: shape.id,\n      expectedShapeId: expectedShape.id,\n      isCorrect,\n      fullSequence: sequence.map(s => s.id)\n    });\n    \n    if (isCorrect) {\n      // Add to player sequence\n      const newPlayerSequence = [...playerSequence, shape];\n      setPlayerSequence(newPlayerSequence);\n      \n      // Play correct sound effect\n      playCorrectSound();\n      setFeedback('correct');\n      \n      // Check if sequence is complete\n      if (newPlayerSequence.length === sequence.length) {\n        const basePoints = sequence.length * 15;\n        const streakBonus = streak * 5;\n        const speedBonus = Math.max(0, (45 - timeLeft) < 10 ? 10 : 0);\n        const totalPoints = basePoints + streakBonus + speedBonus;\n        \n        setScore(prev => prev + totalPoints);\n        setStreak(prev => prev + 1);\n        setCurrentLevel(prev => prev + 1);\n        \n        showCongratulations(`🎉 Perfect sequence! +${totalPoints} points!`);\n        \n        setTimeout(() => {\n          setFeedback('');\n          setPlayerSequence([]);\n          nextRound();\n        }, 1500);\n      } else {\n        // Show positive feedback for correct individual clicks\n        showGeneral(\"✅ Correct shape!\", \"success\");\n        setTimeout(() => setFeedback(''), 500);\n      }\n    } else {\n      // Wrong shape - end round\n      playIncorrectSound();\n      setFeedback('incorrect');\n      setStreak(0);\n      showGeneral(\"❌ Wrong shape! Try again.\", \"error\");\n      \n      setTimeout(() => {\n        setFeedback('');\n        if (currentLevel > 1) {\n          setCurrentLevel(prev => prev - 1);\n        }\n        setPlayerSequence([]);\n        nextRound();\n      }, 1500);\n    }\n  };\n\n  const nextRound = () => {\n    setPlayerSequence([]);\n    // Don't reset sequence here - let showSequence() handle it\n    if (timeLeft > 0) {\n      setTimeout(() => {\n        showSequence();\n      }, 500);\n    } else {\n      endGame();\n    }\n  };\n\n  const endGame = () => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    setGameState('intro');\n    const timeTaken = (Date.now() - gameStartTime) / 1000;\n    onComplete(score, timeTaken);\n  };\n\n  const replaySequence = () => {\n    if (gameState !== 'guessing' || isShowing) return;\n    \n    setIsShowing(true);\n    setCurrentShowingIndex(0);\n    \n    sequence.forEach((shape, index) => {\n      setTimeout(() => {\n        setCurrentShowingIndex(index);\n        \n        if (index === sequence.length - 1) {\n          setTimeout(() => {\n            setCurrentShowingIndex(-1);\n            setIsShowing(false);\n          }, 1000);\n        }\n      }, index * 1000);\n    });\n  };\n\n  if (gameState === 'intro') {\n    return (\n      <div className=\"max-w-2xl mx-auto text-center space-y-6\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-4\">\n              <div className=\"text-6xl\">🔷</div>\n              <h2 className=\"text-2xl font-bold\">Shape Sequence</h2>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Watch the sequence of shapes appear, then click them in the same order. \n                Each level gets longer and more challenging!\n              </p>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                  <strong>Goal:</strong> Reproduce the exact sequence\n                </div>\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                  <strong>Scoring:</strong> 15 points per shape + bonuses\n                </div>\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg\">\n                  <strong>Streak bonus:</strong> +5 points per consecutive success\n                </div>\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg\">\n                  <strong>Speed bonus:</strong> +10 points for quick completion\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Button\n          onClick={startGame}\n          size=\"lg\"\n          className=\"text-lg px-8 py-6\"\n        >\n          Start Game\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Game Status */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-4\">\n          <Badge variant=\"secondary\">Level {currentLevel}</Badge>\n          <Badge variant=\"outline\">Streak: {streak}</Badge>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Time: {timeLeft}s\n          </div>\n          <Badge className=\"text-lg px-4 py-2\">Score: {score}</Badge>\n        </div>\n      </div>\n\n      {/* Game Instructions */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n              {gameState === 'showing' && \"👀 Watch the sequence carefully...\"}\n              {gameState === 'guessing' && \"🎯 Click the shapes in the same order\"}\n            </div>\n            {gameState === 'guessing' && (\n              <Button\n                onClick={replaySequence}\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={isShowing}\n              >\n                Show Again\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Shape Grid */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-3 gap-4\">\n            {shapes.map((shape, index) => (\n              <motion.button\n                key={shape.id}\n                onClick={() => handleShapeClick(shape)}\n                disabled={gameState !== 'guessing'}\n                className={`\n                  aspect-square rounded-xl border-4 p-4 transition-all duration-300 flex flex-col items-center justify-center gap-2\n                  ${gameState === 'guessing' ? 'hover:scale-105 cursor-pointer' : 'cursor-not-allowed'}\n                  ${isShowing && sequence[currentShowingIndex]?.id === shape.id ? 'scale-110 border-yellow-400 shadow-lg bg-yellow-50 dark:bg-yellow-900/20' : 'border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800'}\n                  ${gameState !== 'guessing' ? 'opacity-70' : ''}\n                `}\n                whileHover={gameState === 'guessing' ? { scale: 1.05 } : {}}\n                whileTap={gameState === 'guessing' ? { scale: 0.95 } : {}}\n              >\n                <div style={{ color: shape.color }}>\n                  {shape.icon}\n                </div>\n                <div className=\"text-xs font-medium text-gray-600 dark:text-gray-300\">\n                  {shape.name}\n                </div>\n              </motion.button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Progress Indicator */}\n      {gameState === 'guessing' && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Progress: {playerSequence.length} / {sequence.length}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Sequence length: {sequence.length}\n              </div>\n            </div>\n            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n              <div \n                className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${(playerSequence.length / sequence.length) * 100}%` }}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Current Sequence Display */}\n      {gameState === 'showing' && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">\n                Sequence: {currentShowingIndex + 1} of {sequence.length}\n              </div>\n              <div className=\"flex justify-center gap-2\">\n                {sequence.map((shape, index) => (\n                  <div\n                    key={index}\n                    className={`\n                      w-3 h-3 rounded-full transition-all duration-300\n                      ${index <= currentShowingIndex ? 'bg-blue-500' : 'bg-gray-300 dark:bg-gray-600'}\n                    `}\n                  />\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Feedback */}\n      <AnimatePresence>\n        {feedback && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"text-center\"\n          >\n            <Card className={`${feedback === 'correct' ? 'border-green-500' : 'border-red-500'} border-2`}>\n              <CardContent className=\"p-6\">\n                <div className={`text-2xl font-bold ${feedback === 'correct' ? 'text-green-600' : 'text-red-600'}`}>\n                  {feedback === 'correct' ? '🎉 Perfect!' : '❌ Incorrect'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                  {feedback === 'correct' ? \n                    `Great memory! Level ${currentLevel} completed.` : \n                    'Try again! Watch the sequence more carefully.'\n                  }\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Notification System */}\n      <NotificationSystem \n        notifications={notifications}\n        onRemove={removeNotification}\n      />\n    </div>\n  );\n}","size_bytes":17062},"client/src/components/games/SpotlightGame.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SpotlightGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n  showGeneral?: (message: string, type: 'success' | 'error') => void;\n}\n\ninterface Target {\n  id: string;\n  x: number;\n  y: number;\n  size: number;\n  color: string;\n  isOdd: boolean;\n}\n\nconst colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'];\n\nexport function SpotlightGame({ onComplete, showGeneral }: SpotlightGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'playing' | 'feedback'>('intro');\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [targets, setTargets] = useState<Target[]>([]);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [feedback, setFeedback] = useState<'correct' | 'incorrect' | ''>('');\n  const [timeLeft, setTimeLeft] = useState(40);\n  const [roundTimeLeft, setRoundTimeLeft] = useState(5);\n  \n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const roundTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            endGame();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [gameState, timeLeft]);\n\n  useEffect(() => {\n    if (gameState === 'playing' && roundTimeLeft > 0) {\n      roundTimerRef.current = setInterval(() => {\n        setRoundTimeLeft(prev => {\n          if (prev <= 1) {\n            // Time's up - incorrect\n            handleIncorrect();\n            return 5;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (roundTimerRef.current) {\n      clearInterval(roundTimerRef.current);\n    }\n\n    return () => {\n      if (roundTimerRef.current) {\n        clearInterval(roundTimerRef.current);\n      }\n    };\n  }, [gameState, roundTimeLeft]);\n\n  const generateTargets = () => {\n    const newTargets: Target[] = [];\n    const numTargets = Math.min(6 + Math.floor(currentLevel / 3), 12);\n    const baseColor = colors[Math.floor(Math.random() * colors.length)];\n    const oddColor = colors.find(c => c !== baseColor) || colors[0];\n    \n    for (let i = 0; i < numTargets; i++) {\n      const isOdd = i === 0; // First target is always the odd one\n      newTargets.push({\n        id: `target-${i}`,\n        x: Math.random() * 80 + 10, // 10-90% of container width\n        y: Math.random() * 80 + 10, // 10-90% of container height\n        size: Math.random() * 30 + 40, // 40-70px\n        color: isOdd ? oddColor : baseColor,\n        isOdd,\n      });\n    }\n    \n    // Shuffle so odd one isn't always first\n    for (let i = newTargets.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newTargets[i], newTargets[j]] = [newTargets[j], newTargets[i]];\n    }\n    \n    setTargets(newTargets);\n  };\n\n  const startGame = () => {\n    setGameState('playing');\n    setGameStartTime(Date.now());\n    setTimeLeft(40);\n    setScore(0);\n    setStreak(0);\n    setCurrentLevel(1);\n    generateTargets();\n    setRoundTimeLeft(5);\n  };\n\n  const handleTargetClick = (target: Target) => {\n    if (gameState !== 'playing') return;\n    \n    if (target.isOdd) {\n      handleCorrect();\n    } else {\n      handleIncorrect();\n    }\n  };\n\n  const handleCorrect = () => {\n    setFeedback('correct');\n    const basePoints = 20 + (currentLevel * 5);\n    const speedBonus = roundTimeLeft * 2;\n    const streakBonus = streak * 3;\n    const totalPoints = basePoints + speedBonus + streakBonus;\n    \n    setScore(prev => prev + totalPoints);\n    setStreak(prev => prev + 1);\n    setCurrentLevel(prev => prev + 1);\n    \n    // Show check mark notification for correct answer\n    if (typeof showGeneral === 'function') {\n      showGeneral(`✅ Correct! +${totalPoints} points`, 'success');\n    }\n    \n    setTimeout(() => {\n      setFeedback('');\n      if (timeLeft > 0) {\n        generateTargets();\n        setRoundTimeLeft(5);\n      } else {\n        endGame();\n      }\n    }, 1000);\n  };\n\n  const handleIncorrect = () => {\n    setFeedback('incorrect');\n    setStreak(0);\n    \n    // Show X mark notification for incorrect answer\n    if (typeof showGeneral === 'function') {\n      showGeneral('❌ Wrong! Try again', 'error');\n    }\n    \n    setTimeout(() => {\n      setFeedback('');\n      if (timeLeft > 0) {\n        generateTargets();\n        setRoundTimeLeft(5);\n      } else {\n        endGame();\n      }\n    }, 1000);\n  };\n\n  const endGame = () => {\n    const timeTaken = (Date.now() - gameStartTime) / 1000;\n    onComplete(score, timeTaken);\n  };\n\n  if (gameState === 'intro') {\n    return (\n      <div className=\"max-w-2xl mx-auto text-center space-y-6\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-4\">\n              <div className=\"text-6xl\">🔍</div>\n              <h2 className=\"text-2xl font-bold\">Spotlight</h2>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Find the odd one out! Look carefully at all the shapes and click the one that's different.\n                You have 5 seconds per round, so think fast!\n              </p>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                  <strong>Goal:</strong> Find the different shape\n                </div>\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                  <strong>Scoring:</strong> 20+ points per correct answer\n                </div>\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg\">\n                  <strong>Speed bonus:</strong> +2 points per second left\n                </div>\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg\">\n                  <strong>Streak bonus:</strong> +3 points per consecutive success\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Button\n          onClick={startGame}\n          size=\"lg\"\n          className=\"text-lg px-8 py-6\"\n        >\n          Start Game\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Game Status */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-4\">\n          <Badge variant=\"secondary\">Level {currentLevel}</Badge>\n          <Badge variant=\"outline\">Streak: {streak}</Badge>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Badge variant=\"destructive\">Round: {roundTimeLeft}s</Badge>\n          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Time: {timeLeft}s\n          </div>\n          <Badge className=\"text-lg px-4 py-2\">Score: {score}</Badge>\n        </div>\n      </div>\n\n      {/* Game Instructions */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"text-center text-sm text-gray-600 dark:text-gray-300\">\n            🎯 Click the shape that's different from the others\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Game Area */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"relative w-full h-96 bg-gray-50 dark:bg-gray-800 rounded-lg overflow-hidden\">\n            {targets.map((target) => (\n              <motion.button\n                key={target.id}\n                onClick={() => handleTargetClick(target)}\n                className=\"absolute rounded-full cursor-pointer hover:scale-110 transition-transform duration-200\"\n                style={{\n                  left: `${target.x}%`,\n                  top: `${target.y}%`,\n                  width: `${target.size}px`,\n                  height: `${target.size}px`,\n                  backgroundColor: target.color,\n                  transform: 'translate(-50%, -50%)',\n                }}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                initial={{ opacity: 0, scale: 0 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.3 }}\n              />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Round Progress */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div \n              className=\"bg-gradient-to-r from-red-500 to-orange-500 h-2 rounded-full transition-all duration-1000\"\n              style={{ width: `${(roundTimeLeft / 5) * 100}%` }}\n            />\n          </div>\n          <div className=\"text-center text-sm text-gray-600 dark:text-gray-300 mt-2\">\n            {roundTimeLeft}s remaining\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Feedback */}\n      <AnimatePresence>\n        {feedback && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"text-center\"\n          >\n            <Card className={`${feedback === 'correct' ? 'border-green-500' : 'border-red-500'} border-2`}>\n              <CardContent className=\"p-6\">\n                <div className={`text-2xl font-bold ${feedback === 'correct' ? 'text-green-600' : 'text-red-600'}`}>\n                  {feedback === 'correct' ? '🎉 Correct!' : '❌ Incorrect'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                  {feedback === 'correct' ? \n                    `Great spotting! Level ${currentLevel} completed.` : \n                    'Keep looking! The odd one out was there.'\n                  }\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":10453},"client/src/components/games/StroopTestGame.tsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport GameContainer from './GameContainer';\n\n// Scientifically-backed Stroop Test for attention and cognitive flexibility\nconst COLORS = ['red', 'blue', 'green', 'yellow', 'orange', 'purple'];\nconst WORD_COLORS = ['text-red-500', 'text-blue-500', 'text-green-500', 'text-yellow-500', 'text-orange-500', 'text-purple-500'];\n\ninterface StroopItem {\n  word: string;\n  color: string;\n  colorClass: string;\n  isCongruent: boolean;\n}\n\nexport default function StroopTestGame() {\n  const [currentItem, setCurrentItem] = useState<StroopItem | null>(null);\n  const [score, setScore] = useState(0);\n  const [round, setRound] = useState(1);\n  const [timeLeft, setTimeLeft] = useState(60); // 60 seconds\n  const [gameActive, setGameActive] = useState(false);\n  const [startTime, setStartTime] = useState<number>(0);\n  const [reactions, setReactions] = useState<number[]>([]);\n\n  const generateStroopItem = useCallback((): StroopItem => {\n    const wordColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    const displayColor = COLORS[Math.floor(Math.random() * COLORS.length)];\n    const displayColorClass = WORD_COLORS[COLORS.indexOf(displayColor)];\n    \n    return {\n      word: wordColor,\n      color: displayColor,\n      colorClass: displayColorClass,\n      isCongruent: wordColor === displayColor\n    };\n  }, []);\n\n  const startGame = () => {\n    setGameActive(true);\n    setScore(0);\n    setRound(1);\n    setTimeLeft(60);\n    setReactions([]);\n    setStartTime(Date.now());\n    setCurrentItem(generateStroopItem());\n  };\n\n  const handleColorChoice = (chosenColor: string) => {\n    if (!currentItem || !gameActive) return;\n    \n    const reactionTime = Date.now() - startTime;\n    const correct = chosenColor === currentItem.color;\n    \n    if (correct) {\n      setScore(prev => prev + 1);\n      setReactions(prev => [...prev, reactionTime]);\n    }\n    \n    setRound(prev => prev + 1);\n    setStartTime(Date.now());\n    setCurrentItem(generateStroopItem());\n  };\n\n  useEffect(() => {\n    if (gameActive && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0) {\n      setGameActive(false);\n    }\n  }, [gameActive, timeLeft]);\n\n  const averageReactionTime = reactions.length > 0 \n    ? Math.round(reactions.reduce((a, b) => a + b, 0) / reactions.length)\n    : 0;\n\n  return (\n    <GameContainer\n      title=\"Stroop Test\"\n      description=\"Test your cognitive flexibility and attention control. Name the COLOR of the word, not what the word says!\"\n      score={score}\n      isActive={gameActive}\n      timeLeft={timeLeft}\n      onGameEnd={() => ({\n        gameType: 'stroop-test',\n        score,\n        difficulty: 'normal',\n        timeTaken: 60 - timeLeft,\n      })}\n    >\n      <div className=\"space-y-6\">\n        {!gameActive && timeLeft === 60 ? (\n          <div className=\"text-center space-y-4\">\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Scientific Benefits: Improves cognitive flexibility, attention control, and processing speed.\n              Based on the classic Stroop interference effect research.\n            </p>\n            <Button onClick={startGame} size=\"lg\" data-testid=\"button-start-stroop\">\n              Start Stroop Test\n            </Button>\n          </div>\n        ) : gameActive ? (\n          <div className=\"text-center space-y-6\">\n            <div className=\"text-sm text-gray-500\">Round {round}</div>\n            \n            {currentItem && (\n              <div className=\"space-y-4\">\n                <div className=\"text-4xl font-bold mb-8\">\n                  <span className={currentItem.colorClass} data-testid=\"text-stroop-word\">\n                    {currentItem.word.toUpperCase()}\n                  </span>\n                </div>\n                \n                <p className=\"text-lg mb-4\">What COLOR is this word displayed in?</p>\n                \n                <div className=\"grid grid-cols-3 gap-3 max-w-md mx-auto\">\n                  {COLORS.map((color, index) => (\n                    <Button\n                      key={color}\n                      onClick={() => handleColorChoice(color)}\n                      variant=\"outline\"\n                      className=\"h-12 text-sm\"\n                      style={{ borderColor: color, color: color }}\n                      data-testid={`button-color-${color}`}\n                    >\n                      {color.toUpperCase()}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"text-center space-y-4\">\n            <h3 className=\"text-2xl font-bold\">Game Complete!</h3>\n            <div className=\"space-y-2\">\n              <p className=\"text-lg\">Correct Answers: {score}</p>\n              <p className=\"text-lg\">Average Reaction Time: {averageReactionTime}ms</p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Faster reaction times with high accuracy indicate better cognitive flexibility!\n              </p>\n            </div>\n            <Button onClick={startGame} size=\"lg\" data-testid=\"button-restart-stroop\">\n              Play Again\n            </Button>\n          </div>\n        )}\n      </div>\n    </GameContainer>\n  );\n}","size_bytes":5429},"client/src/components/games/SynestheticRecallGame.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SynestheticRecallGameProps {\n  onComplete: (score: number, timeTaken: number) => void;\n}\n\ninterface WordColor {\n  word: string;\n  color: string;\n  colorName: string;\n}\n\nconst wordColorPairs: WordColor[] = [\n  { word: \"Ocean\", color: \"#4ECDC4\", colorName: \"Teal\" },\n  { word: \"Fire\", color: \"#FF6B6B\", colorName: \"Red\" },\n  { word: \"Sky\", color: \"#45B7D1\", colorName: \"Blue\" },\n  { word: \"Grass\", color: \"#96CEB4\", colorName: \"Green\" },\n  { word: \"Sun\", color: \"#FFEAA7\", colorName: \"Yellow\" },\n  { word: \"Lavender\", color: \"#DDA0DD\", colorName: \"Purple\" },\n  { word: \"Orange\", color: \"#FFB347\", colorName: \"Orange\" },\n  { word: \"Rose\", color: \"#FFB6C1\", colorName: \"Pink\" },\n  { word: \"Storm\", color: \"#708090\", colorName: \"Gray\" },\n  { word: \"Forest\", color: \"#228B22\", colorName: \"Dark Green\" },\n  { word: \"Snow\", color: \"#F8F8FF\", colorName: \"White\" },\n  { word: \"Night\", color: \"#191970\", colorName: \"Dark Blue\" },\n];\n\n// Use the exact colors from wordColorPairs to ensure consistency\nconst colors = [\"#4ECDC4\", \"#FF6B6B\", \"#45B7D1\", \"#96CEB4\", \"#FFEAA7\", \"#DDA0DD\", \"#FFB347\", \"#FFB6C1\", \"#708090\", \"#228B22\", \"#F8F8FF\", \"#191970\"];\n\nexport function SynestheticRecallGame({ onComplete }: SynestheticRecallGameProps) {\n  const [gameState, setGameState] = useState<'intro' | 'study' | 'playing' | 'feedback'>('intro');\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [studyPairs, setStudyPairs] = useState<WordColor[]>([]);\n  const [currentWord, setCurrentWord] = useState<string>('');\n  const [correctColor, setCorrectColor] = useState<string>('');\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [gameStartTime, setGameStartTime] = useState(0);\n  const [feedback, setFeedback] = useState<'correct' | 'incorrect' | ''>('');\n  const [timeLeft, setTimeLeft] = useState(60);\n  const [studyTimeLeft, setStudyTimeLeft] = useState(8);\n  const [roundsLeft, setRoundsLeft] = useState(0);\n  \n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const studyTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            endGame();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [gameState, timeLeft]);\n\n  useEffect(() => {\n    if (gameState === 'study' && studyTimeLeft > 0) {\n      studyTimerRef.current = setInterval(() => {\n        setStudyTimeLeft(prev => {\n          if (prev <= 1) {\n            startPlaying();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (studyTimerRef.current) {\n      clearInterval(studyTimerRef.current);\n    }\n\n    return () => {\n      if (studyTimerRef.current) {\n        clearInterval(studyTimerRef.current);\n      }\n    };\n  }, [gameState, studyTimeLeft]);\n\n  const generateStudyPairs = () => {\n    const numPairs = Math.min(3 + Math.floor(currentLevel / 2), 6);\n    const shuffled = [...wordColorPairs].sort(() => Math.random() - 0.5);\n    const selected = shuffled.slice(0, numPairs);\n    setStudyPairs(selected);\n    setRoundsLeft(numPairs);\n  };\n\n  const startGame = () => {\n    setGameState('study');\n    setGameStartTime(Date.now());\n    setTimeLeft(60);\n    setScore(0);\n    setStreak(0);\n    setCurrentLevel(1);\n    setStudyTimeLeft(8);\n    generateStudyPairs();\n  };\n\n  const startPlaying = () => {\n    setGameState('playing');\n    nextQuestion();\n  };\n\n  const nextQuestion = () => {\n    if (roundsLeft <= 0) {\n      setCurrentLevel(prev => prev + 1);\n      generateStudyPairs();\n      setGameState('study');\n      setStudyTimeLeft(8);\n      return;\n    }\n\n    const randomPair = studyPairs[Math.floor(Math.random() * studyPairs.length)];\n    setCurrentWord(randomPair.word);\n    setCorrectColor(randomPair.color);\n    setRoundsLeft(prev => prev - 1);\n  };\n\n  const handleColorClick = (color: string) => {\n    if (gameState !== 'playing') return;\n    \n    if (color === correctColor) {\n      setFeedback('correct');\n      const basePoints = 25 + (currentLevel * 5);\n      const streakBonus = streak * 4;\n      const totalPoints = basePoints + streakBonus;\n      \n      setScore(prev => prev + totalPoints);\n      setStreak(prev => prev + 1);\n      \n      setTimeout(() => {\n        setFeedback('');\n        if (timeLeft > 0) {\n          nextQuestion();\n        } else {\n          endGame();\n        }\n      }, 1200);\n    } else {\n      setFeedback('incorrect');\n      setStreak(0);\n      \n      setTimeout(() => {\n        setFeedback('');\n        if (timeLeft > 0) {\n          nextQuestion();\n        } else {\n          endGame();\n        }\n      }, 1200);\n    }\n  };\n\n  const endGame = () => {\n    const timeTaken = (Date.now() - gameStartTime) / 1000;\n    onComplete(score, timeTaken);\n  };\n\n  if (gameState === 'intro') {\n    return (\n      <div className=\"max-w-2xl mx-auto text-center space-y-6\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-4\">\n              <div className=\"text-6xl\">🌈</div>\n              <h2 className=\"text-2xl font-bold\">Synesthetic Recall</h2>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Study the word-color pairs, then match each word to its color from memory. \n                Train your brain to create stronger connections between words and colors!\n              </p>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                  <strong>Study Phase:</strong> 8 seconds to memorize pairs\n                </div>\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                  <strong>Scoring:</strong> 25+ points per correct match\n                </div>\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg\">\n                  <strong>Streak bonus:</strong> +4 points per consecutive success\n                </div>\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg\">\n                  <strong>Levels:</strong> More pairs as you advance\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Button\n          onClick={startGame}\n          size=\"lg\"\n          className=\"text-lg px-8 py-6\"\n        >\n          Start Game\n        </Button>\n      </div>\n    );\n  }\n\n  if (gameState === 'study') {\n    return (\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        <div className=\"text-center\">\n          <Badge variant=\"destructive\" className=\"text-lg px-4 py-2\">\n            Study Time: {studyTimeLeft}s\n          </Badge>\n        </div>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center mb-6\">\n              <h3 className=\"text-xl font-bold mb-2\">Study These Word-Color Pairs</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Remember which color goes with each word!\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              {studyPairs.map((pair, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.1 }}\n                  className=\"text-center p-4 rounded-lg border-2 border-gray-200 dark:border-gray-600\"\n                >\n                  <div className=\"text-2xl font-bold mb-2\">{pair.word}</div>\n                  <div \n                    className=\"w-16 h-16 rounded-full mx-auto border-2 border-gray-300 dark:border-gray-500\"\n                    style={{ backgroundColor: pair.color }}\n                  />\n                  <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                    {pair.colorName}\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Game Status */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-4\">\n          <Badge variant=\"secondary\">Level {currentLevel}</Badge>\n          <Badge variant=\"outline\">Streak: {streak}</Badge>\n          <Badge variant=\"outline\">Questions Left: {roundsLeft}</Badge>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Time: {timeLeft}s\n          </div>\n          <Badge className=\"text-lg px-4 py-2\">Score: {score}</Badge>\n        </div>\n      </div>\n\n      {/* Question */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">\n              What color was associated with this word?\n            </div>\n            <div className=\"text-4xl font-bold mb-8\">{currentWord}</div>\n            \n            <div className=\"grid grid-cols-4 gap-4 max-w-md mx-auto\">\n              {colors.map((color, index) => (\n                <motion.button\n                  key={index}\n                  onClick={() => handleColorClick(color)}\n                  className=\"aspect-square rounded-full border-4 border-gray-300 dark:border-gray-600 hover:border-gray-500 dark:hover:border-gray-400 transition-all duration-200 hover:scale-105\"\n                  style={{ backgroundColor: color }}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                />\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Feedback */}\n      <AnimatePresence>\n        {feedback && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"text-center\"\n          >\n            <Card className={`${feedback === 'correct' ? 'border-green-500' : 'border-red-500'} border-2`}>\n              <CardContent className=\"p-6\">\n                <div className={`text-2xl font-bold ${feedback === 'correct' ? 'text-green-600' : 'text-red-600'}`}>\n                  {feedback === 'correct' ? '🎉 Correct!' : '❌ Incorrect'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                  {feedback === 'correct' ? \n                    `Perfect memory! Streak: ${streak}` : \n                    'Try to remember the color associations better!'\n                  }\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":11425},"client/src/components/games/VisualAttentionGame.tsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport GameContainer from './GameContainer';\n\n// Visual attention training based on Attention Network Test (ANT)\ninterface Stimulus {\n  id: number;\n  x: number;\n  y: number;\n  type: 'target' | 'distractor';\n  direction: 'left' | 'right';\n  flankerType: 'congruent' | 'incongruent' | 'neutral';\n}\n\nexport default function VisualAttentionGame() {\n  const [score, setScore] = useState(0);\n  const [round, setRound] = useState(1);\n  const [gameActive, setGameActive] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(90);\n  const [currentStimulus, setCurrentStimulus] = useState<Stimulus | null>(null);\n  const [showCue, setShowCue] = useState(false);\n  const [trialPhase, setTrialPhase] = useState<'waiting' | 'cue' | 'stimulus' | 'response'>('waiting');\n  const [reactionTimes, setReactionTimes] = useState<number[]>([]);\n  const [trialStartTime, setTrialStartTime] = useState(0);\n\n  const generateStimulus = useCallback((): Stimulus => {\n    const flankerTypes = ['congruent', 'incongruent', 'neutral'];\n    const directions = ['left', 'right'];\n    const flankerType = flankerTypes[Math.floor(Math.random() * flankerTypes.length)] as 'congruent' | 'incongruent' | 'neutral';\n    const direction = directions[Math.floor(Math.random() * directions.length)] as 'left' | 'right';\n    \n    return {\n      id: Date.now(),\n      x: Math.random() * 60 + 20, // 20-80% of container width\n      y: Math.random() * 60 + 20, // 20-80% of container height\n      type: 'target',\n      direction,\n      flankerType\n    };\n  }, []);\n\n  const startGame = () => {\n    setGameActive(true);\n    setScore(0);\n    setRound(1);\n    setTimeLeft(90);\n    setReactionTimes([]);\n    startNewTrial();\n  };\n\n  const startNewTrial = useCallback(() => {\n    setTrialPhase('waiting');\n    setCurrentStimulus(null);\n    setShowCue(false);\n    \n    // Wait 1-2 seconds before showing cue\n    setTimeout(() => {\n      setShowCue(true);\n      setTrialPhase('cue');\n      \n      // Show cue for 100ms\n      setTimeout(() => {\n        setShowCue(false);\n        \n        // Wait 400ms then show stimulus\n        setTimeout(() => {\n          const stimulus = generateStimulus();\n          setCurrentStimulus(stimulus);\n          setTrialPhase('stimulus');\n          setTrialStartTime(Date.now());\n          \n          // Auto-advance after 1.5 seconds if no response\n          setTimeout(() => {\n            if (trialPhase === 'stimulus') {\n              nextTrial(false);\n            }\n          }, 1500);\n        }, 400);\n      }, 100);\n    }, Math.random() * 1000 + 1000);\n  }, [generateStimulus, trialPhase]);\n\n  const handleResponse = (chosenDirection: 'left' | 'right') => {\n    if (trialPhase !== 'stimulus' || !currentStimulus) return;\n    \n    const reactionTime = Date.now() - trialStartTime;\n    const correct = chosenDirection === currentStimulus.direction;\n    \n    if (correct) {\n      setScore(prev => prev + 1);\n      setReactionTimes(prev => [...prev, reactionTime]);\n    }\n    \n    nextTrial(correct);\n  };\n\n  const nextTrial = (correct: boolean) => {\n    setTrialPhase('response');\n    setRound(prev => prev + 1);\n    \n    setTimeout(() => {\n      if (round < 30) { // 30 trials total\n        startNewTrial();\n      } else {\n        setGameActive(false);\n      }\n    }, 500);\n  };\n\n  useEffect(() => {\n    if (gameActive && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0) {\n      setGameActive(false);\n    }\n  }, [gameActive, timeLeft]);\n\n  const averageReactionTime = reactionTimes.length > 0 \n    ? Math.round(reactionTimes.reduce((a, b) => a + b, 0) / reactionTimes.length)\n    : 0;\n\n  const renderFlankers = (stimulus: Stimulus) => {\n    const arrows = [];\n    const targetArrow = stimulus.direction === 'left' ? '←' : '→';\n    \n    if (stimulus.flankerType === 'congruent') {\n      // All arrows point same direction\n      arrows.push(targetArrow, targetArrow, targetArrow, targetArrow, targetArrow);\n    } else if (stimulus.flankerType === 'incongruent') {\n      // Flankers point opposite direction\n      const flankerArrow = stimulus.direction === 'left' ? '→' : '←';\n      arrows.push(flankerArrow, flankerArrow, targetArrow, flankerArrow, flankerArrow);\n    } else {\n      // Neutral flankers\n      arrows.push('—', '—', targetArrow, '—', '—');\n    }\n    \n    return arrows.join(' ');\n  };\n\n  return (\n    <GameContainer\n      title=\"Visual Attention Training\"\n      description=\"Improve your attention networks with this scientifically-based attention training task.\"\n      score={score}\n      isActive={gameActive}\n      timeLeft={timeLeft}\n      onGameEnd={() => ({\n        gameType: 'visual-attention',\n        score: Math.round((score / Math.max(round - 1, 1)) * 100),\n        difficulty: 'normal',\n        timeTaken: 90 - timeLeft,\n      })}\n    >\n      <div className=\"space-y-6\">\n        {!gameActive && timeLeft === 90 ? (\n          <div className=\"text-center space-y-4\">\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Scientific Benefits: Trains alerting, orienting, and executive attention networks.\n              Based on the Attention Network Test (ANT) paradigm.\n            </p>\n            <div className=\"text-sm space-y-2 text-left max-w-md mx-auto\">\n              <p><strong>Instructions:</strong></p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>Watch for the center arrow</li>\n                <li>Ignore the flanking arrows/lines</li>\n                <li>Respond as quickly and accurately as possible</li>\n                <li>Click the direction the CENTER arrow points</li>\n              </ul>\n            </div>\n            <Button onClick={startGame} size=\"lg\" data-testid=\"button-start-attention\">\n              Start Training\n            </Button>\n          </div>\n        ) : gameActive ? (\n          <div className=\"relative h-96 w-full border-2 border-gray-300 dark:border-gray-700 rounded-lg overflow-hidden\">\n            <div className=\"text-sm text-center mb-2\">Trial {round}/30</div>\n            \n            {/* Fixation cross */}\n            <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-2xl\">\n              +\n            </div>\n            \n            {/* Spatial cue */}\n            {showCue && (\n              <div className=\"absolute top-8 left-1/2 transform -translate-x-1/2 text-sm\">\n                ↓\n              </div>\n            )}\n            \n            {/* Stimulus */}\n            {currentStimulus && trialPhase === 'stimulus' && (\n              <div\n                className=\"absolute text-2xl font-mono\"\n                style={{\n                  left: `${currentStimulus.x}%`,\n                  top: `${currentStimulus.y}%`,\n                  transform: 'translate(-50%, -50%)'\n                }}\n                data-testid=\"stimulus-display\"\n              >\n                {renderFlankers(currentStimulus)}\n              </div>\n            )}\n            \n            {/* Response buttons */}\n            <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-4\">\n              <Button\n                onClick={() => handleResponse('left')}\n                disabled={trialPhase !== 'stimulus'}\n                size=\"lg\"\n                data-testid=\"button-left\"\n              >\n                ← Left\n              </Button>\n              <Button\n                onClick={() => handleResponse('right')}\n                disabled={trialPhase !== 'stimulus'}\n                size=\"lg\"\n                data-testid=\"button-right\"\n              >\n                Right →\n              </Button>\n            </div>\n            \n            <div className=\"absolute top-2 left-2 text-sm text-gray-500\">\n              Phase: {trialPhase}\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center space-y-4\">\n            <h3 className=\"text-2xl font-bold\">Training Complete!</h3>\n            <div className=\"space-y-2\">\n              <p className=\"text-lg\">Correct Responses: {score}/30</p>\n              <p className=\"text-lg\">Accuracy: {Math.round((score / 30) * 100)}%</p>\n              <p className=\"text-lg\">Average Reaction Time: {averageReactionTime}ms</p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                High accuracy with fast reaction times indicates efficient attention networks!\n              </p>\n            </div>\n            <Button onClick={startGame} size=\"lg\" data-testid=\"button-restart-attention\">\n              Train Again\n            </Button>\n          </div>\n        )}\n      </div>\n    </GameContainer>\n  );\n}","size_bytes":8838},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/NotificationSystem.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Coins, Zap, Sparkles, CheckCircle, Gift } from 'lucide-react';\n\ninterface Notification {\n  id: string;\n  type: 'xp' | 'coins' | 'spending' | 'achievement' | 'congratulations' | 'success' | 'error';\n  message: string;\n  amount?: number;\n  duration?: number;\n}\n\ninterface NotificationSystemProps {\n  notifications: Notification[];\n  onRemove: (id: string) => void;\n}\n\nexport function NotificationSystem({ notifications, onRemove }: NotificationSystemProps) {\n  useEffect(() => {\n    notifications.forEach(notification => {\n      const duration = notification.duration || 4000;\n      const timer = setTimeout(() => {\n        onRemove(notification.id);\n      }, duration);\n      \n      return () => clearTimeout(timer);\n    });\n  }, [notifications, onRemove]);\n\n  const getIcon = (type: Notification['type']) => {\n    switch (type) {\n      case 'xp':\n        return <Zap className=\"w-5 h-5 text-yellow-400\" />;\n      case 'coins':\n        return <Coins className=\"w-5 h-5 text-yellow-500\" />;\n      case 'spending':\n        return <Coins className=\"w-5 h-5 text-red-400\" />;\n      case 'achievement':\n        return <Sparkles className=\"w-5 h-5 text-purple-400\" />;\n      case 'congratulations':\n        return <Gift className=\"w-5 h-5 text-pink-400\" />;\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case 'error':\n        return <CheckCircle className=\"w-5 h-5 text-red-400\" />;\n      default:\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n    }\n  };\n\n  const getColor = (type: Notification['type']) => {\n    switch (type) {\n      case 'xp':\n        return 'from-yellow-400 to-orange-500';\n      case 'coins':\n        return 'from-yellow-500 to-amber-600';\n      case 'spending':\n        return 'from-red-400 to-pink-500';\n      case 'achievement':\n        return 'from-purple-400 to-indigo-500';\n      case 'congratulations':\n        return 'from-pink-400 to-rose-500';\n      case 'success':\n        return 'from-green-400 to-emerald-500';\n      case 'error':\n        return 'from-red-400 to-rose-500';\n      default:\n        return 'from-green-400 to-emerald-500';\n    }\n  };\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 space-y-2\" data-testid=\"notification-system\">\n      <AnimatePresence>\n        {notifications.map((notification) => (\n          <motion.div\n            key={notification.id}\n            initial={{ opacity: 0, x: 300, scale: 0.8 }}\n            animate={{ opacity: 1, x: 0, scale: 1 }}\n            exit={{ opacity: 0, x: 300, scale: 0.8 }}\n            transition={{ \n              type: \"spring\", \n              stiffness: 200, \n              damping: 20 \n            }}\n            className={`\n              relative overflow-hidden rounded-xl p-4 shadow-lg backdrop-blur-sm\n              bg-gradient-to-r ${getColor(notification.type)}\n              text-white min-w-[250px] max-w-[350px]\n            `}\n            data-testid={`notification-${notification.type}`}\n          >\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                initial={{ rotate: 0 }}\n                animate={{ rotate: 360 }}\n                transition={{ duration: 0.6, ease: \"easeOut\" }}\n              >\n                {getIcon(notification.type)}\n              </motion.div>\n              \n              <div className=\"flex-1\">\n                <div className=\"font-semibold text-sm\">\n                  {notification.message}\n                </div>\n                {notification.amount && (\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    transition={{ delay: 0.3 }}\n                    className=\"text-2xl font-bold mt-1\"\n                  >\n                    {notification.type === 'spending' ? '-' : '+'}\n                    {notification.amount}\n                    {notification.type === 'xp' ? ' XP' : notification.type === 'coins' || notification.type === 'spending' ? ' coins' : ''}\n                  </motion.div>\n                )}\n              </div>\n            </div>\n\n            {/* Animated background sparkles */}\n            <div className=\"absolute inset-0 pointer-events-none\">\n              {[...Array(3)].map((_, i) => (\n                <motion.div\n                  key={i}\n                  className=\"absolute w-1 h-1 bg-white rounded-full\"\n                  initial={{ \n                    opacity: 0, \n                    x: Math.random() * 200, \n                    y: Math.random() * 80 \n                  }}\n                  animate={{ \n                    opacity: [0, 1, 0], \n                    scale: [0, 1, 0],\n                    x: Math.random() * 200, \n                    y: Math.random() * 80 \n                  }}\n                  transition={{ \n                    duration: 2, \n                    delay: i * 0.3, \n                    repeat: Infinity \n                  }}\n                />\n              ))}\n            </div>\n          </motion.div>\n        ))}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// Hook to manage notifications\nexport function useNotifications() {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  const addNotification = (notification: Omit<Notification, 'id'>) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    setNotifications(prev => [...prev, { ...notification, id }]);\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  const showXPGain = (amount: number, message: string = \"XP Gained!\") => {\n    addNotification({ type: 'xp', message, amount });\n  };\n\n  const showCoinsGained = (amount: number, message: string = \"Coins Earned!\") => {\n    addNotification({ type: 'coins', message, amount });\n  };\n\n  const showCoinsSpent = (amount: number, message: string = \"Coins Spent\") => {\n    addNotification({ type: 'spending', message, amount });\n  };\n\n  const showCongratulations = (message: string, xp?: number, coins?: number) => {\n    addNotification({ \n      type: 'congratulations', \n      message,\n      amount: xp,\n      duration: 6000 \n    });\n    // Also show individual XP notification with special styling for game completion\n    if (xp) {\n      setTimeout(() => {\n        addNotification({ \n          type: 'xp', \n          message: \"🎯 Experience Earned!\", \n          amount: xp,\n          duration: 4000 \n        });\n      }, 1500);\n    }\n  };\n\n  const showAchievement = (message: string) => {\n    addNotification({ type: 'achievement', message, duration: 6000 });\n  };\n\n  const showGeneral = (message: string, type: 'success' | 'error' = 'success') => {\n    addNotification({ type, message, duration: 3000 });\n  };\n\n  return {\n    notifications,\n    removeNotification,\n    showXPGain,\n    showCoinsGained,\n    showCoinsSpent,\n    showCongratulations,\n    showAchievement,\n    showGeneral,\n  };\n}","size_bytes":7023},"client/src/components/SaveProgressModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useStaticAuth } from \"@/hooks/useStaticAuth\";\n\ninterface SaveProgressModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function SaveProgressModal({ isOpen, onClose }: SaveProgressModalProps) {\n  const [activeTab, setActiveTab] = useState(\"register\");\n  const { toast } = useToast();\n  const { login, register } = useStaticAuth();\n\n  const [registerForm, setRegisterForm] = useState({\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  const [loginForm, setLoginForm] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      await register(registerForm);\n      toast({\n        title: \"Account created successfully!\",\n        description: \"Your progress has been saved and you're now registered.\",\n      });\n      onClose();\n    } catch (error) {\n      // Error handling is done in the useStaticAuth hook\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      await login(loginForm.username, loginForm.password);\n      toast({\n        title: \"Logged in successfully!\",\n        description: \"Welcome back! Your progress has been saved.\",\n      });\n      onClose();\n    } catch (error) {\n      // Error handling is done in the useStaticAuth hook\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[400px]\">\n        <DialogHeader>\n          <DialogTitle>Save Your Progress</DialogTitle>\n          <DialogDescription>\n            Create an account or log in to save your progress and continue your journey with Stimuli.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"register\">Register</TabsTrigger>\n            <TabsTrigger value=\"login\">Login</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"register\" className=\"space-y-4\">\n            <form onSubmit={handleRegister} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={registerForm.firstName}\n                    onChange={(e) => setRegisterForm({ ...registerForm, firstName: e.target.value })}\n                    placeholder=\"John\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={registerForm.lastName}\n                    onChange={(e) => setRegisterForm({ ...registerForm, lastName: e.target.value })}\n                    placeholder=\"Doe\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={registerForm.email}\n                  onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                  placeholder=\"john@example.com\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  value={registerForm.username}\n                  onChange={(e) => setRegisterForm({ ...registerForm, username: e.target.value })}\n                  placeholder=\"johndoe\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={registerForm.password}\n                  onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                  placeholder=\"••••••••\"\n                  required\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isLoading}\n                data-testid=\"button-register\"\n              >\n                {isLoading ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"login\" className=\"space-y-4\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"loginUsername\">Username</Label>\n                <Input\n                  id=\"loginUsername\"\n                  value={loginForm.username}\n                  onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}\n                  placeholder=\"johndoe\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"loginPassword\">Password</Label>\n                <Input\n                  id=\"loginPassword\"\n                  type=\"password\"\n                  value={loginForm.password}\n                  onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                  placeholder=\"••••••••\"\n                  required\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Logging In...\" : \"Log In\"}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"text-center\">\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n            Continue as Guest\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6682},"client/src/hooks/useBeforeUnload.tsx":{"content":"import { useEffect, useState } from \"react\";\n\nexport function useBeforeUnload() {\n  const [showSaveModal, setShowSaveModal] = useState(false);\n\n  useEffect(() => {\n    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n      // Show save modal\n      setShowSaveModal(true);\n      \n      // Show browser's default dialog\n      event.preventDefault();\n      event.returnValue = \"You have unsaved progress. Would you like to save your progress before leaving?\";\n      return event.returnValue;\n    };\n\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === \"hidden\") {\n        setShowSaveModal(true);\n      }\n    };\n\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, []);\n\n  return { showSaveModal, setShowSaveModal };\n}","size_bytes":1024},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport { nanoid } from \"nanoid\";\nimport { storage } from \"./storage\";\nimport { RegisterUser, LoginUser } from \"@shared/schema\";\n\nexport class AuthService {\n  private static readonly SALT_ROUNDS = 10;\n\n  static async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, this.SALT_ROUNDS);\n  }\n\n  static async comparePassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  static async registerUser(userData: RegisterUser) {\n    // Check if username already exists\n    const existingUserByUsername = await storage.getUserByUsername(userData.username);\n    if (existingUserByUsername) {\n      throw new Error(\"Username already exists\");\n    }\n\n    // Check if email already exists\n    const existingUserByEmail = await storage.getUserByEmail(userData.email);\n    if (existingUserByEmail) {\n      throw new Error(\"Email already exists\");\n    }\n\n    // Hash password\n    const hashedPassword = await this.hashPassword(userData.password);\n\n    // Create user\n    const user = await storage.createUser({\n      id: nanoid(),\n      email: userData.email,\n      username: userData.username,\n      password: hashedPassword,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: null,\n      coins: 50, // Starting coins\n      xp: 0,\n      level: 1,\n      streak: 0,\n      totalTreesPlanted: 0,\n    });\n\n    // Return user without password\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n\n  static async loginUser(credentials: LoginUser) {\n    // Find user by username\n    const user = await storage.getUserByUsername(credentials.username);\n    if (!user) {\n      throw new Error(\"Invalid username or password\");\n    }\n\n    // Check password\n    const isValidPassword = await this.comparePassword(credentials.password, user.password);\n    if (!isValidPassword) {\n      throw new Error(\"Invalid username or password\");\n    }\n\n    // Return user without password\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n}","size_bytes":2182},"server/session.ts":{"content":"import session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\nconst PostgreSQLStore = connectPg(session);\n\nexport const sessionStore = new PostgreSQLStore({\n  conString: process.env.DATABASE_URL,\n  createTableIfMissing: true,\n  tableName: \"sessions\",\n});\n\nexport const sessionMiddleware = session({\n  store: sessionStore,\n  secret: process.env.SESSION_SECRET || \"stimuli-dev-secret-key-change-in-production\",\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n  },\n});\n\n// Extend express session type\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}","size_bytes":741},"client/src/hooks/useStaticAuth.tsx":{"content":"import { useState, useEffect, createContext, useContext, ReactNode } from 'react';\nimport { StaticAuthService } from '../lib/staticAuth';\nimport { StoredUser } from '../lib/localStorage';\nimport { useToast } from './use-toast';\n\ninterface AuthContextType {\n  user: StoredUser | null;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  logout: () => void;\n  refreshUser: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<StoredUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  const refreshUser = () => {\n    const currentUser = StaticAuthService.getCurrentUser();\n    setUser(currentUser);\n  };\n\n  useEffect(() => {\n    refreshUser();\n    setIsLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    try {\n      const loggedInUser = await StaticAuthService.login({ username, password });\n      setUser(loggedInUser);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${loggedInUser.username}!`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const register = async (userData: any) => {\n    try {\n      const newUser = await StaticAuthService.register(userData);\n      setUser(newUser);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to Stimuli, ${newUser.username}!`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    StaticAuthService.logout();\n    setUser(null);\n    toast({\n      title: \"Logged out\",\n      description: \"See you next time!\",\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      isLoading,\n      login,\n      register,\n      logout,\n      refreshUser,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useStaticAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useStaticAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2461},"client/src/hooks/useStaticData.tsx":{"content":"// Static data hooks for frontend-only deployment\nimport { useState, useEffect } from 'react';\nimport { LocalStorageManager, StoredUser } from '../lib/localStorage';\nimport { useStaticAuth } from './useStaticAuth';\n\nexport function useStaticGameProgress() {\n  const { user } = useStaticAuth();\n  const [gameProgress, setGameProgress] = useState<any[]>([]);\n\n  const addGameProgress = (progressData: any) => {\n    if (!user) return;\n\n    const progress = LocalStorageManager.addGameProgress({\n      userId: user.id,\n      gameType: progressData.gameType,\n      score: progressData.score,\n      difficulty: progressData.difficulty || 'normal',\n      timeTaken: progressData.timeTaken,\n    });\n\n    // Update user XP\n    const baseXP = 15;\n    const bonusXP = Math.floor(progressData.score / 50);\n    const totalXP = baseXP + bonusXP;\n    \n    updateUserXP(totalXP);\n    \n    // Award coins\n    let coinsEarned = 2;\n    if (progressData.score >= 80) coinsEarned = 5;\n    if (progressData.score >= 95) coinsEarned = 8;\n    \n    LocalStorageManager.addCoinTransaction({\n      userId: user.id,\n      amount: coinsEarned,\n      transactionType: 'game_reward',\n      description: `Completed ${progressData.gameType} (Score: ${progressData.score})`,\n      gameType: progressData.gameType,\n    });\n\n    // Check achievements\n    checkAndUnlockAchievements();\n    \n    refreshGameProgress();\n    return { progress, coinsEarned };\n  };\n\n  const updateUserXP = (xpGain: number) => {\n    if (!user) return;\n\n    let newXP = (user.xp || 0) + xpGain;\n    let newLevel: number;\n    \n    if (newXP < 2000) {\n      newLevel = Math.floor(newXP / 200) + 1;\n      newLevel = Math.min(newLevel, 10);\n    } else if (newXP >= 2000 && (user.level || 1) < 10) {\n      newLevel = 10;\n    } else if (newXP >= 2000) {\n      const excessXP = newXP - 2000;\n      newLevel = 11 + Math.floor(excessXP / 300);\n    } else {\n      newLevel = user.level || 1;\n    }\n\n    const updatedUser = { ...user, xp: newXP, level: newLevel };\n    LocalStorageManager.updateUser(updatedUser);\n  };\n\n  const checkAndUnlockAchievements = () => {\n    if (!user) return [];\n\n    const achievements = LocalStorageManager.getAchievements();\n    const userAchievements = LocalStorageManager.getUserAchievements(user.id);\n    const userProgress = LocalStorageManager.getGameProgress(user.id);\n    const newlyUnlocked: any[] = [];\n\n    achievements.forEach(achievement => {\n      const alreadyUnlocked = userAchievements.find(ua => ua.achievementId === achievement.id);\n      if (alreadyUnlocked) return;\n\n      let shouldUnlock = false;\n\n      switch (achievement.requirement.type) {\n        case 'xp':\n          shouldUnlock = (user.xp || 0) >= achievement.requirement.value;\n          break;\n        case 'games_played':\n          shouldUnlock = userProgress.length >= achievement.requirement.value;\n          break;\n        case 'game_count':\n          const gameCount = userProgress.filter(p => p.gameType === achievement.requirement.game).length;\n          shouldUnlock = gameCount >= achievement.requirement.value;\n          break;\n      }\n\n      if (shouldUnlock) {\n        LocalStorageManager.unlockAchievement(user.id, achievement.id);\n        newlyUnlocked.push(achievement);\n      }\n    });\n\n    return newlyUnlocked;\n  };\n\n  const refreshGameProgress = () => {\n    if (user) {\n      setGameProgress(LocalStorageManager.getGameProgress(user.id));\n    }\n  };\n\n  useEffect(() => {\n    refreshGameProgress();\n  }, [user]);\n\n  return {\n    gameProgress,\n    addGameProgress,\n    refreshGameProgress,\n  };\n}\n\nexport function useStaticAchievements() {\n  const { user } = useStaticAuth();\n  const [achievements, setAchievements] = useState<any[]>([]);\n  const [userAchievements, setUserAchievements] = useState<any[]>([]);\n\n  const refreshAchievements = () => {\n    setAchievements(LocalStorageManager.getAchievements());\n    if (user) {\n      setUserAchievements(LocalStorageManager.getUserAchievements(user.id));\n    }\n  };\n\n  useEffect(() => {\n    refreshAchievements();\n  }, [user]);\n\n  return {\n    achievements,\n    userAchievements,\n    refreshAchievements,\n  };\n}\n\nexport function useStaticTrees() {\n  const { user } = useStaticAuth();\n  const [trees, setTrees] = useState<any[]>([]);\n\n  const plantTree = (treeData: any) => {\n    if (!user) return;\n\n    const tree = LocalStorageManager.plantTree({\n      userId: user.id,\n      treeType: treeData.treeType,\n      growthStage: 1,\n      xpContributed: 0,\n      decorations: [],\n    });\n\n    refreshTrees();\n    return tree;\n  };\n\n  const growTree = (treeId: string, xpToContribute: number) => {\n    if (!user) return;\n\n    const userTrees = LocalStorageManager.getUserTrees(user.id);\n    const tree = userTrees.find(t => t.id === treeId);\n    if (!tree) return;\n\n    const previousStage = tree.growthStage;\n    tree.xpContributed += xpToContribute;\n\n    // Calculate new growth stage based on XP\n    let newStage = 1;\n    if (tree.xpContributed >= 100) newStage = 2;\n    if (tree.xpContributed >= 250) newStage = 3;\n    if (tree.xpContributed >= 500) newStage = 4;\n    if (tree.xpContributed >= 1000) newStage = 5;\n\n    tree.growthStage = newStage;\n    LocalStorageManager.updateTree(tree);\n    refreshTrees();\n\n    return { tree, previousStage };\n  };\n\n  const refreshTrees = () => {\n    if (user) {\n      setTrees(LocalStorageManager.getUserTrees(user.id));\n    }\n  };\n\n  useEffect(() => {\n    refreshTrees();\n  }, [user]);\n\n  return {\n    trees,\n    plantTree,\n    growTree,\n    refreshTrees,\n  };\n}\n\nexport function useStaticStore() {\n  const { user } = useStaticAuth();\n  const [storeItems, setStoreItems] = useState<any[]>([]);\n  const [inventory, setInventory] = useState<any[]>([]);\n\n  const purchaseItem = (itemId: string, quantity: number = 1) => {\n    if (!user) return;\n\n    const items = LocalStorageManager.getStoreItems();\n    const item = items.find(i => i.id === itemId);\n    if (!item) return;\n\n    const totalCost = item.price * quantity;\n    if (user.coins < totalCost) {\n      throw new Error(\"Insufficient coins\");\n    }\n\n    // Deduct coins\n    const updatedUser = { ...user, coins: user.coins - totalCost };\n    LocalStorageManager.updateUser(updatedUser);\n\n    // Add to inventory\n    LocalStorageManager.addToInventory({\n      userId: user.id,\n      storeItemId: itemId,\n      quantity,\n    });\n\n    // Add transaction\n    LocalStorageManager.addCoinTransaction({\n      userId: user.id,\n      amount: -totalCost,\n      transactionType: 'purchase',\n      description: `Purchased ${item.name} x${quantity}`,\n    });\n\n    refreshInventory();\n  };\n\n  const refreshStore = () => {\n    setStoreItems(LocalStorageManager.getStoreItems());\n  };\n\n  const refreshInventory = () => {\n    if (user) {\n      setInventory(LocalStorageManager.getUserInventory(user.id));\n    }\n  };\n\n  useEffect(() => {\n    refreshStore();\n    refreshInventory();\n  }, [user]);\n\n  return {\n    storeItems,\n    inventory,\n    purchaseItem,\n    refreshStore,\n    refreshInventory,\n  };\n}\n\nexport function useStaticJournal() {\n  const { user } = useStaticAuth();\n  const [journalEntries, setJournalEntries] = useState<any[]>([]);\n\n  const addJournalEntry = (entryData: any) => {\n    if (!user) return;\n\n    const entry = LocalStorageManager.addJournalEntry({\n      userId: user.id,\n      focusLevel: entryData.focusLevel,\n      energyLevel: entryData.energyLevel,\n      moodLevel: entryData.moodLevel,\n      notes: entryData.notes,\n    });\n\n    refreshJournal();\n    return entry;\n  };\n\n  const refreshJournal = () => {\n    if (user) {\n      setJournalEntries(LocalStorageManager.getJournalEntries(user.id));\n    }\n  };\n\n  useEffect(() => {\n    refreshJournal();\n  }, [user]);\n\n  return {\n    journalEntries,\n    addJournalEntry,\n    refreshJournal,\n  };\n}\n\nexport function useStaticCoinTransactions() {\n  const { user } = useStaticAuth();\n  const [transactions, setTransactions] = useState<any[]>([]);\n\n  const refreshTransactions = () => {\n    if (user) {\n      setTransactions(LocalStorageManager.getCoinTransactions(user.id));\n    }\n  };\n\n  useEffect(() => {\n    refreshTransactions();\n  }, [user]);\n\n  return {\n    transactions,\n    refreshTransactions,\n  };\n}","size_bytes":8159},"client/src/lib/localStorage.ts":{"content":"// Local storage utilities for static deployment\nexport interface StoredUser {\n  id: string;\n  email: string;\n  username: string;\n  firstName?: string;\n  lastName?: string;\n  xp: number;\n  level: number;\n  streak: number;\n  coins: number;\n  totalTreesPlanted: number;\n  lastLoginDate?: string;\n  createdAt: string;\n}\n\nexport interface StoredGameProgress {\n  id: string;\n  userId: string;\n  gameType: string;\n  score: number;\n  completedAt: string;\n  difficulty: string;\n  timeTaken: number;\n}\n\nexport interface StoredAchievement {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  xpReward: number;\n  iconType: string;\n  requirement: any;\n}\n\nexport interface StoredUserAchievement {\n  id: string;\n  userId: string;\n  achievementId: string;\n  unlockedAt: string;\n}\n\nexport interface StoredTree {\n  id: string;\n  userId: string;\n  treeType: string;\n  growthStage: number;\n  xpContributed: number;\n  plantedAt: string;\n  decorations: string[];\n}\n\nexport interface StoredInventoryItem {\n  id: string;\n  userId: string;\n  storeItemId: string;\n  quantity: number;\n  purchasedAt: string;\n}\n\nexport interface StoredCoinTransaction {\n  id: string;\n  userId: string;\n  amount: number;\n  transactionType: string;\n  description: string;\n  gameType?: string;\n  createdAt: string;\n}\n\nexport interface StoredJournalEntry {\n  id: string;\n  userId: string;\n  focusLevel: number;\n  energyLevel: number;\n  moodLevel: number;\n  notes?: string;\n  createdAt: string;\n}\n\nexport interface StoredStoreItem {\n  id: string;\n  itemType: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  isAvailable: boolean;\n}\n\n// Initialize default data\nconst defaultAchievements: StoredAchievement[] = [\n  {\n    id: \"1\",\n    key: \"neural-spark\",\n    name: \"Neural Spark\",\n    description: \"Your brain's warming up!\",\n    xpReward: 0,\n    iconType: \"⚡\",\n    requirement: { type: \"xp\", value: 50 },\n  },\n  {\n    id: \"2\",\n    key: \"cortex-climber\",\n    name: \"Cortex Climber\",\n    description: \"Scaling the mental mountain!\",\n    xpReward: 0,\n    iconType: \"🧗‍♀️\",\n    requirement: { type: \"xp\", value: 100 },\n  },\n  {\n    id: \"3\",\n    key: \"memory-mage\",\n    name: \"Memory Mage\",\n    description: \"You've got memory magic!\",\n    xpReward: 0,\n    iconType: \"🧙‍♂️\",\n    requirement: { type: \"xp\", value: 200 },\n  },\n  {\n    id: \"4\",\n    key: \"focus-master\",\n    name: \"Focus Master\",\n    description: \"Laser-focused excellence!\",\n    xpReward: 100,\n    iconType: \"🎯\",\n    requirement: { type: \"xp\", value: 500 },\n  },\n  {\n    id: \"5\",\n    key: \"sensory-explorer\",\n    name: \"Sensory Explorer\",\n    description: \"For being curious AF\",\n    xpReward: 50,\n    iconType: \"🔍\",\n    requirement: { type: \"games_played\", value: 6 },\n  },\n  {\n    id: \"6\",\n    key: \"synesthetic-pro\",\n    name: \"Synesthetic Pro\",\n    description: \"Complete 5 color-echo games\",\n    xpReward: 75,\n    iconType: \"🎨\",\n    requirement: { type: \"game_count\", game: \"color-echo\", value: 5 },\n  },\n  {\n    id: \"7\",\n    key: \"tree-master\",\n    name: \"Tree Master\",\n    description: \"Congratulations! You grew your first tree to full maturity!\",\n    xpReward: 200,\n    iconType: \"🌳\",\n    requirement: { type: \"xp\", value: 2000 },\n  },\n];\n\nconst defaultStoreItems: StoredStoreItem[] = [\n  {\n    id: \"1\",\n    itemType: \"tree_seed\",\n    name: \"Cherry Blossom Seed\",\n    description: \"Plant a beautiful cherry blossom tree that grows pink petals\",\n    price: 25,\n    category: \"seeds\",\n    isAvailable: true,\n  },\n  {\n    id: \"2\",\n    itemType: \"tree_seed\",\n    name: \"Rainbow Eucalyptus Seed\",\n    description: \"A magical tree with multicolored bark - rare and special!\",\n    price: 50,\n    category: \"seeds\",\n    isAvailable: true,\n  },\n  {\n    id: \"3\",\n    itemType: \"tree_fertilizer\",\n    name: \"Growth Booster\",\n    description: \"Instantly advance your tree to the next growth stage\",\n    price: 30,\n    category: \"boosters\",\n    isAvailable: true,\n  },\n  {\n    id: \"4\",\n    itemType: \"tree_fertilizer\",\n    name: \"Miracle Grow\",\n    description: \"Doubles XP contribution for tree growth\",\n    price: 20,\n    category: \"boosters\",\n    isAvailable: true,\n  },\n  {\n    id: \"5\",\n    itemType: \"decoration\",\n    name: \"Fairy Lights\",\n    description: \"Add magical twinkling lights to your trees\",\n    price: 35,\n    category: \"decorations\",\n    isAvailable: true,\n  },\n  {\n    id: \"6\",\n    itemType: \"decoration\",\n    name: \"Garden Gnome\",\n    description: \"A friendly gnome to watch over your garden\",\n    price: 40,\n    category: \"decorations\",\n    isAvailable: true,\n  },\n];\n\nexport class LocalStorageManager {\n  private static generateId(): string {\n    return Date.now().toString() + Math.random().toString(36).substr(2, 9);\n  }\n\n  // Initialize data if not exists\n  static initializeData(): void {\n    if (!localStorage.getItem('stimuli_achievements')) {\n      localStorage.setItem('stimuli_achievements', JSON.stringify(defaultAchievements));\n    }\n    if (!localStorage.getItem('stimuli_store_items')) {\n      localStorage.setItem('stimuli_store_items', JSON.stringify(defaultStoreItems));\n    }\n    if (!localStorage.getItem('stimuli_demo_user')) {\n      this.createDemoUser();\n    }\n  }\n\n  static createDemoUser(): void {\n    const demoUser: StoredUser = {\n      id: \"demo-user\",\n      email: \"demo@stimuli.com\",\n      username: \"demo\",\n      firstName: \"Demo\",\n      lastName: \"User\",\n      xp: 0,\n      level: 1,\n      streak: 0,\n      coins: 50,\n      totalTreesPlanted: 0,\n      createdAt: new Date().toISOString(),\n    };\n    localStorage.setItem('stimuli_current_user', JSON.stringify(demoUser));\n    localStorage.setItem('stimuli_demo_user', JSON.stringify(demoUser));\n  }\n\n  // User management\n  static getCurrentUser(): StoredUser | null {\n    const user = localStorage.getItem('stimuli_current_user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  static setCurrentUser(user: StoredUser): void {\n    localStorage.setItem('stimuli_current_user', JSON.stringify(user));\n  }\n\n  static createUser(userData: Partial<StoredUser>): StoredUser {\n    const user: StoredUser = {\n      id: this.generateId(),\n      email: userData.email!,\n      username: userData.username!,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      xp: 0,\n      level: 1,\n      streak: 0,\n      coins: 50,\n      totalTreesPlanted: 0,\n      createdAt: new Date().toISOString(),\n    };\n\n    // Store user in registered users list\n    const users = this.getRegisteredUsers();\n    users.push(user);\n    localStorage.setItem('stimuli_users', JSON.stringify(users));\n    \n    this.setCurrentUser(user);\n    return user;\n  }\n\n  static getRegisteredUsers(): StoredUser[] {\n    const users = localStorage.getItem('stimuli_users');\n    return users ? JSON.parse(users) : [];\n  }\n\n  static findUserByUsername(username: string): StoredUser | null {\n    const users = this.getRegisteredUsers();\n    return users.find(user => user.username === username) || null;\n  }\n\n  static findUserByEmail(email: string): StoredUser | null {\n    const users = this.getRegisteredUsers();\n    return users.find(user => user.email === email) || null;\n  }\n\n  static updateUser(user: StoredUser): void {\n    // Update current user\n    this.setCurrentUser(user);\n    \n    // Update in registered users list\n    const users = this.getRegisteredUsers();\n    const index = users.findIndex(u => u.id === user.id);\n    if (index !== -1) {\n      users[index] = user;\n      localStorage.setItem('stimuli_users', JSON.stringify(users));\n    }\n  }\n\n  // Game progress\n  static addGameProgress(progress: Omit<StoredGameProgress, 'id' | 'completedAt'>): StoredGameProgress {\n    const gameProgress: StoredGameProgress = {\n      ...progress,\n      id: this.generateId(),\n      completedAt: new Date().toISOString(),\n    };\n\n    const allProgress = this.getGameProgress(progress.userId);\n    allProgress.push(gameProgress);\n    localStorage.setItem(`stimuli_game_progress_${progress.userId}`, JSON.stringify(allProgress));\n    \n    return gameProgress;\n  }\n\n  static getGameProgress(userId: string, gameType?: string): StoredGameProgress[] {\n    const progress = localStorage.getItem(`stimuli_game_progress_${userId}`);\n    const allProgress = progress ? JSON.parse(progress) : [];\n    return gameType ? allProgress.filter((p: StoredGameProgress) => p.gameType === gameType) : allProgress;\n  }\n\n  // Achievements\n  static getAchievements(): StoredAchievement[] {\n    const achievements = localStorage.getItem('stimuli_achievements');\n    return achievements ? JSON.parse(achievements) : defaultAchievements;\n  }\n\n  static getUserAchievements(userId: string): StoredUserAchievement[] {\n    const achievements = localStorage.getItem(`stimuli_user_achievements_${userId}`);\n    return achievements ? JSON.parse(achievements) : [];\n  }\n\n  static unlockAchievement(userId: string, achievementId: string): void {\n    const userAchievements = this.getUserAchievements(userId);\n    const alreadyUnlocked = userAchievements.find(ua => ua.achievementId === achievementId);\n    \n    if (!alreadyUnlocked) {\n      const newUserAchievement: StoredUserAchievement = {\n        id: this.generateId(),\n        userId,\n        achievementId,\n        unlockedAt: new Date().toISOString(),\n      };\n      \n      userAchievements.push(newUserAchievement);\n      localStorage.setItem(`stimuli_user_achievements_${userId}`, JSON.stringify(userAchievements));\n      \n      // Award coins for achievement\n      this.addCoinTransaction({\n        userId,\n        amount: 20,\n        transactionType: 'achievement_reward',\n        description: 'Achievement unlocked!',\n      });\n    }\n  }\n\n  // Trees\n  static getUserTrees(userId: string): StoredTree[] {\n    const trees = localStorage.getItem(`stimuli_trees_${userId}`);\n    return trees ? JSON.parse(trees) : [];\n  }\n\n  static plantTree(tree: Omit<StoredTree, 'id' | 'plantedAt'>): StoredTree {\n    const newTree: StoredTree = {\n      ...tree,\n      id: this.generateId(),\n      plantedAt: new Date().toISOString(),\n    };\n\n    const trees = this.getUserTrees(tree.userId);\n    trees.push(newTree);\n    localStorage.setItem(`stimuli_trees_${tree.userId}`, JSON.stringify(trees));\n    \n    return newTree;\n  }\n\n  static updateTree(tree: StoredTree): void {\n    const trees = this.getUserTrees(tree.userId);\n    const index = trees.findIndex(t => t.id === tree.id);\n    if (index !== -1) {\n      trees[index] = tree;\n      localStorage.setItem(`stimuli_trees_${tree.userId}`, JSON.stringify(trees));\n    }\n  }\n\n  // Store and inventory\n  static getStoreItems(): StoredStoreItem[] {\n    const items = localStorage.getItem('stimuli_store_items');\n    return items ? JSON.parse(items) : defaultStoreItems;\n  }\n\n  static getUserInventory(userId: string): StoredInventoryItem[] {\n    const inventory = localStorage.getItem(`stimuli_inventory_${userId}`);\n    return inventory ? JSON.parse(inventory) : [];\n  }\n\n  static addToInventory(item: Omit<StoredInventoryItem, 'id' | 'purchasedAt'>): void {\n    const inventory = this.getUserInventory(item.userId);\n    const newItem: StoredInventoryItem = {\n      ...item,\n      id: this.generateId(),\n      purchasedAt: new Date().toISOString(),\n    };\n    \n    inventory.push(newItem);\n    localStorage.setItem(`stimuli_inventory_${item.userId}`, JSON.stringify(inventory));\n  }\n\n  // Coin transactions\n  static addCoinTransaction(transaction: Omit<StoredCoinTransaction, 'id' | 'createdAt'>): void {\n    const newTransaction: StoredCoinTransaction = {\n      ...transaction,\n      id: this.generateId(),\n      createdAt: new Date().toISOString(),\n    };\n\n    const transactions = this.getCoinTransactions(transaction.userId);\n    transactions.push(newTransaction);\n    localStorage.setItem(`stimuli_coin_transactions_${transaction.userId}`, JSON.stringify(transactions));\n\n    // Update user coins\n    const user = this.getCurrentUser();\n    if (user && user.id === transaction.userId) {\n      user.coins = (user.coins || 0) + transaction.amount;\n      this.updateUser(user);\n    }\n  }\n\n  static getCoinTransactions(userId: string): StoredCoinTransaction[] {\n    const transactions = localStorage.getItem(`stimuli_coin_transactions_${userId}`);\n    return transactions ? JSON.parse(transactions) : [];\n  }\n\n  // Journal entries\n  static addJournalEntry(entry: Omit<StoredJournalEntry, 'id' | 'createdAt'>): StoredJournalEntry {\n    const newEntry: StoredJournalEntry = {\n      ...entry,\n      id: this.generateId(),\n      createdAt: new Date().toISOString(),\n    };\n\n    const entries = this.getJournalEntries(entry.userId);\n    entries.push(newEntry);\n    localStorage.setItem(`stimuli_journal_${entry.userId}`, JSON.stringify(entries));\n    \n    return newEntry;\n  }\n\n  static getJournalEntries(userId: string): StoredJournalEntry[] {\n    const entries = localStorage.getItem(`stimuli_journal_${userId}`);\n    return entries ? JSON.parse(entries) : [];\n  }\n\n  // Logout\n  static logout(): void {\n    localStorage.removeItem('stimuli_current_user');\n  }\n}","size_bytes":12991},"client/src/lib/staticAuth.ts":{"content":"// Static authentication for frontend-only deployment\nimport { LocalStorageManager, StoredUser } from './localStorage';\n\nexport interface RegisterData {\n  email: string;\n  username: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface LoginData {\n  username: string;\n  password: string;\n}\n\nexport class StaticAuthService {\n  // Simple password hashing for demo purposes (not secure for production)\n  private static hashPassword(password: string): string {\n    let hash = 0;\n    for (let i = 0; i < password.length; i++) {\n      const char = password.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString();\n  }\n\n  static async register(userData: RegisterData): Promise<StoredUser> {\n    // Check if username already exists\n    const existingUserByUsername = LocalStorageManager.findUserByUsername(userData.username);\n    if (existingUserByUsername) {\n      throw new Error(\"Username already exists\");\n    }\n\n    // Check if email already exists\n    const existingUserByEmail = LocalStorageManager.findUserByEmail(userData.email);\n    if (existingUserByEmail) {\n      throw new Error(\"Email already exists\");\n    }\n\n    // Store password hash in localStorage for login verification\n    const passwordHash = this.hashPassword(userData.password);\n    localStorage.setItem(`stimuli_password_${userData.username}`, passwordHash);\n\n    // Create user without password\n    const user = LocalStorageManager.createUser({\n      email: userData.email,\n      username: userData.username,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n    });\n\n    return user;\n  }\n\n  static async login(credentials: LoginData): Promise<StoredUser> {\n    // Find user by username\n    const user = LocalStorageManager.findUserByUsername(credentials.username);\n    if (!user) {\n      throw new Error(\"Invalid username or password\");\n    }\n\n    // Check password\n    const storedPasswordHash = localStorage.getItem(`stimuli_password_${credentials.username}`);\n    const providedPasswordHash = this.hashPassword(credentials.password);\n\n    if (storedPasswordHash !== providedPasswordHash) {\n      throw new Error(\"Invalid username or password\");\n    }\n\n    // Set as current user\n    LocalStorageManager.setCurrentUser(user);\n    return user;\n  }\n\n  static getCurrentUser(): StoredUser | null {\n    return LocalStorageManager.getCurrentUser();\n  }\n\n  static logout(): void {\n    LocalStorageManager.logout();\n  }\n\n  static isLoggedIn(): boolean {\n    return LocalStorageManager.getCurrentUser() !== null;\n  }\n}","size_bytes":2628},"vite.config.static.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  base: '/stimuli/', // Change this to match your GitHub repository name\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./client/src\"),\n      \"@shared\": path.resolve(__dirname, \"./shared\"),\n      \"@assets\": path.resolve(__dirname, \"./attached_assets\")\n    },\n  },\n  build: {\n    outDir: 'dist',\n    sourcemap: false,\n    minify: 'esbuild',\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          ui: ['framer-motion', 'lucide-react']\n        }\n      }\n    }\n  },\n  optimizeDeps: {\n    include: ['react', 'react-dom', 'framer-motion']\n  },\n  server: {\n    port: 5000,\n    host: true,\n    allowedHosts: [\n      '7d0980b3-01e3-4587-8612-a9ce5ad6d453-00-1vgxiw318d61u.spock.replit.dev'\n    ]\n  }\n})","size_bytes":950},"GITHUB_PAGES_DEPLOYMENT.md":{"content":"# GitHub Pages Deployment Guide for Stimuli\n\nThis guide explains how to deploy the Stimuli sensory training application to GitHub Pages as a static website.\n\n## Overview\n\nStimuli has been converted to a fully static frontend application that:\n- Stores all user data in browser localStorage\n- Provides client-side authentication with password hashing\n- Tracks game progress, achievements, and tree growth locally\n- Requires no backend server or database\n\n## Prerequisites\n\n1. GitHub account\n2. Git installed on your computer\n3. Node.js (for building the application)\n\n## Step-by-Step Deployment\n\n### 1. Prepare Your Repository\n\n1. Create a new repository on GitHub named `stimuli` (or any name you prefer)\n2. Clone this project to your local machine\n3. Update the repository URL in your local Git configuration\n\n### 2. Configure for GitHub Pages\n\n1. Open `vite.config.static.ts`\n2. Update the `base` path to match your repository name:\n   ```typescript\n   base: '/your-repo-name/', // Replace with your actual repo name\n   ```\n\n### 3. Build the Static Application\n\n```bash\n# Install dependencies\nnpm install\n\n# Build for production\nnpm run build --config vite.config.static.ts\n```\n\nThis creates a `dist` folder containing all static files.\n\n### 4. Deploy to GitHub Pages\n\n#### Option A: Using GitHub Actions (Recommended)\n\n1. Create `.github/workflows/deploy.yml`:\n\n```yaml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Build\n      run: npm run build\n\n    - name: Deploy to GitHub Pages\n      uses: peaceiris/actions-gh-pages@v3\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./dist\n```\n\n2. Push your code to the main branch\n3. Enable GitHub Pages in your repository settings\n4. Set the source to \"GitHub Actions\"\n\n#### Option B: Manual Deployment\n\n1. Build the application locally (see step 3)\n2. Create a `gh-pages` branch\n3. Copy the contents of the `dist` folder to the root of the `gh-pages` branch\n4. Push the `gh-pages` branch to GitHub\n5. Enable GitHub Pages in repository settings with `gh-pages` as the source\n\n### 5. Configure GitHub Pages\n\n1. Go to your repository on GitHub\n2. Click \"Settings\" → \"Pages\"\n3. Select your deployment source:\n   - For GitHub Actions: Select \"GitHub Actions\"\n   - For manual: Select \"Deploy from a branch\" and choose `gh-pages`\n\n## Features in Static Deployment\n\n### Authentication\n- Users can register with email, username, and password\n- Login sessions persist in localStorage\n- Password hashing for basic security\n\n### Data Persistence\n- All game progress stored locally\n- Achievements and rewards system\n- Tree growth and decoration tracking\n- Journal entries and mood tracking\n- Coin transactions and store purchases\n\n### Game Features\n- All cognitive training games fully functional\n- XP and leveling system\n- Achievement unlocking with coin rewards\n- Progress visualization and statistics\n\n## Important Notes\n\n### Data Portability\n- User data is stored in browser localStorage\n- Data is device/browser specific\n- Consider implementing export/import functionality for data backup\n\n### Browser Compatibility\n- Requires modern browsers with localStorage support\n- Works on desktop and mobile devices\n- No Internet Explorer support\n\n### Security Considerations\n- Password hashing is basic and suitable for demo purposes\n- For production use, consider more robust authentication\n- All data is client-side only\n\n## Customization\n\n### Branding\n- Update `index.html` title and meta tags\n- Modify `public/manifest.json` for PWA settings\n- Replace favicon and app icons in `public/` folder\n\n### Configuration\n- Modify initial coins, XP rates, and achievement requirements in `client/src/lib/localStorage.ts`\n- Customize store items and prices\n- Adjust tree growth mechanics and level progression\n\n## Troubleshooting\n\n### Build Issues\n- Ensure all dependencies are installed: `npm install`\n- Check Node.js version (requires Node 18+)\n- Clear npm cache: `npm cache clean --force`\n\n### Deployment Issues\n- Verify the base path in `vite.config.static.ts` matches your repository name\n- Check GitHub Pages settings are configured correctly\n- Ensure all files are properly committed and pushed\n\n### Runtime Issues\n- Check browser console for JavaScript errors\n- Verify localStorage is enabled in browser\n- Clear browser cache and localStorage if needed\n\n## Live Demo\n\nOnce deployed, your application will be available at:\n`https://yourusername.github.io/your-repo-name/`\n\n## Support\n\nFor issues with the application itself, check the browser console for errors and ensure localStorage is functioning properly.","size_bytes":4982},"README.md":{"content":"# Stimuli - Sensory Training for Neurodivergent Minds\n\nA professional sensory training application designed to support neurodivergent users through an engaging, interactive tree growth metaphor. Train your cognitive abilities through gamified brain training exercises with beautiful visualization.\n\n## 🌟 Features\n\n### Cognitive Training Games\n- **Color Echo**: Match colors to sounds and strengthen cross-sensory connections\n- **Shape Sequence**: Remember and reproduce complex visual patterns\n- **Spotlight**: Find the odd one out and improve focused attention\n- **Synesthetic Recall**: Connect words with colors to enhance semantic memory\n- **Memory Matrix**: Remember and manipulate information in your mind\n- **Quick Response**: Train rapid decision-making and reaction time\n- **Reaction Time**: Improve processing speed and quick responses\n- **Number Sequence**: Remember and recall number patterns\n- **Pattern Recognition**: Identify complex visual patterns\n\n### Gamification Elements\n- **XP System**: Earn experience points for completing games\n- **Level Progression**: Advance through levels with tree growth visualization\n- **Achievement System**: Unlock badges and earn coin rewards\n- **Coin Economy**: Purchase tree seeds, decorations, and boosters\n- **Growth Trees**: Watch your progress grow into beautiful trees\n\n### Progress Tracking\n- **Personal Dashboard**: Track your cognitive development\n- **Journal System**: Record mood, focus, and energy levels\n- **Statistics**: View detailed progress charts and analytics\n- **Achievement Gallery**: Display your earned badges and milestones\n\n## 🚀 Technology Stack\n\n- **Frontend**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with custom design system\n- **UI Components**: Radix UI with shadcn/ui\n- **Animations**: Framer Motion\n- **Data Storage**: Browser localStorage (no backend required)\n- **Build Tool**: Vite\n- **Deployment**: GitHub Pages compatible\n\n## 📱 Static Deployment\n\nThis application runs entirely in the browser with no backend dependencies:\n\n- **Client-side Authentication**: Secure login/registration with password hashing\n- **Local Data Storage**: All progress saved in browser localStorage\n- **Offline Capable**: Works without internet after initial load\n- **Cross-Platform**: Runs on desktop and mobile browsers\n\n## 🛠 Development\n\n### Prerequisites\n- Node.js 18 or higher\n- npm or yarn\n\n### Setup\n```bash\n# Clone the repository\ngit clone <your-repo-url>\ncd stimuli\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n```\n\n### Building for Production\n```bash\n# Build static files for deployment\nnpm run build\n```\n\n## 🌐 Deployment\n\n### GitHub Pages\n1. Update `base` path in `vite.config.static.ts` to match your repository name\n2. Build the application: `npm run build`\n3. Deploy the `dist` folder to GitHub Pages\n\nSee [GITHUB_PAGES_DEPLOYMENT.md](GITHUB_PAGES_DEPLOYMENT.md) for detailed instructions.\n\n### Other Static Hosts\nThe built application in the `dist` folder can be deployed to any static hosting service:\n- Netlify\n- Vercel\n- Firebase Hosting\n- AWS S3 + CloudFront\n\n## 🎮 Game Mechanics\n\n### XP and Leveling\n- **Levels 1-9**: Progress every 200 XP\n- **Level 10**: Reached at exactly 2000 XP (tree completion)\n- **Level 11+**: Continue with 300 XP per level\n- **Tree Growth**: Trees advance through 5 growth stages based on XP\n\n### Coin System\n- Earn coins by completing games (2-8 coins based on performance)\n- Achievement unlocks award 20 coins\n- Spend coins on seeds, decorations, and boosters\n\n### Achievements\n- Multiple categories: XP milestones, game-specific, and special achievements\n- Each achievement unlock provides coin rewards\n- Visual badge collection system\n\n## 🎨 Customization\n\n### Store Items\nModify store items in `client/src/lib/localStorage.ts`:\n- Tree seeds (Cherry Blossom, Rainbow Eucalyptus)\n- Decorations (Fairy Lights, Garden Gnomes)\n- Boosters (Growth enhancers, XP multipliers)\n\n### Game Difficulty\nAdjust game parameters in individual game components:\n- Sequence lengths\n- Time limits\n- Scoring mechanisms\n\n### Visual Themes\nCustomize the design system in `client/src/index.css`:\n- Color palette\n- Typography\n- Component styling\n\n## 🧠 Neurodivergent-Friendly Design\n\n- **Clear Visual Hierarchy**: Consistent navigation and layout\n- **Progress Visualization**: Immediate feedback and achievement recognition\n- **Customizable Difficulty**: Adaptive challenge levels\n- **Sensory Integration**: Games designed for cross-sensory training\n- **Positive Reinforcement**: Achievement system with visual rewards\n\n## 📊 Data Management\n\n### User Data Structure\n- User profiles with authentication\n- Game progress and statistics\n- Achievement tracking\n- Tree growth and decorations\n- Journal entries and mood tracking\n- Coin transactions and inventory\n\n### Data Persistence\nAll data is stored in browser localStorage with structured JSON objects. No external database required.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## 📄 License\n\nThis project is licensed under the MIT License. See LICENSE file for details.\n\n## 🆘 Support\n\nIf you encounter any issues:\n1. Check the browser console for errors\n2. Ensure localStorage is enabled\n3. Clear browser cache if necessary\n4. Create an issue on GitHub with details\n\n## 🌱 Future Enhancements\n\n- Data export/import functionality\n- Additional cognitive training games\n- Social features (with privacy controls)\n- Advanced analytics and insights\n- Progressive Web App (PWA) features\n- Accessibility improvements\n\n---\n\nMade with 💜 for neurodivergent minds everywhere.","size_bytes":5676},"convert-to-static.sh":{"content":"#!/bin/bash\n\n# Script to convert Stimuli app to static deployment\necho \"Converting Stimuli app to static deployment for GitHub Pages...\"\n\n# Update package.json to use static config\ncp package.static.json package.json\n\n# Update vite config\ncp vite.config.static.ts vite.config.ts\n\n# Remove all server-related dependencies from package.json\necho \"Removing server dependencies...\"\n\necho \"Conversion complete! The app is now ready for static deployment on GitHub Pages.\"\necho \"To deploy:\"\necho \"1. Run 'npm run build' to create static files\"\necho \"2. Deploy the 'dist' folder to GitHub Pages\"\necho \"3. Make sure to update the 'base' path in vite.config.ts to match your repo name\"","size_bytes":676},"client/src/components/CoinStore.old.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { useStaticStore, useStaticCoinTransactions } from '@/hooks/useStaticData';\nimport { useStaticAuth } from '@/hooks/useStaticAuth';\nimport { StoreItem, User, CoinTransaction, UserInventory } from '@shared/schema';\nimport { Coins, ShoppingCart, Package, TrendingUp, Sparkles } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { NotificationSystem, useNotifications } from '@/components/NotificationSystem';\n\nexport default function CoinStore() {\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const {\n    notifications,\n    removeNotification,\n    showCoinsSpent,\n    showGeneral,\n  } = useNotifications();\n\n  // Fetch user data for coins\n  const { data: user } = useQuery<User>({ queryKey: ['/api/auth/user'] });\n\n  // Fetch store items\n  const { data: storeItems = [], isLoading: itemsLoading } = useQuery<StoreItem[]>({\n    queryKey: ['/api/store'],\n  });\n\n  // Fetch user inventory\n  const { data: inventory = [] } = useQuery<UserInventory[]>({\n    queryKey: ['/api/inventory'],\n  });\n\n  // Fetch coin transactions\n  const { data: transactions = [] } = useQuery<CoinTransaction[]>({\n    queryKey: ['/api/coins/transactions'],\n  });\n\n  // Purchase mutation\n  const purchaseMutation = useMutation({\n    mutationFn: async ({ itemId, quantity }: { itemId: number; quantity: number }) => \n      apiRequest('POST', '/api/store/purchase', { itemId, quantity }),\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/inventory'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/coins/transactions'] });\n      \n      // Show animated coin spending notification\n      const item = storeItems.find(item => item.id === data.itemId);\n      if (item) {\n        showCoinsSpent(item.price, `${item.name} Purchased!`);\n      }\n      \n      showGeneral('🎉 Purchase successful! Item added to your inventory.', 'success');\n    },\n    onError: (error) => {\n      toast({ \n        title: 'Purchase failed', \n        description: error.message,\n        variant: 'destructive' \n      });\n    },\n  });\n\n  const categories = [\n    { id: 'all', name: 'All Items', icon: ShoppingCart },\n    { id: 'seeds', name: 'Tree Seeds', icon: Sparkles },\n    { id: 'boosters', name: 'Boosters', icon: TrendingUp },\n    { id: 'decorations', name: 'Decorations', icon: Package },\n  ];\n\n  const filteredItems = selectedCategory === 'all' \n    ? storeItems \n    : storeItems.filter(item => item.category === selectedCategory);\n\n  const getItemIcon = (itemType: string) => {\n    switch (itemType) {\n      case 'tree_seed': return '🌱';\n      case 'tree_fertilizer': return '💧';\n      case 'decoration': return '✨';\n      default: return '📦';\n    }\n  };\n\n  const getUserItemQuantity = (itemId: number) => {\n    const inventoryItem = inventory.find(inv => inv.storeItemId === itemId);\n    return inventoryItem?.quantity || 0;\n  };\n\n  if (itemsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-800 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3, 4, 5, 6].map(i => (\n              <div key={i} className=\"h-48 bg-gray-200 dark:bg-gray-800 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <NotificationSystem notifications={notifications} onRemove={removeNotification} />\n      <div className=\"space-y-6\">\n      {/* Header with coin balance */}\n      <div className=\"flex items-center justify-between bg-gradient-to-r from-yellow-50 via-orange-50 to-red-50 dark:from-yellow-900/20 dark:via-orange-900/20 dark:to-red-900/20 rounded-xl p-6 border border-yellow-200 dark:border-yellow-800\">\n        <div>\n          <motion.h2 \n            className=\"text-3xl font-bold bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n          >\n            🏪 Coin Store\n          </motion.h2>\n          <motion.p \n            className=\"text-gray-600 dark:text-gray-400\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.2 }}\n          >\n            Spend your hard-earned coins on tree seeds and growth boosters!\n          </motion.p>\n        </div>\n        <motion.div \n          className=\"flex items-center gap-2 text-xl font-bold bg-gradient-to-r from-yellow-100 to-orange-100 dark:from-yellow-900/30 dark:to-orange-900/30 px-4 py-2 rounded-lg border border-yellow-300 dark:border-yellow-700\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{ delay: 0.3, type: \"spring\" }}\n        >\n          <Coins className=\"h-6 w-6 text-yellow-500\" />\n          <span className=\"text-yellow-600 dark:text-yellow-400\" data-testid=\"text-store-coins\">{user?.coins || 0}</span>\n        </motion.div>\n      </div>\n\n      <Tabs defaultValue=\"store\" className=\"space-y-4\">\n        <TabsList className=\"grid grid-cols-3 bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/40 dark:to-purple-900/40 p-1 rounded-xl\">\n          <TabsTrigger \n            value=\"store\" \n            data-testid=\"tab-store\"\n            className=\"rounded-lg data-[state=active]:bg-white dark:data-[state=active]:bg-gray-800 data-[state=active]:shadow-md transition-all duration-200\"\n          >\n            🏪 Store\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"inventory\" \n            data-testid=\"tab-inventory\"\n            className=\"rounded-lg data-[state=active]:bg-white dark:data-[state=active]:bg-gray-800 data-[state=active]:shadow-md transition-all duration-200\"\n          >\n            📦 My Items\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"transactions\" \n            data-testid=\"tab-transactions\"\n            className=\"rounded-lg data-[state=active]:bg-white dark:data-[state=active]:bg-gray-800 data-[state=active]:shadow-md transition-all duration-200\"\n          >\n            📊 History\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"store\" className=\"space-y-4\">\n          {/* Category filter */}\n          <div className=\"flex flex-wrap gap-2 mb-6\">\n            {categories.map((category) => {\n              const Icon = category.icon;\n              return (\n                <Button\n                  key={category.id}\n                  variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category.id)}\n                  data-testid={`button-category-${category.id}`}\n                >\n                  <Icon className=\"h-4 w-4 mr-2\" />\n                  {category.name}\n                </Button>\n              );\n            })}\n          </div>\n\n          {/* Store items grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredItems.map((item, index) => (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n                key={item.id}\n              >\n                <Card className=\"hover:shadow-xl hover:scale-105 transition-all duration-300 bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 border-2 hover:border-blue-200 dark:hover:border-blue-700 h-full flex flex-col\">\n                  <CardHeader className=\"pb-3 flex-grow\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <motion.span \n                        className=\"text-3xl\"\n                        whileHover={{ scale: 1.2, rotate: 5 }}\n                        transition={{ type: \"spring\", stiffness: 400 }}\n                      >\n                        {getItemIcon(item.itemType)}\n                      </motion.span>\n                      <motion.div whileHover={{ scale: 1.1 }}>\n                        <Badge \n                          variant=\"secondary\" \n                          className=\"bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30 text-blue-700 dark:text-blue-300 border border-blue-200 dark:border-blue-700\"\n                        >\n                          {item.category}\n                        </Badge>\n                      </motion.div>\n                    </div>\n                    <CardTitle className=\"text-lg bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent font-bold mb-2\">\n                      {item.name}\n                    </CardTitle>\n                    <CardDescription className=\"text-gray-600 dark:text-gray-400 text-sm flex-grow\">\n                      {item.description}\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3 pt-0\">\n                  <div className=\"flex items-center justify-center\">\n                    <motion.div \n                      className=\"flex items-center gap-1 bg-gradient-to-r from-yellow-100 to-orange-100 dark:from-yellow-900/30 dark:to-orange-900/30 px-3 py-1 rounded-lg\"\n                      whileHover={{ scale: 1.05 }}\n                    >\n                      <Coins className=\"h-4 w-4 text-yellow-500\" />\n                      <span className=\"font-bold text-yellow-600 dark:text-yellow-400\">{item.price}</span>\n                    </motion.div>\n                  </div>\n\n                  <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                    <Button\n                      onClick={() => purchaseMutation.mutate({ itemId: item.id, quantity: 1 })}\n                      disabled={purchaseMutation.isPending || (user?.coins || 0) < item.price}\n                      className=\"w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold shadow-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                      data-testid={`button-buy-${item.id}`}\n                    >\n                      {purchaseMutation.isPending ? '⏳ Purchasing...' : '🛒 Buy Now'}\n                    </Button>\n                  </motion.div>\n\n                  {getUserItemQuantity(item.id) > 0 && (\n                    <p className=\"text-xs text-center text-green-600 min-h-[16px]\">\n                      You own {getUserItemQuantity(item.id)}\n                    </p>\n                  )}\n                  {getUserItemQuantity(item.id) === 0 && (\n                    <div className=\"min-h-[16px]\"></div>\n                  )}\n                </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n\n          {filteredItems.length === 0 && (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <ShoppingCart className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No Items Available</h3>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Check back later for new items!\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"inventory\" className=\"space-y-4\">\n          {inventory.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <Package className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Empty Inventory</h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  You haven't purchased any items yet.\n                </p>\n                <Button onClick={() => setSelectedCategory('all')}>\n                  Browse Store\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {inventory.map((item) => {\n                const storeItem = storeItems.find(si => si.id === item.storeItemId);\n                if (!storeItem) return null;\n\n                return (\n                  <Card key={item.id} className=\"h-full\">\n                    <CardHeader className=\"text-center pb-3\">\n                      <div className=\"text-4xl mb-2\">{getItemIcon(storeItem.itemType)}</div>\n                      <CardTitle className=\"text-lg\">{storeItem.name}</CardTitle>\n                      <CardDescription className=\"text-sm\">{storeItem.description}</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"text-center\">\n                      <Badge variant=\"default\" className=\"text-lg px-3 py-1\">\n                        Quantity: {item.quantity}\n                      </Badge>\n                      <p className=\"text-xs text-gray-500 mt-2\">\n                        Purchased: {item.purchasedAt ? new Date(item.purchasedAt).toLocaleDateString() : 'Unknown'}\n                      </p>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"transactions\" className=\"space-y-4\">\n          {transactions.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <TrendingUp className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No Transactions</h3>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Your coin transaction history will appear here.\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Transactions</CardTitle>\n                <CardDescription>Your coin earning and spending history</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {transactions.slice(0, 10).map((transaction, index) => (\n                  <div key={transaction.id} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`p-2 rounded-full ${\n                          transaction.amount > 0 \n                            ? 'bg-green-100 dark:bg-green-900/20' \n                            : 'bg-red-100 dark:bg-red-900/20'\n                        }`}>\n                          <Coins className={`h-4 w-4 ${\n                            transaction.amount > 0 ? 'text-green-600' : 'text-red-600'\n                          }`} />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-sm\">{transaction.description}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {transaction.createdAt ? new Date(transaction.createdAt).toLocaleDateString() : 'Unknown'}\n                          </p>\n                        </div>\n                      </div>\n                      <div className={`font-bold ${\n                        transaction.amount > 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {transaction.amount > 0 ? '+' : ''}{transaction.amount}\n                      </div>\n                    </div>\n                    {index < transactions.slice(0, 10).length - 1 && <Separator />}\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n      </div>\n    </>\n  );\n}","size_bytes":16418}},"version":1}